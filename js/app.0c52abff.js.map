{"version":3,"file":"js/app.0c52abff.js","mappings":"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","sources":["webpack://sundials/./src/components/SunObject.vue?5d99","webpack://sundials/./src/components/SunObject.vue","webpack://sundials/./src/components/SunObject.vue?d054","webpack://sundials/./src/calculations.ts","webpack://sundials/./src/components/SundialLetter.vue?4fb7","webpack://sundials/./src/components/SundialLetter.vue","webpack://sundials/./src/components/SundialLetter.vue?fc0a","webpack://sundials/./src/components/DialAndGnomonSundial.vue?d235","webpack://sundials/./src/components/DialAndGnomonSundial.vue","webpack://sundials/./src/components/DialAndGnomonSundial.vue?bb24","webpack://sundials/./src/components/CameraHelper.vue?1959","webpack://sundials/./src/components/CameraHelper.vue","webpack://sundials/./src/components/CameraHelper.vue?a02a","webpack://sundials/./src/components/RendererHelper.vue?52e9","webpack://sundials/./src/components/RendererHelper.vue","webpack://sundials/./src/components/RendererHelper.vue?f3a6","webpack://sundials/./src/components/ThreeTimesExplanation.vue","webpack://sundials/./src/components/ThreeTimesExplanation.vue?3a6b","webpack://sundials/./src/walkthrough.ts","webpack://sundials/./src/components/Line2FromCientosPackageAndItsTheSameButYouCanAlsoUseClippingPlanesSoItsNot.vue?63e3","webpack://sundials/./src/components/Line2FromCientosPackageAndItsTheSameButYouCanAlsoUseClippingPlanesSoItsNot.vue","webpack://sundials/./src/components/Line2FromCientosPackageAndItsTheSameButYouCanAlsoUseClippingPlanesSoItsNot.vue?c1b9","webpack://sundials/./src/components/PointSundial.vue","webpack://sundials/./src/components/PointSundial.vue?d9d0","webpack://sundials/./src/components/PointSundial.vue?a8a6","webpack://sundials/./src/components/CompassObject.vue?6834","webpack://sundials/./src/components/CompassObject.vue","webpack://sundials/./src/components/CompassObject.vue?b517","webpack://sundials/./src/App.vue?2a5e","webpack://sundials/./src/App.vue","webpack://sundials/./src/App.vue?7ccd","webpack://sundials/./src/main.ts","webpack://sundials/webpack/bootstrap","webpack://sundials/webpack/runtime/chunk loaded","webpack://sundials/webpack/runtime/compat get default export","webpack://sundials/webpack/runtime/define property getters","webpack://sundials/webpack/runtime/global","webpack://sundials/webpack/runtime/hasOwnProperty shorthand","webpack://sundials/webpack/runtime/make namespace object","webpack://sundials/webpack/runtime/publicPath","webpack://sundials/webpack/runtime/jsonp chunk loading","webpack://sundials/webpack/startup"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nimport { PropType, computed } from 'vue';\n\n    \nexport default /*@__PURE__*/_defineComponent({\n  __name: 'SunObject',\n  props: {\n        position: {\n            required: true,\n            type: Object as PropType<{x:number, y:number, z:number}>,\n        }\n    },\n  setup(__props) {\n\n    const props = __props\n\n    // have to copy this for some reason idk make it an array for good measure\n    const positionCopy = computed<[number, number, number]>(() => [props.position.x, props.position.y, props.position.z])\n    \n\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_TresSphereGeometry = _resolveComponent(\"TresSphereGeometry\")!\n  const _component_TresMeshBasicMaterial = _resolveComponent(\"TresMeshBasicMaterial\")!\n  const _component_TresMesh = _resolveComponent(\"TresMesh\")!\n  const _component_TresObject3D = _resolveComponent(\"TresObject3D\")!\n\n  return (_openBlock(), _createBlock(_component_TresObject3D, { position: positionCopy.value }, {\n    default: _withCtx(() => [\n      _createVNode(_component_TresMesh, null, {\n        default: _withCtx(() => [\n          _createVNode(_component_TresSphereGeometry, { args: [0.5, 20, 16,] }),\n          _createVNode(_component_TresMeshBasicMaterial, { color: \"#ffffff\" })\n        ]),\n        _: 1\n      })\n    ]),\n    _: 1\n  }, 8, [\"position\"]))\n}\n}\n\n})","<!-- 3D sphere representing the sun -->\n\n<script setup lang=\"ts\">\n    import { PropType, defineProps, computed } from 'vue';\n\n    const props = defineProps({\n        position: {\n            required: true,\n            type: Object as PropType<{x:number, y:number, z:number}>,\n        }\n    })\n\n    // have to copy this for some reason idk make it an array for good measure\n    const positionCopy = computed<[number, number, number]>(() => [props.position.x, props.position.y, props.position.z])\n    \n\n</script>\n\n<template>\n    <!-- sun wrapper -->\n    <TresObject3D :position=\"positionCopy\">\n        <!-- sun -->\n        <TresMesh>\n            <TresSphereGeometry :args=\"[0.5, 20, 16,]\" />\n            <TresMeshBasicMaterial color=\"#ffffff\" />\n        </TresMesh>\n\n    </TresObject3D>\n</template>\n","import script from \"./SunObject.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./SunObject.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { Matrix3, Plane, Ray, Vector3 } from \"three\";\n\nexport function rad(degrees: number) {\n    return degrees * Math.PI/180\n}\n\n/**\n * Compute the sun's position in horizontal coordinates, using the current date, time, latitude, and longitude.\n */\nexport function calculateSunHorizontalCoords(day: number, time: number, latitude: number, longitude: number) {\n    // using guide from here: https://en.wikipedia.org/wiki/Position_of_the_Sun\n\n    const longRad = longitude * Math.PI / 180;\n    const latRad = latitude * Math.PI / 180;\n\n    // pretend the year is 2023 (non-leap year)\n    // calculate ecliptic coordinates\n    /** `D_utc`. Always within 1 second of `D_ut`, the observed value.\n     * Leap seconds are added/subtracted to `D_utc` to compensate. \n     * `D_utc` is the (fractional) number of days since noon on January 1st, 2000.\n     * Wikipedia page on position of the sun refers to this value as `n`.\n     * D_utc IS FRACTIONAL here!\n     * */\n    const D_utc = 8400.5 + day + time / 1440;\n    // tai was 37 seconds ahead of UTC in 2023\n    const D_tai = D_utc + 37 / (24 * 60 * 60)\n    /**\n     * Terrestrial Time (32.184 seconds ahead of TAI)\n     * https://aa.usno.navy.mil/faq/TT\n     */ \n    const D_tt = D_tai + 32.184 / (24 * 60 * 60);\n\n    const L = (rad(280.460) + rad(0.9856474) * D_tt) % (2 * Math.PI);\n    const g = (rad(357.528) + rad(0.9856003) * D_tt) % (2 * Math.PI);\n    const lambda = L + rad(1.915) * Math.sin(g) + rad(0.020) * Math.sin(2 * g);\n    const epsilon = rad(23.4393) - rad(4e-7) * D_tt;\n\n\n    // convert to equitorial coords\n    const rightAsc = Math.atan2(Math.cos(epsilon) * Math.sin(lambda), Math.cos(lambda));\n    const declination = Math.asin(Math.sin(epsilon) * Math.sin(lambda));\n\n\n    // compute hour angle\n    // https://aa.usno.navy.mil/faq/GAST\n    const D_utc_of_last_midnight = Math.trunc(D_utc + 0.5)- 0.5\n    /** Hours since last midnight */\n    const H = (D_utc - D_utc_of_last_midnight) * 24\n    /**Centuries since noon on Jan 1st 2000 */\n    const T = D_tt/36525;\n    /** Greenwich apparent sidereal time (converted to hour angle) */\n    const GMST = (6.697375 + 0.065707485828 * D_utc_of_last_midnight + 1.0027379*H + 0.0854103*T + 0.0000258 * Math.pow(T, 2)) * Math.PI/12\n    // const GMST = ((18.697375 + 24.065709824279 * D_utc) % 24) * Math.PI/12;\n    const omega = rad(125.04) - rad(0.052954)*D_tt;\n    const deltaPsi = (-0.000319 * Math.sin(omega) - 0.000024 * Math.sin(2 * L)) * Math.PI / 12\n    const eqeq = deltaPsi * Math.cos(epsilon);\n    const GAST = GMST + eqeq;\n\n    // earth rotation angle - INACCURATE for finding the sun pos!! use GAST instead\n    // // const ERA = 2 * Math.PI * ((0.7790572732640 + 1.00273781191135448 * n) % 1);\n    // const ERA = 2 * Math.PI * ((0.7790572732640 + 1.002737811911355 * n) % 1);\n\n    /** local mean sidereal time */\n    const LMST = GAST + longRad;\n    /** hour angle */\n    const h = LMST - rightAsc;\n\n    // convert to horizontal coords\n    // https://en.wikipedia.org/wiki/Astronomical_coordinate_systems\n    const azimuth = -Math.atan2(Math.cos(declination) * Math.sin(h), -Math.sin(latRad) * Math.cos(declination) * Math.cos(h) + Math.cos(latRad) * Math.sin(declination));\n    const altitude = Math.asin(Math.sin(latRad) * Math.sin(declination) + Math.cos(latRad) * Math.cos(declination) * Math.cos(h));\n\n    return { azimuth, altitude }\n\n}\n\n\n/**\n * Compute coordinates of the sun at distance `multiplyer` from the origin\n * @param azimuth \n * @param altitude \n * @param multiplyer \n * @returns \n */\nexport function horizontalToActualCoords(azimuth: number, altitude: number, multiplyer=15) {\n    return {\n        x: multiplyer * Math.sin(azimuth) * Math.cos(altitude),\n        y: multiplyer * Math.sin(altitude),\n        z: multiplyer * -Math.cos(azimuth) * Math.cos(altitude)\n    }\n}\n\n/** Direction vector to the sun at an equinox (when the plane of the sun orbit is at 90° to the gnomon style)\n * \n * Ignoring eliptical orbit/apparent time effects\n * @param timeAngle Midnight to midnight, 0 to 2π\n * @param latitude Latitude, in radians\n*/\nexport function sunPosAtEquinox(timeAngle:number, latitude:number) {\n    return new Vector3(Math.sin(timeAngle), -Math.cos(timeAngle) * Math.cos(latitude), -Math.cos(timeAngle) * Math.sin(latitude));\n}\n\n\n/**\n * Compute vector of the shadow path on the plate at a specific time\n * \n * Be careful when the style is parallel to the plane at the moment the sun sets\n * \n * @param timeAngle Midnight to midnight, 0 to 2π\n * @param latitude Latitude, in radians\n * @param plateNorm Normal vector to the plane of the plate\n * @returns\n */\nexport function calculateShadowDirection(timeAngle: number, latitude: number, plateNorm:Vector3) {\n\n\n    /** Position of the sun at an equinox (when the plane of the sun orbit is at 90° to the gnomon style)\n     * \n     * Ignoring eliptical orbit/apparent time effects\n    */\n    const sunPos = sunPosAtEquinox(timeAngle, latitude);\n\n    /** unit vector of the gnomon style */\n    const style = new Vector3(0, Math.sin(latitude), -Math.cos(latitude));\n\n\n    // the direction of the shadow cast at this time can be found by the intersection of the planes:\n    // 1, containing the sunPos and the style\n    // 2, the plate\n    // to do this, find the cross product of the normal vectors to both planes\n\n    const norm1 = sunPos.clone().cross(style);\n    const shadowDir = norm1.clone().cross(plateNorm);\n\n    return shadowDir;\n\n}\n\n/**\n * Convert time to string.\n * @param time Minutes from midnight.\n * @returns \n */\nexport function timeToString(time: number) {\n    // const timeObj = new Date();\n    // timeObj.setHours(Math.floor(time / 60));\n    // timeObj.setMinutes(time % 60)\n    // return timeObj.toLocaleTimeString(undefined, { hour: \"numeric\", minute: \"numeric\" })\n\n    const hours = Math.floor((((time / 60)%24)+24)%24).toString().padStart(2, \"0\");\n    const minutes = Math.floor(((time % 60)+60) % 60).toString().padStart(2, \"0\")\n\n    return `${hours}:${minutes}`\n}\n\n/**\n * Parses string times in format `xx:xx`\n * @param str \n * @returns The time, or NaN if could not be parsed.\n */\nexport function stringToTime(str: string) {\n    const result = str.match(/^\\s*([0-9]+)(?::([0-9]*))?\\s*$/);\n    if (!result) return NaN;\n\n    const hours = Number.parseInt(result[1]);\n    if (hours < 0 || hours > 23) return NaN;\n\n    let minutes = 0;\n    if (result[2] && result[2] != \"\") {\n        minutes = Number.parseInt(result[2]);\n        if (minutes < 0 || minutes > 59) return NaN;\n    }\n\n    return hours*60 + minutes;\n\n}\n\n/**\n * Convert day to string\n * @param day Days since 1st January in a non-leap year (0 to 364)\n * @returns \n */\nexport function dateToString(day: number) {\n    // add date to an arbitrary non-leap year\n    const dateObj = new Date(Date.parse(\"2001\") + day * 24 * 60 * 60 * 1000);\n    return dateObj.toLocaleDateString(\"en\", { month: \"long\", day: 'numeric' })\n}\n\n/**\n * Convert time zone to string\n * @param timeZone Minutes difference from UTC\n * @returns \n */\nexport function timeZoneToString(timeZone:number) {\n\n    const symbol = timeZone > 0 ? \"+\"\n        : timeZone < 0 ? \"-\"\n            : \"±\";\n    const hours = Math.abs(Math.trunc(timeZone / 60));\n    const mins = Math.abs(timeZone % 60);\n    let result = symbol + hours.toString();\n    if (mins != 0) result += \":\" + mins.toString();\n    return result;\n\n}\n\n/**\n * Intersect an infinite line with a plane\n * @param plane The plane \n * @param linePoint A point on the line \n * @param lineDirection A vector in the direction of the line\n * @returns The point of intersection, if it exists\n */\nexport function infiniteLineIntersectWithPlaneWithDir(plane: Plane, linePoint: Vector3, lineDirection: Vector3) {\n\n    // rays are only infinite in 1 direction. Need 2 rays, try both\n    const ray = new Ray(linePoint, lineDirection);\n    let intersection = ray.intersectPlane(plane, new Vector3())\n    if (intersection) return {dir: 1, point: intersection}\n    \n    const ray2 = new Ray(linePoint, lineDirection.clone().multiplyScalar(-1));\n    intersection = ray2.intersectPlane(plane, new Vector3())\n    if (intersection) return {dir: -1, point:intersection};\n\n    return null;\n}\n\n/**\n * Intersect an infinite line with a plane\n * @param plane The plane \n * @param linePoint A point on the line \n * @param lineDirection A vector in the direction of the line\n * @returns The point of intersection, if it exists, and the direction from the line point traveled.\n */\nexport function infiniteLineIntersectWithPlane(plane: Plane, linePoint: Vector3, lineDirection: Vector3) {\n\n    const ptWithDir = infiniteLineIntersectWithPlaneWithDir(plane, linePoint, lineDirection);\n    if (ptWithDir) return ptWithDir.point;\n    return null;\n}\n\n/**\n * intersections with the sphere and r = linePoint + λ * lineDirection\n * find values of λ, if they exist\n * @param sphereOrigin \n * @param sphereRadius \n * @param linePoint \n * @param lineDirection \n */\nexport function infiniteLineIntersectWithSphereParameters(sphereOrigin: Vector3, sphereRadius: number, linePoint: Vector3, lineDirection: Vector3) {\n\n    // intersections with the sphere and r = linePoint + λ * lineDirection\n    // find values of λ\n    const c = sphereOrigin.distanceToSquared(linePoint) - Math.pow(sphereRadius, 2);\n    const b = sphereOrigin.clone().sub(linePoint).multiply(lineDirection).dot(new Vector3(1, 1, 1)) * -2;\n    const a = Math.pow(lineDirection.length(), 2);\n\n    const discriminant = Math.pow(b, 2) - 4 * a * c;\n    if (discriminant < 0) return [];\n\n    return [\n        (-b - Math.sqrt(discriminant)) / (2 * a),\n        (-b + Math.sqrt(discriminant)) / (2 * a)\n    ]\n \n}\n\n\nexport function infiniteLineIntersectWithSphere(sphereOrigin: Vector3, sphereRadius: number, linePoint: Vector3, lineDirection: Vector3) {\n\n    const roots = infiniteLineIntersectWithSphereParameters(sphereOrigin, sphereRadius, linePoint, lineDirection) ;\n    if (roots.length == 0) return null;\n\n    else return [\n        lineDirection.clone().multiplyScalar(roots[0]).add(linePoint),\n        lineDirection.clone().multiplyScalar(roots[1]).add(linePoint),\n    ]\n\n}\n\nexport function longitudeToTimeZone(longitude:number) {\n    return Math.round(longitude / 360 * 24) * 60;\n}\n\n\n/**\n * Taken from https://stackoverflow.com/a/62141424.\n * \n * Intersecrion point of 3 planes.\n * @returns \n */\nexport function vertIntersectPlanes(p1: Plane, p2: Plane, p3: Plane) {\n    const n1 = p1.normal, n2 = p2.normal, n3 = p3.normal;\n    const x1 = p1.coplanarPoint(new Vector3());\n    const x2 = p2.coplanarPoint(new Vector3());\n    const x3 = p3.coplanarPoint(new Vector3());\n    const f1 = new Vector3().crossVectors(n2, n3).multiplyScalar(x1.dot(n1));\n    const f2 = new Vector3().crossVectors(n3, n1).multiplyScalar(x2.dot(n2));\n    const f3 = new Vector3().crossVectors(n1, n2).multiplyScalar(x3.dot(n3));\n    const det = new Matrix3().set(n1.x, n1.y, n1.z, n2.x, n2.y, n2.z, n3.x, n3.y, n3.z).determinant();\n    if (det == 0) return null;\n    const vectorSum = new Vector3().add(f1).add(f2).add(f3);\n    const planeIntersection = new Vector3(vectorSum.x / det, vectorSum.y / det, vectorSum.z / det);\n    return planeIntersection;\n}\n\n\nexport function nonNullSequence<X>(arr: (X | null)[]): X[] {\n\n    // if all nulls just return empty list\n    if (arr.filter(x => x != null).length == 0) {\n        return []\n    }\n\n    const seq = []\n\n    const firstNullLoc = arr.indexOf(null)\n    if (firstNullLoc == -1/* there are no nulls */) {\n        return [...arr] as X[]\n    }\n\n    // collect the non-null elements into an array, dealing with wrap-around too\n    for (let j = firstNullLoc; j < firstNullLoc + arr.length; j++) {\n        const el = arr[j % arr.length]\n        if (!el) {\n            // null. If the seq is non-empty then we are at the end\n            if (seq.length != 0) {\n                break\n            }\n        } else {\n            seq.push(el)\n        }\n    }\n\n    return seq\n}\n\nexport function padWithRepeatedLastElement<X>(arr: X[], length: number) {\n    const numToPad = length - arr.length;\n    const lastValue = arr[arr.length - 1]\n    for (let k = 0; k < numToPad; k++) {\n        arr.push(lastValue)\n    }\n}\n\nexport function hourToRomanNumeral(hour: number) {\n    return [\"XXIV\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"XIII\", \"XIV\", \"XV\", \"XVI\", \"XVII\", \"XVIII\", \"XIX\", \"XX\", \"XXI\", \"XXII\", \"XXIII\"][hour] ?? \"\"\n}","import { defineComponent as _defineComponent } from 'vue'\nimport { toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, unref as _unref, withCtx as _withCtx, Suspense as _Suspense, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nimport { Text3D } from '@tresjs/cientos';\nimport { PropType, computed } from 'vue'\nimport { Vector3, Vector3Tuple } from \"three\";\n\nexport default /*@__PURE__*/_defineComponent({\n  __name: 'SundialLetter',\n  props: {\n    text: {\n        required: true,\n        type: String as PropType<string>\n    },\n    position: {\n        required: true,\n        type: Object as PropType<Vector3 | Vector3Tuple>,\n    },\n    castShadow: {\n        required: false,\n        default: false,\n        type: Boolean as PropType<boolean>\n    },\n    receiveShadow: {\n        required: false,\n        default: false,\n        type: Boolean as PropType<boolean>\n    },\n    size: {\n        required: false,\n        default: 0.2,\n        type: Number as PropType<number>\n    }\n},\n  setup(__props) {\n\n\nconst props = __props\n\nconst visible = computed(() => props.text != '')\nconst textHeight = computed(() => 0.03 * props.size/0.2)\nconst rotation = [-Math.PI/2, 0, 0] as [number, number, number]\n\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_TresMeshPhongMaterial = _resolveComponent(\"TresMeshPhongMaterial\")!\n  const _component_TresObject3D = _resolveComponent(\"TresObject3D\")!\n\n  return (_openBlock(), _createBlock(_component_TresObject3D, {\n    position: __props.position,\n    rotation: rotation,\n    visible: visible.value\n  }, {\n    default: _withCtx(() => [\n      (_openBlock(), _createBlock(_Suspense, null, {\n        default: _withCtx(() => [\n          _createVNode(_unref(Text3D), {\n            font: \"./fonts/PTSerif_Regular_Only_Numerals.json\",\n            size: __props.size,\n            \"bevel-enabled\": false,\n            height: textHeight.value,\n            \"cast-shadow\": __props.castShadow,\n            \"receive-shadow\": __props.receiveShadow,\n            \"need-updates\": \"\",\n            center: \"\"\n          }, {\n            default: _withCtx(() => [\n              _createTextVNode(_toDisplayString(__props.text) + \" \", 1),\n              _createVNode(_component_TresMeshPhongMaterial, { color: \"#737373\" })\n            ]),\n            _: 1\n          }, 8, [\"size\", \"height\", \"cast-shadow\", \"receive-shadow\"])\n        ]),\n        _: 1\n      }))\n    ]),\n    _: 1\n  }, 8, [\"position\", \"visible\"]))\n}\n}\n\n})","<!-- Letter displayed on the sundial plate. -->\n\n<script setup lang=\"ts\">\n\nimport { Text3D } from '@tresjs/cientos';\nimport { PropType, computed, defineProps } from 'vue'\nimport { Vector3, Vector3Tuple } from \"three\";\nconst props = defineProps({\n    text: {\n        required: true,\n        type: String as PropType<string>\n    },\n    position: {\n        required: true,\n        type: Object as PropType<Vector3 | Vector3Tuple>,\n    },\n    castShadow: {\n        required: false,\n        default: false,\n        type: Boolean as PropType<boolean>\n    },\n    receiveShadow: {\n        required: false,\n        default: false,\n        type: Boolean as PropType<boolean>\n    },\n    size: {\n        required: false,\n        default: 0.2,\n        type: Number as PropType<number>\n    }\n})\n\nconst visible = computed(() => props.text != '')\nconst textHeight = computed(() => 0.03 * props.size/0.2)\nconst rotation = [-Math.PI/2, 0, 0] as [number, number, number]\n\n</script>\n\n<template>\n    <TresObject3D\n        :position=\"position\"\n        :rotation=\"rotation\"\n        :visible=\"visible\"\n    >\n        <Suspense>\n            <Text3D\n                font=\"./fonts/PTSerif_Regular_Only_Numerals.json\"\n                :size=\"size\"\n                :bevel-enabled=\"false\"\n                :height=\"textHeight\"\n                :cast-shadow=\"castShadow\"\n                :receive-shadow=\"receiveShadow\"\n                need-updates\n                center\n            >\n                {{ text }}\n                <TresMeshPhongMaterial\n                    color=\"#737373\"\n                />\n            </Text3D>\n        </Suspense>\n    </TresObject3D>\n</template>\n","import script from \"./SundialLetter.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./SundialLetter.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode } from \"vue\"\n\nimport SundialLetter from './SundialLetter.vue';\nimport { PropType, computed, ref, watch } from 'vue'\nimport { Euler, Matrix4, Plane, Vector3 } from 'three';\nimport { calculateShadowDirection, infiniteLineIntersectWithPlaneWithDir, infiniteLineIntersectWithSphereParameters, sunPosAtEquinox, vertIntersectPlanes } from '@/calculations';\nimport { Line2 } from '@tresjs/cientos'\n\n\n    \nexport default /*@__PURE__*/_defineComponent({\n  __name: 'DialAndGnomonSundial',\n  props: {\n        show: {\n            required: true,\n            type: Boolean as PropType<boolean>\n        },\n        latitude: {\n            required: true,\n            type: Number as PropType<number>\n        },\n        longitude: {\n            required: true,\n            type: Number as PropType<number>\n        },\n        radius: {\n            required: true,\n            type: Number as PropType<number>\n        },\n        gnomonPosition: {\n            required: true,\n            type: Object as PropType<Vector3>\n        },\n        origin: {\n            required: true,\n            type: Object as PropType<Vector3>\n        },\n        rotation: {\n            required: true,\n            type: Object as PropType<Euler>\n        },\n        hourLineStyle: {\n            required: true,\n            type: String as PropType<\"solar\" | \"standard\">\n        },\n        timeZone: {\n            required: true,\n            type: Number as PropType<number>\n        },\n        numeralDistanceFromSundialOrigin: {\n            required: true,\n            type: Number as PropType<number>\n        }\n\n    },\n  setup(__props) {\n\n\n\n\nconst props = __props;\n\n    // copy props only when visible, then do calculations on the copied props.\n    const freezeProps = ref({...props})\n    watch(props, (newValue) => {\n        if (newValue.show) {\n            freezeProps.value = {...newValue}\n        }\n    }, {immediate: true})\n\n    const relativeGnomonRotation = computed(() => (90-freezeProps.value.latitude)*Math.PI/180);\n\n    // rotation of the gnomon relative to the sundial plate\n    const gnomonCorrectedRotation = computed(() => {\n        // apply the gnomon rotation and remove the object3d rotation\n\n        const mat = new Matrix4().makeRotationFromEuler(freezeProps.value.rotation).invert()\n            .multiply(new Matrix4().makeRotationFromEuler(new Euler(-relativeGnomonRotation.value, 0, 0)))\n\n        return new Euler().setFromRotationMatrix(mat);\n\n    })\n\n    let sundialNormal = computed(() => new Vector3(0, 1, 0).applyEuler(freezeProps.value.rotation));\n\n    let gnomonAbsolutePosition = computed(() => {\n        return new Vector3(...freezeProps.value.gnomonPosition)\n            .applyEuler(freezeProps.value.rotation)\n            .add(new Vector3(...freezeProps.value.origin))\n    })\n    /** if there is an interection return it, and whether the intersection is in the positive direction of the gnomon vector.*/\n    let stylePlateIntersection = computed(() => {\n        // intersect the plane of the plate with the line of the sundial gnomon.\n        const plane = new Plane(sundialNormal.value, 0).translate(new Vector3(...freezeProps.value.origin));\n        const rayDir = new Vector3(0, -(Math.sin(freezeProps.value.latitude * Math.PI / 180)), (Math.cos(freezeProps.value.latitude * Math.PI / 180)));\n        return infiniteLineIntersectWithPlaneWithDir(plane, gnomonAbsolutePosition.value, rayDir);\n    })\n    let stylePlateIntersectionPoint = computed(() => stylePlateIntersection.value?.point ?? null);\n    /** If the intersection with the plate lies on the line between the center of the gnomon and celestial north, then this value is -1. If south, then 1.*/\n    let stylePlateIntersectionPointOrder = computed(() => stylePlateIntersection.value?.dir ?? null)\n\n   \n    const hourLineHours = [...Array(24).keys()];\n\n    // The hours expressed in the range midnight to midnight, 0 to 2π\n    const hourLineTimeAngles = computed(() => hourLineHours.map(i => {\n        let offsetHour;\n        if (freezeProps.value.hourLineStyle == 'standard') {\n            // need to adjust for time zones\n            offsetHour = i - freezeProps.value.timeZone / 60 + freezeProps.value.longitude * 24 / 360\n        }\n        else {\n            offsetHour = i;\n        }\n        return ((((offsetHour * 60) % 1440) + 1440) % 1440) * Math.PI * 2 / 1440\n    }))\n\n    // direction vector of each hour line on the sundial\n    const hourLineDirections = computed(() => hourLineTimeAngles.value.map(timeAngle => {\n        return calculateShadowDirection(\n            timeAngle,\n            freezeProps.value.latitude * Math.PI / 180,\n            new Vector3(...sundialNormal.value)\n        ).multiplyScalar((stylePlateIntersectionPointOrder.value ?? 1))\n        // the scalar multiple is to fix a bug with the numerals being offset by 12 hours in some cases.\n    }));\n\n    /** If the style plate intersection point is really far away from the sundial origin, or doesn't exist, then we need to calculate the hour lines differently. */\n    const hourLinesCalculationMethod = computed(() => {\n        if (stylePlateIntersectionPoint.value && stylePlateIntersectionPoint.value.distanceTo(freezeProps.value.origin) < 1000) {\n            return \"stylePlateIntersection\"\n        } else {\n            return \"otherIntersection\"\n        }\n    })\n\n    // the point used, in addition to the direction vector, to fully define the hour line.\n    const hourLinePoints = computed(() => {\n        switch (hourLinesCalculationMethod.value) {\n            case 'stylePlateIntersection':\n                return hourLineHours.map(() => stylePlateIntersectionPoint.value as Vector3)\n            case 'otherIntersection': {\n\n                /**\n                 * Instead of using the stylePlateIntersectionPoint for every line, use a different point for each line.\n                 * This point is at the intersection of 3 planes:\n                 * 1. The plane containing the mean sun position and style\n                 * 2. The surface of the sundial onto which the gnomon's shadow strikes (top surface)\n                 * 3. A plane that is perpendicular to the direction of the style, and which does not intersect with the 3d sundial object\n                 * */ \n                const latRad = freezeProps.value.latitude * Math.PI / 180;\n                const gnomon1 = gnomonAbsolutePosition.value;\n                const gnomonDir = new Vector3(0, Math.sin(latRad), -Math.cos(latRad))\n                const gnomon2 = gnomonDir.clone().add(gnomon1);\n                // a point 1 unit off the side of the sundial plate\n                const pointOutsidePlate = gnomonDir.clone()\n                    .projectOnPlane(sundialNormal.value)\n                    .normalize()\n                    .multiplyScalar((freezeProps.value.radius + 1) * -(stylePlateIntersectionPointOrder.value ?? 1))\n                    .add(freezeProps.value.origin);\n\n                const p2 = new Plane().setFromNormalAndCoplanarPoint(sundialNormal.value, freezeProps.value.origin);\n                const p3 = new Plane().setFromNormalAndCoplanarPoint(gnomonDir, pointOutsidePlate);\n\n                return hourLineTimeAngles.value.map((timeAngle) => {\n\n                    const sunPos = sunPosAtEquinox(timeAngle, latRad)\n                    const p1 = new Plane().setFromCoplanarPoints(sunPos.clone().add(gnomon1), gnomon1, gnomon2);\n                    const point = vertIntersectPlanes(p1, p2, p3) ?? pointOutsidePlate;\n                    return point;\n                })\n            }\n            default:\n                // this should never happen.\n                return [];\n\n\n\n        }\n        \n    })\n\n\n\n    // lambdas of the formula plateStyleIntersectionPoint + lambda * shadowDir such that it intersects the edge of the sundial plate.\n    let hourLineSundialSphereIntersectionParameters = computed(() => {\n\n        return hourLineHours.map((hour, i) => {\n            const point = hourLinePoints.value[i];\n            const dir = hourLineDirections.value[i];\n            // to get the portion of the line we want, intersect the hour line with a sphere centered on the sundial plate origin.\n            const lambdas = infiniteLineIntersectWithSphereParameters(new Vector3(...freezeProps.value.origin), freezeProps.value.radius, point, dir);\n            if (lambdas.length == 0) return [];\n            // lambda = 0 is the plate/style intersection point. Negative values are on the wrong side.\n            if (lambdas[0] < 0 && lambdas[1] < 0) return [];\n            // only display positive values\n            if (lambdas[0] < 0) lambdas[0] = 0;\n            // we know that lambdas[1] > 0.\n            return lambdas\n        })\n\n    })\n\n    // vector to raise the sundial lines a bit off the plate\n    let plateToHourLineHeight = computed(() => sundialNormal.value.clone().normalize().multiplyScalar(0.007));\n\n    let hourLines = computed(() => hourLineHours.map((hour, i) => {\n        const linePoint = hourLinePoints.value[i];\n        const lineDir = hourLineDirections.value[i];\n        const lambdas = hourLineSundialSphereIntersectionParameters.value[i];\n\n        const labelPoint = (() => {\n            // where the label should be displayed.\n            // Intersect the hour line with a sphere of radius smaller than the sundial radius, centered on the sundial origin\n            const labelSphereIntersectLambdas = infiniteLineIntersectWithSphereParameters(new Vector3(...freezeProps.value.origin), freezeProps.value.numeralDistanceFromSundialOrigin, linePoint, lineDir);\n            if (labelSphereIntersectLambdas.length == 0) return null;\n            if (labelSphereIntersectLambdas[1] < 0) return null;\n            const labelPoint = lineDir.clone().multiplyScalar(labelSphereIntersectLambdas[1]).add(linePoint);\n            // prevent numbers from getting too bunched up\n            if (hourLinesCalculationMethod.value == \"stylePlateIntersection\" && linePoint.distanceTo(labelPoint) < 2.5) return null;\n            // move to relative coordinate of sundial\n            labelPoint.sub(freezeProps.value.origin).applyMatrix4(new Matrix4().makeRotationFromEuler(freezeProps.value.rotation).invert())\n            return labelPoint.toArray();\n        })()\n\n\n        return {\n            hour: hour,\n            label: labelPoint ? hour.toString() : \"\",\n            points: (lambdas.length == 0) \n            ? [new Vector3(0, 0, 0), new Vector3(0, 0, 0)] \n            : [\n                lineDir.clone().multiplyScalar(lambdas[0]).add(linePoint).add(plateToHourLineHeight.value),\n                lineDir.clone().multiplyScalar(lambdas[1]).add(linePoint).add(plateToHourLineHeight.value),\n            ],\n            labelPoint: labelPoint ?? [0,0,0]\n        }\n    }));\n\nconst rotationCopy = computed(() => freezeProps.value.rotation.clone())\nconst plateGeometryArgs = computed<[number, number, number]>(() => [freezeProps.value.radius, freezeProps.value.radius, 0.1])\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_TresObject3D = _resolveComponent(\"TresObject3D\")!\n  const _component_TresCylinderGeometry = _resolveComponent(\"TresCylinderGeometry\")!\n  const _component_TresMeshPhongMaterial = _resolveComponent(\"TresMeshPhongMaterial\")!\n  const _component_TresMesh = _resolveComponent(\"TresMesh\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createVNode(_component_TresObject3D, { visible: __props.show }, {\n      default: _withCtx(() => [\n        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(hourLines), ({points, hour}) => {\n          return (_openBlock(), _createBlock(_unref(Line2), {\n            key: hour,\n            \"line-width\": 1,\n            points: points,\n            color: \"#FFFFFF\"\n          }, null, 8, [\"points\"]))\n        }), 128))\n      ]),\n      _: 1\n    }, 8, [\"visible\"]),\n    _createVNode(_component_TresObject3D, {\n      visible: __props.show,\n      position: freezeProps.value.origin,\n      rotation: rotationCopy.value\n    }, {\n      default: _withCtx(() => [\n        _createVNode(_component_TresMesh, {\n          position: [0,-0.05,0],\n          \"cast-shadow\": \"\",\n          \"receive-shadow\": \"\"\n        }, {\n          default: _withCtx(() => [\n            _createVNode(_component_TresCylinderGeometry, { args: plateGeometryArgs.value }, null, 8, [\"args\"]),\n            _createVNode(_component_TresMeshPhongMaterial, { color: \"#f9ecec\" })\n          ]),\n          _: 1\n        }),\n        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(hourLines), (hourLine) => {\n          return (_openBlock(), _createBlock(SundialLetter, {\n            key: hourLine.hour,\n            text: hourLine.label,\n            position: hourLine.labelPoint,\n            \"receive-shadow\": \"\"\n          }, null, 8, [\"text\", \"position\"]))\n        }), 128)),\n        _createVNode(_component_TresMesh, {\n          position: freezeProps.value.gnomonPosition,\n          rotation: gnomonCorrectedRotation.value,\n          \"cast-shadow\": \"\",\n          \"receive-shadow\": \"\"\n        }, {\n          default: _withCtx(() => [\n            _createVNode(_component_TresCylinderGeometry, { args: [0.05, 0.05, 2] }),\n            _createVNode(_component_TresMeshPhongMaterial, { color: \"#b7b7b7\" })\n          ]),\n          _: 1\n        }, 8, [\"position\", \"rotation\"])\n      ]),\n      _: 1\n    }, 8, [\"visible\", \"position\", \"rotation\"])\n  ], 64))\n}\n}\n\n})","<!-- 3D object of the sundial -->\n<script setup lang=\"ts\">\n\n\n\nimport SundialLetter from './SundialLetter.vue';\nimport { PropType, computed, defineProps, ref, watch } from 'vue'\nimport { Euler, Matrix4, Plane, Vector3 } from 'three';\nimport { calculateShadowDirection, infiniteLineIntersectWithPlaneWithDir, infiniteLineIntersectWithSphereParameters, sunPosAtEquinox, vertIntersectPlanes } from '@/calculations';\nimport { Line2 } from '@tresjs/cientos'\n\n\n    const props = defineProps(\n    {\n        show: {\n            required: true,\n            type: Boolean as PropType<boolean>\n        },\n        latitude: {\n            required: true,\n            type: Number as PropType<number>\n        },\n        longitude: {\n            required: true,\n            type: Number as PropType<number>\n        },\n        radius: {\n            required: true,\n            type: Number as PropType<number>\n        },\n        gnomonPosition: {\n            required: true,\n            type: Object as PropType<Vector3>\n        },\n        origin: {\n            required: true,\n            type: Object as PropType<Vector3>\n        },\n        rotation: {\n            required: true,\n            type: Object as PropType<Euler>\n        },\n        hourLineStyle: {\n            required: true,\n            type: String as PropType<\"solar\" | \"standard\">\n        },\n        timeZone: {\n            required: true,\n            type: Number as PropType<number>\n        },\n        numeralDistanceFromSundialOrigin: {\n            required: true,\n            type: Number as PropType<number>\n        }\n\n    });\n\n    // copy props only when visible, then do calculations on the copied props.\n    const freezeProps = ref({...props})\n    watch(props, (newValue) => {\n        if (newValue.show) {\n            freezeProps.value = {...newValue}\n        }\n    }, {immediate: true})\n\n    const relativeGnomonRotation = computed(() => (90-freezeProps.value.latitude)*Math.PI/180);\n\n    // rotation of the gnomon relative to the sundial plate\n    const gnomonCorrectedRotation = computed(() => {\n        // apply the gnomon rotation and remove the object3d rotation\n\n        const mat = new Matrix4().makeRotationFromEuler(freezeProps.value.rotation).invert()\n            .multiply(new Matrix4().makeRotationFromEuler(new Euler(-relativeGnomonRotation.value, 0, 0)))\n\n        return new Euler().setFromRotationMatrix(mat);\n\n    })\n\n    let sundialNormal = computed(() => new Vector3(0, 1, 0).applyEuler(freezeProps.value.rotation));\n\n    let gnomonAbsolutePosition = computed(() => {\n        return new Vector3(...freezeProps.value.gnomonPosition)\n            .applyEuler(freezeProps.value.rotation)\n            .add(new Vector3(...freezeProps.value.origin))\n    })\n    /** if there is an interection return it, and whether the intersection is in the positive direction of the gnomon vector.*/\n    let stylePlateIntersection = computed(() => {\n        // intersect the plane of the plate with the line of the sundial gnomon.\n        const plane = new Plane(sundialNormal.value, 0).translate(new Vector3(...freezeProps.value.origin));\n        const rayDir = new Vector3(0, -(Math.sin(freezeProps.value.latitude * Math.PI / 180)), (Math.cos(freezeProps.value.latitude * Math.PI / 180)));\n        return infiniteLineIntersectWithPlaneWithDir(plane, gnomonAbsolutePosition.value, rayDir);\n    })\n    let stylePlateIntersectionPoint = computed(() => stylePlateIntersection.value?.point ?? null);\n    /** If the intersection with the plate lies on the line between the center of the gnomon and celestial north, then this value is -1. If south, then 1.*/\n    let stylePlateIntersectionPointOrder = computed(() => stylePlateIntersection.value?.dir ?? null)\n\n   \n    const hourLineHours = [...Array(24).keys()];\n\n    // The hours expressed in the range midnight to midnight, 0 to 2π\n    const hourLineTimeAngles = computed(() => hourLineHours.map(i => {\n        let offsetHour;\n        if (freezeProps.value.hourLineStyle == 'standard') {\n            // need to adjust for time zones\n            offsetHour = i - freezeProps.value.timeZone / 60 + freezeProps.value.longitude * 24 / 360\n        }\n        else {\n            offsetHour = i;\n        }\n        return ((((offsetHour * 60) % 1440) + 1440) % 1440) * Math.PI * 2 / 1440\n    }))\n\n    // direction vector of each hour line on the sundial\n    const hourLineDirections = computed(() => hourLineTimeAngles.value.map(timeAngle => {\n        return calculateShadowDirection(\n            timeAngle,\n            freezeProps.value.latitude * Math.PI / 180,\n            new Vector3(...sundialNormal.value)\n        ).multiplyScalar((stylePlateIntersectionPointOrder.value ?? 1))\n        // the scalar multiple is to fix a bug with the numerals being offset by 12 hours in some cases.\n    }));\n\n    /** If the style plate intersection point is really far away from the sundial origin, or doesn't exist, then we need to calculate the hour lines differently. */\n    const hourLinesCalculationMethod = computed(() => {\n        if (stylePlateIntersectionPoint.value && stylePlateIntersectionPoint.value.distanceTo(freezeProps.value.origin) < 1000) {\n            return \"stylePlateIntersection\"\n        } else {\n            return \"otherIntersection\"\n        }\n    })\n\n    // the point used, in addition to the direction vector, to fully define the hour line.\n    const hourLinePoints = computed(() => {\n        switch (hourLinesCalculationMethod.value) {\n            case 'stylePlateIntersection':\n                return hourLineHours.map(() => stylePlateIntersectionPoint.value as Vector3)\n            case 'otherIntersection': {\n\n                /**\n                 * Instead of using the stylePlateIntersectionPoint for every line, use a different point for each line.\n                 * This point is at the intersection of 3 planes:\n                 * 1. The plane containing the mean sun position and style\n                 * 2. The surface of the sundial onto which the gnomon's shadow strikes (top surface)\n                 * 3. A plane that is perpendicular to the direction of the style, and which does not intersect with the 3d sundial object\n                 * */ \n                const latRad = freezeProps.value.latitude * Math.PI / 180;\n                const gnomon1 = gnomonAbsolutePosition.value;\n                const gnomonDir = new Vector3(0, Math.sin(latRad), -Math.cos(latRad))\n                const gnomon2 = gnomonDir.clone().add(gnomon1);\n                // a point 1 unit off the side of the sundial plate\n                const pointOutsidePlate = gnomonDir.clone()\n                    .projectOnPlane(sundialNormal.value)\n                    .normalize()\n                    .multiplyScalar((freezeProps.value.radius + 1) * -(stylePlateIntersectionPointOrder.value ?? 1))\n                    .add(freezeProps.value.origin);\n\n                const p2 = new Plane().setFromNormalAndCoplanarPoint(sundialNormal.value, freezeProps.value.origin);\n                const p3 = new Plane().setFromNormalAndCoplanarPoint(gnomonDir, pointOutsidePlate);\n\n                return hourLineTimeAngles.value.map((timeAngle) => {\n\n                    const sunPos = sunPosAtEquinox(timeAngle, latRad)\n                    const p1 = new Plane().setFromCoplanarPoints(sunPos.clone().add(gnomon1), gnomon1, gnomon2);\n                    const point = vertIntersectPlanes(p1, p2, p3) ?? pointOutsidePlate;\n                    return point;\n                })\n            }\n            default:\n                // this should never happen.\n                return [];\n\n\n\n        }\n        \n    })\n\n\n\n    // lambdas of the formula plateStyleIntersectionPoint + lambda * shadowDir such that it intersects the edge of the sundial plate.\n    let hourLineSundialSphereIntersectionParameters = computed(() => {\n\n        return hourLineHours.map((hour, i) => {\n            const point = hourLinePoints.value[i];\n            const dir = hourLineDirections.value[i];\n            // to get the portion of the line we want, intersect the hour line with a sphere centered on the sundial plate origin.\n            const lambdas = infiniteLineIntersectWithSphereParameters(new Vector3(...freezeProps.value.origin), freezeProps.value.radius, point, dir);\n            if (lambdas.length == 0) return [];\n            // lambda = 0 is the plate/style intersection point. Negative values are on the wrong side.\n            if (lambdas[0] < 0 && lambdas[1] < 0) return [];\n            // only display positive values\n            if (lambdas[0] < 0) lambdas[0] = 0;\n            // we know that lambdas[1] > 0.\n            return lambdas\n        })\n\n    })\n\n    // vector to raise the sundial lines a bit off the plate\n    let plateToHourLineHeight = computed(() => sundialNormal.value.clone().normalize().multiplyScalar(0.007));\n\n    let hourLines = computed(() => hourLineHours.map((hour, i) => {\n        const linePoint = hourLinePoints.value[i];\n        const lineDir = hourLineDirections.value[i];\n        const lambdas = hourLineSundialSphereIntersectionParameters.value[i];\n\n        const labelPoint = (() => {\n            // where the label should be displayed.\n            // Intersect the hour line with a sphere of radius smaller than the sundial radius, centered on the sundial origin\n            const labelSphereIntersectLambdas = infiniteLineIntersectWithSphereParameters(new Vector3(...freezeProps.value.origin), freezeProps.value.numeralDistanceFromSundialOrigin, linePoint, lineDir);\n            if (labelSphereIntersectLambdas.length == 0) return null;\n            if (labelSphereIntersectLambdas[1] < 0) return null;\n            const labelPoint = lineDir.clone().multiplyScalar(labelSphereIntersectLambdas[1]).add(linePoint);\n            // prevent numbers from getting too bunched up\n            if (hourLinesCalculationMethod.value == \"stylePlateIntersection\" && linePoint.distanceTo(labelPoint) < 2.5) return null;\n            // move to relative coordinate of sundial\n            labelPoint.sub(freezeProps.value.origin).applyMatrix4(new Matrix4().makeRotationFromEuler(freezeProps.value.rotation).invert())\n            return labelPoint.toArray();\n        })()\n\n\n        return {\n            hour: hour,\n            label: labelPoint ? hour.toString() : \"\",\n            points: (lambdas.length == 0) \n            ? [new Vector3(0, 0, 0), new Vector3(0, 0, 0)] \n            : [\n                lineDir.clone().multiplyScalar(lambdas[0]).add(linePoint).add(plateToHourLineHeight.value),\n                lineDir.clone().multiplyScalar(lambdas[1]).add(linePoint).add(plateToHourLineHeight.value),\n            ],\n            labelPoint: labelPoint ?? [0,0,0]\n        }\n    }));\n\nconst rotationCopy = computed(() => freezeProps.value.rotation.clone())\nconst plateGeometryArgs = computed<[number, number, number]>(() => [freezeProps.value.radius, freezeProps.value.radius, 0.1])\n</script>\n\n<template>\n\n    <!-- hour lines (calculated in world coordinates)-->\n    <TresObject3D :visible=\"show\">\n        <template v-for=\"{points, hour} in hourLines\" v-bind:key=\"hour\">\n            <Line2 :line-width=\"1\" :points=\"points\" color=\"#FFFFFF\" />\n        </template>\n    </TresObject3D>\n\n    <TresObject3D :visible=\"show\" :position=\"freezeProps.origin\" :rotation=\"rotationCopy\">\n\n        <!-- plate -->\n        <TresMesh :position=\"[0,-0.05,0]\" cast-shadow receive-shadow>\n            <TresCylinderGeometry :args=\"plateGeometryArgs\" />\n            <TresMeshPhongMaterial color=\"#f9ecec\" />\n        </TresMesh>\n\n        <!-- numerals -->\n        <template v-for=\"hourLine in hourLines\" :key=\"hourLine.hour\">\n            <SundialLetter :text=\"hourLine.label\" :position=\"hourLine.labelPoint\" receive-shadow />\n        </template>\n\n        <!-- Style/gnomon -->\n        <TresMesh :position=\"freezeProps.gnomonPosition\" :rotation=\"gnomonCorrectedRotation\" cast-shadow receive-shadow>\n            <TresCylinderGeometry :args=\"[0.05, 0.05, 2]\" />\n            <TresMeshPhongMaterial color=\"#b7b7b7\" />\n        </TresMesh>\n    </TresObject3D>\n\n</template>\n\n","import script from \"./DialAndGnomonSundial.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./DialAndGnomonSundial.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\"\n\nimport { useTresContext, useLoop} from '@tresjs/core';\nimport { PerspectiveCamera, Vector3} from 'three';\nimport { PropType, watch, ref} from 'vue';\nimport { extend } from '@tresjs/core'\nimport { OrbitControls } from 'three-stdlib';\n\n\nexport default /*@__PURE__*/_defineComponent({\n  __name: 'CameraHelper',\n  props: {\n    xOffset: {\n        required: true,\n        type: Number as PropType<number>\n    },\n    zoomPerSecond : {\n        required: false,\n        default:1,\n        type: Number as PropType<number>\n    },\n    timeAdvanceSpeed: {\n        required: true,\n        type: Number as PropType<number>\n    }\n},\n  emits: [\"cameraPosChange\", \"onAdvanceTime\"],\n  setup(__props, { emit: __emit }) {\n\nextend({ OrbitControls })\n\n\nconst {camera,  sizes, renderer, invalidate} = useTresContext();\n\nconst props = __props;\n\nconst emit = __emit\n\n// Make the focus point of the camera a bit off center on the canvas\nwatch(() => [sizes.width.value, sizes.height.value, props.xOffset], () => {\n    const zoomMultiple = (sizes.width.value + Math.abs(props.xOffset) * 2) / sizes.width.value;\n    if ((camera.value as PerspectiveCamera | undefined)?.isPerspectiveCamera) {\n        (camera.value as PerspectiveCamera).setViewOffset(\n            sizes.width.value * zoomMultiple,\n            sizes.height.value * zoomMultiple,\n            props.xOffset > 0 ? props.xOffset * 2 : 0,\n            sizes.height.value * (zoomMultiple - 1) / 2,\n            sizes.width.value,\n            sizes.height.value);\n    }\n}, {immediate: true})\n\n\n\nconst { onBeforeRender, onAfterRender, pause, resume } = useLoop()\nwatch(() => [props.zoomPerSecond, props.timeAdvanceSpeed], () => {\n    if (props.zoomPerSecond != 1 || props.timeAdvanceSpeed != 0) {\n        resume()\n    } else {\n        pause()\n    }\n}, {immediate: true})\n// adjust zoom\nonBeforeRender(({ delta }) => {\n    if (camera.value && props.zoomPerSecond != 1) {\n        const zoomThisFrame = Math.pow(props.zoomPerSecond, delta)\n        camera.value.position.x *= zoomThisFrame\n        camera.value.position.y *= zoomThisFrame\n        camera.value.position.z *= zoomThisFrame\n    }\n})\n// adjust sundial time\nlet leftoverMinFractionFromLastFrame = ref<number>(0)\nonAfterRender(({ delta }) => {\n    const fractionalMinsToAdd = delta * props.timeAdvanceSpeed / 70 * 1000 + leftoverMinFractionFromLastFrame.value\n    const wholeMins = Math.floor(fractionalMinsToAdd)\n    leftoverMinFractionFromLastFrame.value = fractionalMinsToAdd % 1\n    if (wholeMins > 0) {\n        emit('onAdvanceTime', wholeMins)\n    }\n})\n\n\nwatch(() => [\n    camera.value?.position.x,\n    camera.value?.position.y,\n    camera.value?.position.z,\n], () => {\n    if (camera.value) {\n        invalidate()\n        emit(\"cameraPosChange\", camera.value.position.clone())\n    }\n}, {immediate: true})\n\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_TresOrbitControls = _resolveComponent(\"TresOrbitControls\")!\n\n  return (_unref(renderer))\n    ? (_openBlock(), _createBlock(_component_TresOrbitControls, {\n        key: 0,\n        args: [_unref(camera), _unref(renderer)?.domElement],\n        \"enable-damping\": false,\n        \"rotate-speed\": 0.5,\n        \"enable-pan\": false,\n        target: [0,0,0]\n      }, null, 8, [\"args\"]))\n    : _createCommentVNode(\"\", true)\n}\n}\n\n})","<!-- Make the focus point of the camera a bit off center on the canvas -->\n\n<script lang=\"ts\" setup>\nimport { useTresContext, useLoop} from '@tresjs/core';\nimport { PerspectiveCamera, Vector3} from 'three';\nimport { PropType, watch, defineProps, defineEmits, ref} from 'vue';\nimport { extend } from '@tresjs/core'\nimport { OrbitControls } from 'three-stdlib';\n\nextend({ OrbitControls })\n\n\nconst {camera,  sizes, renderer, invalidate} = useTresContext();\n\nconst props = defineProps({\n    xOffset: {\n        required: true,\n        type: Number as PropType<number>\n    },\n    zoomPerSecond : {\n        required: false,\n        default:1,\n        type: Number as PropType<number>\n    },\n    timeAdvanceSpeed: {\n        required: true,\n        type: Number as PropType<number>\n    }\n});\n\nconst emit = defineEmits<{\n    cameraPosChange:[pos:Vector3],\n    onAdvanceTime: [mins: number]\n}>()\n\n// Make the focus point of the camera a bit off center on the canvas\nwatch(() => [sizes.width.value, sizes.height.value, props.xOffset], () => {\n    const zoomMultiple = (sizes.width.value + Math.abs(props.xOffset) * 2) / sizes.width.value;\n    if ((camera.value as PerspectiveCamera | undefined)?.isPerspectiveCamera) {\n        (camera.value as PerspectiveCamera).setViewOffset(\n            sizes.width.value * zoomMultiple,\n            sizes.height.value * zoomMultiple,\n            props.xOffset > 0 ? props.xOffset * 2 : 0,\n            sizes.height.value * (zoomMultiple - 1) / 2,\n            sizes.width.value,\n            sizes.height.value);\n    }\n}, {immediate: true})\n\n\n\nconst { onBeforeRender, onAfterRender, pause, resume } = useLoop()\nwatch(() => [props.zoomPerSecond, props.timeAdvanceSpeed], () => {\n    if (props.zoomPerSecond != 1 || props.timeAdvanceSpeed != 0) {\n        resume()\n    } else {\n        pause()\n    }\n}, {immediate: true})\n// adjust zoom\nonBeforeRender(({ delta }) => {\n    if (camera.value && props.zoomPerSecond != 1) {\n        const zoomThisFrame = Math.pow(props.zoomPerSecond, delta)\n        camera.value.position.x *= zoomThisFrame\n        camera.value.position.y *= zoomThisFrame\n        camera.value.position.z *= zoomThisFrame\n    }\n})\n// adjust sundial time\nlet leftoverMinFractionFromLastFrame = ref<number>(0)\nonAfterRender(({ delta }) => {\n    const fractionalMinsToAdd = delta * props.timeAdvanceSpeed / 70 * 1000 + leftoverMinFractionFromLastFrame.value\n    const wholeMins = Math.floor(fractionalMinsToAdd)\n    leftoverMinFractionFromLastFrame.value = fractionalMinsToAdd % 1\n    if (wholeMins > 0) {\n        emit('onAdvanceTime', wholeMins)\n    }\n})\n\n\nwatch(() => [\n    camera.value?.position.x,\n    camera.value?.position.y,\n    camera.value?.position.z,\n], () => {\n    if (camera.value) {\n        invalidate()\n        emit(\"cameraPosChange\", camera.value.position.clone())\n    }\n}, {immediate: true})\n\n</script>\n\n<template>\n    <TresOrbitControls v-if=\"renderer\" :args=\"[camera, renderer?.domElement]\" :enable-damping=\"false\"\n        :rotate-speed=\"0.5\" :enable-pan=\"false\" :target=\"[0,0,0]\" />\n</template>\n\n","import script from \"./CameraHelper.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./CameraHelper.vue?vue&type=script&lang=ts&setup=true\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { defineComponent as _defineComponent } from 'vue'\nimport { useTresContext } from '@tresjs/core';\n    \nexport default /*@__PURE__*/_defineComponent({\n  __name: 'RendererHelper',\n  setup(__props) {\n\n    const { renderer } = useTresContext();\n    renderer.value.setPixelRatio(window.devicePixelRatio);\n    renderer.value.localClippingEnabled = true;\n\nreturn () => {}\n}\n\n})","<!-- Fix problem with blurry image on mobile devices, and enable local clipping -->\n\n<script setup lang=\"ts\" >\n    import { useTresContext } from '@tresjs/core';\n    const { renderer } = useTresContext();\n    renderer.value.setPixelRatio(window.devicePixelRatio);\n    renderer.value.localClippingEnabled = true;\n</script>\n\n","import script from \"./RendererHelper.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./RendererHelper.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n\n<p style=\"margin-top:0\"><strong>Apparent solar time</strong> is the time based on the observed local position of the sun. 12 noon is the exact time at which the sun is highest in the sky.</p>\n\n<p>However, if you measure the length of time between two consecutive solar noons, the measurement could differ from 24 hours by -21 to +30 seconds. (see the <a href=\"https://en.wikipedia.org/wiki/Solar_time\" target=\"_blank\">Wikipedia article on Solar Time</a> for an explanation).</p>\n\n<p>Instead, in <strong>Mean solar time</strong>, every day is exactly<strong>*</strong> 24 hours long. This is more useful, but due to those small deviations in the length of the solar day adding up, the mean solar time can differ from the apparent solar time by up to 16 minutes. The relationship between the apparent and mean solar time can be seen in the <strong>Equation of Time</strong>.</p>\n\n<div style=\"text-align: center\">\n    <img src=\"../assets/Equation_of_time.svg\" alt=\"Equation of time graph\" style=\"max-height: 200px; background-color: white;\"/><br>\n</div>\n\n<i>Attribution: By <a href=\"//commons.wikimedia.org/wiki/File:Equation_of_time.png\" title=\"File:Equation of time.png\" target=\"_blank\">Equation of time.png</a>: <a href=\"//commons.wikimedia.org/wiki/User:Drini\" title=\"User:Drini\" target=\"_blank\">User:Drini</a> derivative work: <a href=\"//commons.wikimedia.org/wiki/User_talk:Zazou\" title=\"User talk:Zazou\" target=\"_blank\">Zazou</a> (<a href=\"//commons.wikimedia.org/wiki/User_talk:Zazou\" title=\"User talk:Zazou\" target=\"_blank\"><span class=\"signature-talk\">talk</span></a>) - <a href=\"//commons.wikimedia.org/wiki/File:Equation_of_time.png\" title=\"File:Equation of time.png\" target=\"_blank\">Equation of time.png</a>, <a href=\"http://creativecommons.org/licenses/by-sa/3.0/\" title=\"Creative Commons Attribution-Share Alike 3.0\" target=\"_blank\">CC BY-SA 3.0</a>, <a href=\"https://commons.wikimedia.org/w/index.php?curid=6961998\" target=\"_blank\">Link</a></i>\n\n<p>In order to standardize time for different longitudes, <strong>Coordinated Universal Time (UTC)</strong> is used, which represents the mean solar time at 0 degrees longitude (or, within 1 second of it). <strong>Local standard time</strong> is UTC adjusted by the time zone.</p>\n\n<p><i><strong>*</strong>Well, almost exactly. The length of the mean solar day actually varies a tiny bit each year compared to International Atomic Time. This sometimes requires a <strong>leap second</strong> be added to or subtracted from UTC.</i></p>\n\n\n</template>\n\n<style scoped>\n    a {\n        color:white\n    }\n</style>","import { render } from \"./ThreeTimesExplanation.vue?vue&type=template&id=35ba8230&scoped=true\"\nconst script = {}\n\nimport \"./ThreeTimesExplanation.vue?vue&type=style&index=0&id=35ba8230&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-35ba8230\"]])\n\nexport default __exports__","import { Step } from \"vue3-tour\"\n\nconst tourSteps: Step[] = [\n    {\n        target: '#app',\n        content: `Click and drag on the sundial to look around, and use the mouse wheel to adjust the zoom.\nZoom out to see the sun's position!`,\n        params: {\n            placement: 'bottom',\n            enableScrolling: false,\n        },\n    },\n    {\n        target: '[data-v-walkthrough=\"status\"]',\n        content: `Use the sliders to change the <strong>Time</strong> and <strong>Date</strong>.\nYou can also click on the digital clock to set the time manually.`,\n        params: {\n            placement: 'auto',\n            enableScrolling: false,\n            highlight: true\n        },\n    },\n    {\n        target: '[data-v-walkthrough=\"map\"]',\n        content: `Sundials work differently depending on the location on Earth.\nSet the location by clicking on the map, or by typing the <strong>Latitude</strong> and <strong>Longitude</strong>.`,\n        params: {\n            placement: 'right',\n            enableScrolling: false,\n            highlight: true,\n        },\n    },\n    {\n        target: '[data-v-walkthrough=\"time-zone\"]',\n        content: `The <strong>Time Zone</strong> is set automatically based on the longitude. Instead, to manually input the time zone, uncheck <strong>Automatically set time zone</strong> and type in the <strong>Time Zone</strong> box.\n`,\n        params: {\n            placement: 'right',\n            enableScrolling: false,\n            highlight: true,\n        },\n    },\n    {\n        target: '[data-v-walkthrough=\"sundial-type\"]',\n        content: `Choose between 2 types of sundial. <strong>Traditional sundial</strong> uses a <i>gnomon</i> to cast a shadow, and <strong>Point shadow trace</strong> uses a <i>nodus</i>, showing where the shadow of a single point falls throughout the day and year.`,\n        params: {\n            placement: 'right',\n            // enableScrolling: false,\n            highlight: true\n        },\n    },\n    {\n        target: '[data-v-walkthrough=\"slant-and-rotation\"]',\n        content: `The <strong>Slant</strong> and <strong>Rotation</strong> of the sundial can be changed. \nE.g. to simulate a wall-mounted sundial, set the <strong>Slant</strong> to 90° and the <strong>Rotation</strong> to the direction the wall is facing.<br>\nAdditionally, the <strong>Gnomon height</strong> (or Nodus height in Point shadow trace mode) adjusts the distance from the center of the shadow-casting object to the plate. The unit is arbitrary, because it's only the scale that matters.`,\n        params: {\n            placement: 'right',\n            // enableScrolling: false,\n            highlight: true\n        },\n    },\n    {\n        target: '[data-v-walkthrough=\"hour-lines\"]',\n        content: `Sundials often measure <strong>Solar time</strong>, where solar noon is the time at which the sun is highest in the sky.\nHowever, you may want the sundial to measure an approximation of standard time, taking the longitude and time zone into account. To do this, select <strong>Adjusted for time zone and longitude</strong>. Note that depending on the time of year the reading can be inaccurate by up to 16 min 33 s due to the varying length of the solar day (see <a href=\"https://en.wikipedia.org/wiki/Equation_of_time\" target=\"_blank\">https://en.wikipedia.org/wiki/Equation_of_time</a>).`,\n        params: {\n            placement: 'right',\n            // enableScrolling: false,\n            highlight: true\n        },\n    },\n]\n\n\n\nexport { tourSteps }","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nimport { normalizeColor, useTresContext } from '@tresjs/core'\nimport { Vector2, Vector3, Plane } from 'three'\nimport { Line2 } from 'three/examples/jsm/lines/Line2'\nimport { LineGeometry } from 'three/examples/jsm/lines/LineGeometry'\nimport { LineMaterial } from 'three/examples/jsm/lines/LineMaterial'\nimport { computed, onUnmounted, shallowRef, watch } from 'vue'\nimport type { TresColor } from '@tresjs/core'\nimport type { Color } from 'three'\n\n\n\ntype Points = (Vector3 | Vector2 | [number, number, number] | [number, number] | number)[]\ntype VertexColors = Array<TresColor>\nexport interface LineProps {\n  points: Points\n  vertexColors?: VertexColors | null\n  color?: TresColor\n  lineWidth?: number\n  worldUnits?: boolean\n  alphaToCoverage?: boolean\n  dashed?: boolean\n  dashSize?: number\n  gapSize?: number\n  dashScale?: number\n  dashOffset?: number,\n  // #####\n  clippingPlanes?: Plane[] | null\n  // #####\n}\n\ntype PropsType = typeof props\n\n\nexport default /*@__PURE__*/_defineComponent({\n  __name: 'Line2FromCientosPackageAndItsTheSameButYouCanAlsoUseClippingPlanesSoItsNot',\n  props: {\n    points: {},\n    vertexColors: { default: null },\n    color: { default: 'white' },\n    lineWidth: { default: 1 },\n    worldUnits: { type: Boolean, default: false },\n    alphaToCoverage: { type: Boolean, default: false },\n    dashed: { type: Boolean, default: false },\n    dashSize: { default: 1 },\n    gapSize: { default: 1 },\n    dashScale: { default: 1 },\n    dashOffset: { default: 0 },\n    clippingPlanes: { default: null }\n  },\n  setup(__props: any, { expose: __expose }) {\n\nconst props = __props\n\nfunction getInterpolatedVertexColors(vertexColors: VertexColors | null, numPoints: number): Color[] {\n  if (!vertexColors || vertexColors.length === 0) {\n    return Array.from({ length: numPoints }).fill(normalizeColor(props.color)) as Color[]\n  }\n  if (vertexColors.length === 1) {\n    return Array.from({ length: numPoints }).fill(normalizeColor(vertexColors[0])) as Color[]\n  }\n  if (vertexColors.length === numPoints) {\n    return vertexColors.map(normalizeColor)\n  }\n\n  const numSegments = numPoints - 1\n  const mappedColors = vertexColors.map(normalizeColor)\n  if (closed) { mappedColors.push(mappedColors[0].clone()) }\n\n  const iColors: Color[] = [mappedColors[0]]\n  const divisions = numSegments / (mappedColors.length - 1)\n  for (let i = 1; i < numSegments; i++) {\n    const alpha = (i % divisions) / divisions\n    const colorIndex = Math.floor(i / divisions)\n    iColors.push(mappedColors[colorIndex].clone().lerp(mappedColors[colorIndex + 1], alpha))\n  }\n  iColors.push(mappedColors[mappedColors.length - 1])\n\n  return iColors\n}\n\nconst lineMaterial = new LineMaterial()\nconst lineGeometry = new LineGeometry()\nconst line = new Line2(lineGeometry, lineMaterial)\nconst { sizes, invalidate } = useTresContext()\nconst hasVertexColors = computed(() => Array.isArray(props.vertexColors))\n\nfunction updateLineMaterial(material: LineMaterial, props: PropsType) {\n  material.color = normalizeColor(props.color)\n  material.linewidth = props.lineWidth\n  material.alphaToCoverage = props.alphaToCoverage\n  material.worldUnits = props.worldUnits\n  material.vertexColors = Array.isArray(props.vertexColors)\n  material.dashed = props.dashed\n  material.dashScale = props.dashScale\n  material.dashSize = props.dashSize\n  material.dashOffset = props.dashOffset\n  material.gapSize = props.gapSize\n  material.needsUpdate = true\n  // #####\n  material.clippingPlanes = props.clippingPlanes\n  // #####\n}\n\nfunction updateLineGeometry(geometry: LineGeometry, points: Points, vertexColors: VertexColors | null) {\n  const pValues = points.map((p) => {\n    if (p instanceof Vector3) {\n      return [p.x, p.y, p.z]\n    }\n    else if (p instanceof Vector2) {\n      return [p.x, p.y, 0]\n    }\n    else if (Array.isArray(p) && p.length === 2) {\n      return [p[0], p[1], 0]\n    }\n    else {\n      return p\n    }\n  }).flat()\n  geometry.setPositions(pValues.flat())\n\n  const colors = getInterpolatedVertexColors(vertexColors, points.length).map(c => c.toArray()).flat()\n  geometry.setColors(colors)\n\n  line.computeLineDistances()\n}\n\nupdateLineMaterial(lineMaterial, props)\nupdateLineGeometry(lineGeometry, props.points, props.vertexColors)\nline.computeLineDistances()\n\nwatch(() => [\n  props.color,\n  props.lineWidth,\n  props.alphaToCoverage,\n  props.worldUnits,\n  hasVertexColors,\n  props.dashed,\n  props.dashScale,\n  props.dashSize,\n  props.dashOffset,\n  // #####\n  props.clippingPlanes\n  // #####\n], () => {\n  updateLineMaterial(lineMaterial, props)\n  invalidate()\n})\nwatch(() => [props.points, props.vertexColors], () => {\n  updateLineGeometry(lineGeometry, props.points, props.vertexColors)\n  invalidate()\n})\nwatch(() => [sizes.height, sizes.width], () => {\n  lineMaterial.resolution = new Vector2(sizes.width.value, sizes.height.value)\n  invalidate()\n})\n\nonUnmounted(() => {\n  lineGeometry.dispose()\n  lineMaterial.dispose()\n})\n\nconst lineRef = shallowRef()\n__expose({ instance: lineRef })\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_primitive = _resolveComponent(\"primitive\")!\n\n  return (_openBlock(), _createBlock(_component_primitive, {\n    ref: lineRef.value,\n    object: _unref(line)\n  }, null, 8, [\"object\"]))\n}\n}\n\n})","\n<!-- \n########################################################################################## \nCopy of cientos line2, but with added support for clipping planes. \n ##########################################################################################\n-->\n\n<script setup lang=\"ts\">\nimport { normalizeColor, useTresContext } from '@tresjs/core'\nimport { Vector2, Vector3, Plane } from 'three'\nimport { Line2 } from 'three/examples/jsm/lines/Line2'\nimport { LineGeometry } from 'three/examples/jsm/lines/LineGeometry'\nimport { LineMaterial } from 'three/examples/jsm/lines/LineMaterial'\nimport { computed, onUnmounted, shallowRef, watch } from 'vue'\nimport type { TresColor } from '@tresjs/core'\nimport type { Color } from 'three'\n\nimport { withDefaults, defineProps, defineExpose } from \"vue\";\n\ntype Points = (Vector3 | Vector2 | [number, number, number] | [number, number] | number)[]\ntype VertexColors = Array<TresColor>\nexport interface LineProps {\n  points: Points\n  vertexColors?: VertexColors | null\n  color?: TresColor\n  lineWidth?: number\n  worldUnits?: boolean\n  alphaToCoverage?: boolean\n  dashed?: boolean\n  dashSize?: number\n  gapSize?: number\n  dashScale?: number\n  dashOffset?: number,\n  // #####\n  clippingPlanes?: Plane[] | null\n  // #####\n}\n\nconst props = withDefaults(defineProps<LineProps>(), {\n  vertexColors: null,\n  color: 'white',\n  lineWidth: 1,\n  worldUnits: false,\n  alphaToCoverage: false,\n  dashed: false,\n  dashSize: 1,\n  gapSize: 1,\n  dashScale: 1,\n  dashOffset: 0,\n  // #####\n  clippingPlanes: null\n  // #####\n})\n\ntype PropsType = typeof props\n\nfunction getInterpolatedVertexColors(vertexColors: VertexColors | null, numPoints: number): Color[] {\n  if (!vertexColors || vertexColors.length === 0) {\n    return Array.from({ length: numPoints }).fill(normalizeColor(props.color)) as Color[]\n  }\n  if (vertexColors.length === 1) {\n    return Array.from({ length: numPoints }).fill(normalizeColor(vertexColors[0])) as Color[]\n  }\n  if (vertexColors.length === numPoints) {\n    return vertexColors.map(normalizeColor)\n  }\n\n  const numSegments = numPoints - 1\n  const mappedColors = vertexColors.map(normalizeColor)\n  if (closed) { mappedColors.push(mappedColors[0].clone()) }\n\n  const iColors: Color[] = [mappedColors[0]]\n  const divisions = numSegments / (mappedColors.length - 1)\n  for (let i = 1; i < numSegments; i++) {\n    const alpha = (i % divisions) / divisions\n    const colorIndex = Math.floor(i / divisions)\n    iColors.push(mappedColors[colorIndex].clone().lerp(mappedColors[colorIndex + 1], alpha))\n  }\n  iColors.push(mappedColors[mappedColors.length - 1])\n\n  return iColors\n}\n\nconst lineMaterial = new LineMaterial()\nconst lineGeometry = new LineGeometry()\nconst line = new Line2(lineGeometry, lineMaterial)\nconst { sizes, invalidate } = useTresContext()\nconst hasVertexColors = computed(() => Array.isArray(props.vertexColors))\n\nfunction updateLineMaterial(material: LineMaterial, props: PropsType) {\n  material.color = normalizeColor(props.color)\n  material.linewidth = props.lineWidth\n  material.alphaToCoverage = props.alphaToCoverage\n  material.worldUnits = props.worldUnits\n  material.vertexColors = Array.isArray(props.vertexColors)\n  material.dashed = props.dashed\n  material.dashScale = props.dashScale\n  material.dashSize = props.dashSize\n  material.dashOffset = props.dashOffset\n  material.gapSize = props.gapSize\n  material.needsUpdate = true\n  // #####\n  material.clippingPlanes = props.clippingPlanes\n  // #####\n}\n\nfunction updateLineGeometry(geometry: LineGeometry, points: Points, vertexColors: VertexColors | null) {\n  const pValues = points.map((p) => {\n    if (p instanceof Vector3) {\n      return [p.x, p.y, p.z]\n    }\n    else if (p instanceof Vector2) {\n      return [p.x, p.y, 0]\n    }\n    else if (Array.isArray(p) && p.length === 2) {\n      return [p[0], p[1], 0]\n    }\n    else {\n      return p\n    }\n  }).flat()\n  geometry.setPositions(pValues.flat())\n\n  const colors = getInterpolatedVertexColors(vertexColors, points.length).map(c => c.toArray()).flat()\n  geometry.setColors(colors)\n\n  line.computeLineDistances()\n}\n\nupdateLineMaterial(lineMaterial, props)\nupdateLineGeometry(lineGeometry, props.points, props.vertexColors)\nline.computeLineDistances()\n\nwatch(() => [\n  props.color,\n  props.lineWidth,\n  props.alphaToCoverage,\n  props.worldUnits,\n  hasVertexColors,\n  props.dashed,\n  props.dashScale,\n  props.dashSize,\n  props.dashOffset,\n  // #####\n  props.clippingPlanes\n  // #####\n], () => {\n  updateLineMaterial(lineMaterial, props)\n  invalidate()\n})\nwatch(() => [props.points, props.vertexColors], () => {\n  updateLineGeometry(lineGeometry, props.points, props.vertexColors)\n  invalidate()\n})\nwatch(() => [sizes.height, sizes.width], () => {\n  lineMaterial.resolution = new Vector2(sizes.width.value, sizes.height.value)\n  invalidate()\n})\n\nonUnmounted(() => {\n  lineGeometry.dispose()\n  lineMaterial.dispose()\n})\n\nconst lineRef = shallowRef()\ndefineExpose({ instance: lineRef })\n</script>\n\n<template>\n  <primitive\n    :ref=\"lineRef\"\n    :object=\"line\"\n  />\n</template>","import script from \"./Line2FromCientosPackageAndItsTheSameButYouCanAlsoUseClippingPlanesSoItsNot.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./Line2FromCientosPackageAndItsTheSameButYouCanAlsoUseClippingPlanesSoItsNot.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","<!-- 3D object of the sundial -->\n\n<script setup lang=\"ts\">\n\nimport { PropType, computed, defineProps, ref, watch } from 'vue'\nimport { Euler, Matrix4, Plane, Ray, Vector3 } from 'three';\nimport Line2Clipped from './Line2FromCientosPackageAndItsTheSameButYouCanAlsoUseClippingPlanesSoItsNot.vue';\nimport { Line2 } from \"@tresjs/cientos\";\nimport { calculateShadowDirection, calculateSunHorizontalCoords, horizontalToActualCoords, nonNullSequence, padWithRepeatedLastElement, rad } from '@/calculations';\nimport SundialLetter from './SundialLetter.vue';\n\nconst props = defineProps(\n    {\n        show: {\n            required: true,\n            type: Boolean as PropType<boolean>\n        },\n        latitude: {\n            required: true,\n            type: Number as PropType<number>\n        },\n        longitude: {\n            required: true,\n            type: Number as PropType<number>\n        },\n        radius: {\n            required: true,\n            type: Number as PropType<number>\n        },\n        gnomonPosition: {\n            required: true,\n            type: Object as PropType<Vector3>\n        },\n        origin: {\n            required: true,\n            type: Object as PropType<Vector3>\n        },\n        rotation: {\n            required: true,\n            type: Object as PropType<Euler>\n        },\n        hourLineStyle: {\n            required: true,\n            type: String as PropType<\"solar\" | \"standard\">\n        },\n        timeZone: {\n            required: true,\n            type: Number as PropType<number>\n        },\n\n    })\n\n\n    // copy props only when visible, then do calculations on the copied props.\n    const freezeProps = ref({ ...props })\n    watch(props, (newValue) => {\n        if (newValue.show) {\n            freezeProps.value = { ...newValue }\n        }\n    }, { immediate: true })\n\n\n    const gnomonAbsolutePosition = computed(() => {\n        return new Vector3(...freezeProps.value.gnomonPosition)\n            .applyEuler(freezeProps.value.rotation)\n            .add(new Vector3(...freezeProps.value.origin))\n    })\n    let sundialNormal = computed(() => new Vector3(0, 1, 0).applyEuler(freezeProps.value.rotation));\n\n\n    const platePlane = computed(() => new Plane(sundialNormal.value, 0).translate(new Vector3(...freezeProps.value.origin)))\n    // vector used to raise the plot above the surface.\n    const plateToPlotVector = computed(() => sundialNormal.value.clone().normalize().multiplyScalar(0.007))\n\n    function projectionOnPlate(hour:number, day:number) : Vector3 | null {\n\n        // for solar time, just pretend the longitude is 0\n        const longitude = (() => {\n            switch(freezeProps.value.hourLineStyle) {\n                case \"solar\":\n                    return 0\n                case \"standard\":\n                    return freezeProps.value.longitude\n            }\n        })()\n\n        // sun pos\n        const { azimuth, altitude } = calculateSunHorizontalCoords(day, hour * 60, freezeProps.value.latitude, longitude)\n        const sunPos = horizontalToActualCoords(azimuth, altitude)\n\n        // shadow projection on plate\n        const ray = new Ray(gnomonAbsolutePosition.value, new Vector3(-sunPos.x, -sunPos.y, -sunPos.z))\n        const intersection = ray.intersectPlane(platePlane.value, new Vector3())\n\n        return intersection?.add(plateToPlotVector.value) ?? null\n    }\n\n\n\n    const hourLinePlotHours = [...Array(24).keys()];\n    const hourLinePlotDays = [...Array(37).keys()].map(x => 10*x)\n    // [hour][day] -> projection point.\n    const hourLinePlotData = computed(() => {\n        return hourLinePlotHours.map(hour => \n            hourLinePlotDays.map(day => {\n                return projectionOnPlate(hour, day)\n            })\n        )\n    })\n\n\n\n    const hourLinePlot = computed(() => {\n        let hourLines : {\n            hour:number,\n            line:Vector3[]\n        }[] = []\n\n\n\n        for (const [i, points] of hourLinePlotData.value.entries()) {\n            // there may be nulls in the hour plot.\n            // eg it may look like this:\n            // [null null null null Vector3 Vector3 Vector3 null null ...]\n            // collect the part of the list that is non null\n            // have to keep the number of points in the line constant otherwise cientos complains\n            // make the lines 1 longer than the number of points, so they can be made closed if needed.\n            // if a line segment is shorter than needed, pad with the last value of the array.\n            \n\n            let line = nonNullSequence(points)\n\n            if (line.length == 0) {\n                // make an \"empty\" line where all points are the same - rendering it invisible\n                line.push(new Vector3(0,0,0))\n            } else if (line.length == hourLinePlotDays.length) {\n                // make it closed\n                line.push(line[0])\n            }\n\n            padWithRepeatedLastElement(line, hourLinePlotDays.length + 1)\n\n            hourLines.push({\n                hour: hourLinePlotHours[i],\n                line: line\n            })\n\n        }\n        return hourLines\n    })\n\n    \n\n    const solsticePlotDays = [171, 354];\n    const solsticePlotHours = [...Array(48).keys()].map(x => x/2)\n    const solsticePlotData = computed(() => \n         solsticePlotDays.map(day => \n            solsticePlotHours.map(hour => \n                projectionOnPlate(hour, day) \n            )\n        )\n    )\n\n    const solsticePlot = computed(() => \n        [...solsticePlotData.value.entries()].map(([i, points]) => {\n            let line = nonNullSequence(points)\n\n            if (line.length == 0) {\n                // make an \"empty\" line where all points are the same - rendering it invisible\n                line.push(new Vector3(0, 0, 0))\n            } else if (line.length == solsticePlotHours.length) {\n                // make it closed\n                line.push(line[0])\n            }\n\n            padWithRepeatedLastElement(line, solsticePlotHours.length + 1)\n\n            return {\n                date: solsticePlotDays[i],\n                line: line\n            }\n\n        })\n    )\n\n    // define clipping planes for the plot.\n    const relativeClippingPlanesArgs = computed(() => [\n        {\n            normal: new Vector3(1, 0, 0),\n            coplanarPoint: new Vector3(-freezeProps.value.radius, 0, 0).add(freezeProps.value.origin)\n        },\n        {\n            normal: new Vector3(-1, 0, 0),\n            coplanarPoint: new Vector3(freezeProps.value.radius, 0, 0).add(freezeProps.value.origin)\n        },\n        {\n            normal: new Vector3(0, 0, 1),\n            coplanarPoint: new Vector3(0, 0, -freezeProps.value.radius).add(freezeProps.value.origin)\n        },\n        {\n            normal: new Vector3(0, 0, -1),\n            coplanarPoint: new Vector3(0, 0, freezeProps.value.radius).add(freezeProps.value.origin)\n        },\n    ]);\n\n    const clippingPlanes = computed(() => {\n\n        const planes : Plane[] = []\n\n        for (let {normal, coplanarPoint} of relativeClippingPlanesArgs.value) {\n            planes.push(new Plane().setFromNormalAndCoplanarPoint(\n                normal.clone()\n                    .applyEuler(freezeProps.value.rotation),\n                coplanarPoint.clone()\n                    .add(freezeProps.value.origin.clone().multiplyScalar(-1))\n                    .applyEuler(freezeProps.value.rotation)\n                    .add(freezeProps.value.origin),\n            ))\n        }\n\n        return planes\n    })\n\n\n\n\n\n    // The hours expressed in the range midnight to midnight, 0 to 2π\n    const hourLineTimeAngles = computed(() => hourLinePlotHours.map(i => {\n        let offsetHour;\n        if (freezeProps.value.hourLineStyle == 'standard') {\n            // need to adjust for time zones\n            offsetHour = i - freezeProps.value.timeZone / 60 + freezeProps.value.longitude * 24 / 360\n        }\n        else {\n            offsetHour = i;\n        }\n        return ((((offsetHour * 60) % 1440) + 1440) % 1440) * Math.PI * 2 / 1440\n    }))\n\n    \n    // work out what solstice line to put the numerals on.\n    const solsticeLineOfNumerals = computed(() => {\n        // make a ray starting from the nodus, pointing towards the north start.\n        // if this ray intersercts the sundial plate, then use the winter solstice. Otherwise use the summer solstice.\n        const ray = new Ray(gnomonAbsolutePosition.value, new Vector3(0, Math.cos(rad(90-freezeProps.value.latitude)), -Math.sin(rad(90-freezeProps.value.latitude))))\n        const intersect = ray.intersectsPlane(platePlane.value)\n        return intersect ? \"winter\" : \"summer\"\n    })\n    \n    // direction vector of each hour line on the sundial\n    // need this to work out where to position the digits\n    const hourLineDirections = computed(() => hourLineTimeAngles.value.map(timeAngle => {\n        return calculateShadowDirection(\n            timeAngle,\n            freezeProps.value.latitude * Math.PI / 180,\n            sundialNormal.value\n        ).normalize().multiplyScalar(0.2 * (solsticeLineOfNumerals.value == \"winter\" ? 1 : -1))\n    }));\n    const hourLineDigitMaxDistanceToInsideBorder = 0.15;\n\n    // world coords\n    const hourLineDigitPositions = computed(() => {\n\n        const day = (() => {\n            switch (solsticeLineOfNumerals.value) {\n                case \"winter\":\n                    return 354\n                case \"summer\":\n                    return 171\n            }\n        })()\n\n        return hourLinePlotHours.map((hour, i) => {\n            let pos :Vector3|undefined;\n            if (freezeProps.value.hourLineStyle == \"standard\") {\n                // projectOnPlate handles the longitude. don't need to adjust for that here\n                pos = projectionOnPlate((((hourLinePlotHours[i] - freezeProps.value.timeZone/60) % 24) + 24)%24, day)?.add(hourLineDirections.value[i]);\n            } else {\n                pos = projectionOnPlate(hourLineTimeAngles.value[i] * 12/Math.PI, day)?.add(hourLineDirections.value[i]);\n            }\n\n            if (!pos) return null\n\n            // check if pos is on the plate\n            // reuse the clipping planes\n            for (let plane of clippingPlanes.value) {\n                const p = plane.clone()\n                p.constant -= hourLineDigitMaxDistanceToInsideBorder;\n                if (p.distanceToPoint(pos) < 0) {\n                    return null\n                }\n            }\n\n            return pos\n\n        })\n\n    })\n\n    // relative coords\n    const hourLineDigits = computed(() => {\n\n        return hourLinePlotHours.map((hour, i) => ({\n            hour:hour,\n            label:hourLineDigitPositions.value[i] ? hour.toString() : \"\",\n            // transform to relative coords\n            pos: hourLineDigitPositions.value[i]\n                ?.sub(freezeProps.value.origin)\n                .applyMatrix4(new Matrix4().makeRotationFromEuler(freezeProps.value.rotation).invert())\n                ?? new Vector3(0,0,0)\n        }))\n    })\n\n    const fontSize = computed(() => {\n        // changing the text size causes a big lag spike\n        // only do it when this sundial is actually shown\n        if (!freezeProps.value.show) return 0.12\n\n        const nodusHeight = new Vector3(0,0,0).distanceTo(freezeProps.value.gnomonPosition)\n        if (nodusHeight < 1) return 0.055\n        else return 0.12\n    })\n\nconst plateGeometryArgs = computed<[number, number, number]>(() => [freezeProps.value.radius * 2, 0.1, freezeProps.value.radius * 2])\nconst rotationCopy = computed(() => freezeProps.value.rotation.clone())\nconst lineToNodusPoints = computed<[number, number, number][]>(() => [[0,0,0], freezeProps.value.gnomonPosition.toArray()])\nconst gnomonPositionCopy = computed(() => freezeProps.value.gnomonPosition.clone())\n\n</script>\n\n\n<template>\n    <!-- plot -->\n    <TresObject3D :visible=\"props.show\">\n        <template v-for=\"hourLine of hourLinePlot\" :key=\"hourLine.hour\">\n            <Line2Clipped :line-width=\"1\" :points=\"hourLine.line\" color=\"#ffffff\"\n                :clipping-planes=\"clippingPlanes\" />\n        </template>\n        <template v-for=\"solsticeLine of solsticePlot\" :key=\"solsticeLine.date\">\n            <Line2Clipped :line-width=\"1\" :points=\"solsticeLine.line\" color=\"#ffffff\"\n                :clipping-planes=\"clippingPlanes\" />\n        </template>\n    </TresObject3D>\n\n    <TresObject3D :visible=\"props.show\" :position=\"freezeProps.origin\" :rotation=\"rotationCopy\">\n\n        <!-- plate -->\n        <TresMesh :position=\"[0, -0.05, 0]\" cast-shadow receive-shadow>\n            <TresBoxGeometry :args=\"plateGeometryArgs\" />\n            <TresMeshPhongMaterial color=\"#f9ecec\" />\n        </TresMesh>\n\n        <!-- digits -->\n        <template v-for=\"digit of hourLineDigits\" :key=\"digit.hour\">\n            <SundialLetter receive-shadow :position=\"digit.pos\" :text=\"digit.label\" :size=\"fontSize\"/>\n        </template>\n\n        <!-- nodus -->\n        <TresMesh :position=\"gnomonPositionCopy\" cast-shadow receive-shadow>\n            <TresSphereGeometry :args=\"[0.08, 20, 16]\" />\n            <TresMeshPhongMaterial color=\"#b7b7b7\" />\n        </TresMesh>\n\n        <!-- line to nodus -->\n        <Line2 :line-width=\"2\" :points=\"lineToNodusPoints\" color=\"#ffffff\" />\n\n\n    </TresObject3D>\n\n</template>","import { defineComponent as _defineComponent } from 'vue'\nimport { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, unref as _unref } from \"vue\"\n\nimport { PropType, computed, ref, watch } from 'vue'\nimport { Euler, Matrix4, Plane, Ray, Vector3 } from 'three';\nimport Line2Clipped from './Line2FromCientosPackageAndItsTheSameButYouCanAlsoUseClippingPlanesSoItsNot.vue';\nimport { Line2 } from \"@tresjs/cientos\";\nimport { calculateShadowDirection, calculateSunHorizontalCoords, horizontalToActualCoords, nonNullSequence, padWithRepeatedLastElement, rad } from '@/calculations';\nimport SundialLetter from './SundialLetter.vue';\n\nconst hourLineDigitMaxDistanceToInsideBorder = 0.15;\n\n    // world coords\n    \nexport default /*@__PURE__*/_defineComponent({\n  __name: 'PointSundial',\n  props: {\n        show: {\n            required: true,\n            type: Boolean as PropType<boolean>\n        },\n        latitude: {\n            required: true,\n            type: Number as PropType<number>\n        },\n        longitude: {\n            required: true,\n            type: Number as PropType<number>\n        },\n        radius: {\n            required: true,\n            type: Number as PropType<number>\n        },\n        gnomonPosition: {\n            required: true,\n            type: Object as PropType<Vector3>\n        },\n        origin: {\n            required: true,\n            type: Object as PropType<Vector3>\n        },\n        rotation: {\n            required: true,\n            type: Object as PropType<Euler>\n        },\n        hourLineStyle: {\n            required: true,\n            type: String as PropType<\"solar\" | \"standard\">\n        },\n        timeZone: {\n            required: true,\n            type: Number as PropType<number>\n        },\n\n    },\n  setup(__props) {\n\n\nconst props = __props\n\n\n    // copy props only when visible, then do calculations on the copied props.\n    const freezeProps = ref({ ...props })\n    watch(props, (newValue) => {\n        if (newValue.show) {\n            freezeProps.value = { ...newValue }\n        }\n    }, { immediate: true })\n\n\n    const gnomonAbsolutePosition = computed(() => {\n        return new Vector3(...freezeProps.value.gnomonPosition)\n            .applyEuler(freezeProps.value.rotation)\n            .add(new Vector3(...freezeProps.value.origin))\n    })\n    let sundialNormal = computed(() => new Vector3(0, 1, 0).applyEuler(freezeProps.value.rotation));\n\n\n    const platePlane = computed(() => new Plane(sundialNormal.value, 0).translate(new Vector3(...freezeProps.value.origin)))\n    // vector used to raise the plot above the surface.\n    const plateToPlotVector = computed(() => sundialNormal.value.clone().normalize().multiplyScalar(0.007))\n\n    function projectionOnPlate(hour:number, day:number) : Vector3 | null {\n\n        // for solar time, just pretend the longitude is 0\n        const longitude = (() => {\n            switch(freezeProps.value.hourLineStyle) {\n                case \"solar\":\n                    return 0\n                case \"standard\":\n                    return freezeProps.value.longitude\n            }\n        })()\n\n        // sun pos\n        const { azimuth, altitude } = calculateSunHorizontalCoords(day, hour * 60, freezeProps.value.latitude, longitude)\n        const sunPos = horizontalToActualCoords(azimuth, altitude)\n\n        // shadow projection on plate\n        const ray = new Ray(gnomonAbsolutePosition.value, new Vector3(-sunPos.x, -sunPos.y, -sunPos.z))\n        const intersection = ray.intersectPlane(platePlane.value, new Vector3())\n\n        return intersection?.add(plateToPlotVector.value) ?? null\n    }\n\n\n\n    const hourLinePlotHours = [...Array(24).keys()];\n    const hourLinePlotDays = [...Array(37).keys()].map(x => 10*x)\n    // [hour][day] -> projection point.\n    const hourLinePlotData = computed(() => {\n        return hourLinePlotHours.map(hour => \n            hourLinePlotDays.map(day => {\n                return projectionOnPlate(hour, day)\n            })\n        )\n    })\n\n\n\n    const hourLinePlot = computed(() => {\n        let hourLines : {\n            hour:number,\n            line:Vector3[]\n        }[] = []\n\n\n\n        for (const [i, points] of hourLinePlotData.value.entries()) {\n            // there may be nulls in the hour plot.\n            // eg it may look like this:\n            // [null null null null Vector3 Vector3 Vector3 null null ...]\n            // collect the part of the list that is non null\n            // have to keep the number of points in the line constant otherwise cientos complains\n            // make the lines 1 longer than the number of points, so they can be made closed if needed.\n            // if a line segment is shorter than needed, pad with the last value of the array.\n            \n\n            let line = nonNullSequence(points)\n\n            if (line.length == 0) {\n                // make an \"empty\" line where all points are the same - rendering it invisible\n                line.push(new Vector3(0,0,0))\n            } else if (line.length == hourLinePlotDays.length) {\n                // make it closed\n                line.push(line[0])\n            }\n\n            padWithRepeatedLastElement(line, hourLinePlotDays.length + 1)\n\n            hourLines.push({\n                hour: hourLinePlotHours[i],\n                line: line\n            })\n\n        }\n        return hourLines\n    })\n\n    \n\n    const solsticePlotDays = [171, 354];\n    const solsticePlotHours = [...Array(48).keys()].map(x => x/2)\n    const solsticePlotData = computed(() => \n         solsticePlotDays.map(day => \n            solsticePlotHours.map(hour => \n                projectionOnPlate(hour, day) \n            )\n        )\n    )\n\n    const solsticePlot = computed(() => \n        [...solsticePlotData.value.entries()].map(([i, points]) => {\n            let line = nonNullSequence(points)\n\n            if (line.length == 0) {\n                // make an \"empty\" line where all points are the same - rendering it invisible\n                line.push(new Vector3(0, 0, 0))\n            } else if (line.length == solsticePlotHours.length) {\n                // make it closed\n                line.push(line[0])\n            }\n\n            padWithRepeatedLastElement(line, solsticePlotHours.length + 1)\n\n            return {\n                date: solsticePlotDays[i],\n                line: line\n            }\n\n        })\n    )\n\n    // define clipping planes for the plot.\n    const relativeClippingPlanesArgs = computed(() => [\n        {\n            normal: new Vector3(1, 0, 0),\n            coplanarPoint: new Vector3(-freezeProps.value.radius, 0, 0).add(freezeProps.value.origin)\n        },\n        {\n            normal: new Vector3(-1, 0, 0),\n            coplanarPoint: new Vector3(freezeProps.value.radius, 0, 0).add(freezeProps.value.origin)\n        },\n        {\n            normal: new Vector3(0, 0, 1),\n            coplanarPoint: new Vector3(0, 0, -freezeProps.value.radius).add(freezeProps.value.origin)\n        },\n        {\n            normal: new Vector3(0, 0, -1),\n            coplanarPoint: new Vector3(0, 0, freezeProps.value.radius).add(freezeProps.value.origin)\n        },\n    ]);\n\n    const clippingPlanes = computed(() => {\n\n        const planes : Plane[] = []\n\n        for (let {normal, coplanarPoint} of relativeClippingPlanesArgs.value) {\n            planes.push(new Plane().setFromNormalAndCoplanarPoint(\n                normal.clone()\n                    .applyEuler(freezeProps.value.rotation),\n                coplanarPoint.clone()\n                    .add(freezeProps.value.origin.clone().multiplyScalar(-1))\n                    .applyEuler(freezeProps.value.rotation)\n                    .add(freezeProps.value.origin),\n            ))\n        }\n\n        return planes\n    })\n\n\n\n\n\n    // The hours expressed in the range midnight to midnight, 0 to 2π\n    const hourLineTimeAngles = computed(() => hourLinePlotHours.map(i => {\n        let offsetHour;\n        if (freezeProps.value.hourLineStyle == 'standard') {\n            // need to adjust for time zones\n            offsetHour = i - freezeProps.value.timeZone / 60 + freezeProps.value.longitude * 24 / 360\n        }\n        else {\n            offsetHour = i;\n        }\n        return ((((offsetHour * 60) % 1440) + 1440) % 1440) * Math.PI * 2 / 1440\n    }))\n\n    \n    // work out what solstice line to put the numerals on.\n    const solsticeLineOfNumerals = computed(() => {\n        // make a ray starting from the nodus, pointing towards the north start.\n        // if this ray intersercts the sundial plate, then use the winter solstice. Otherwise use the summer solstice.\n        const ray = new Ray(gnomonAbsolutePosition.value, new Vector3(0, Math.cos(rad(90-freezeProps.value.latitude)), -Math.sin(rad(90-freezeProps.value.latitude))))\n        const intersect = ray.intersectsPlane(platePlane.value)\n        return intersect ? \"winter\" : \"summer\"\n    })\n    \n    // direction vector of each hour line on the sundial\n    // need this to work out where to position the digits\n    const hourLineDirections = computed(() => hourLineTimeAngles.value.map(timeAngle => {\n        return calculateShadowDirection(\n            timeAngle,\n            freezeProps.value.latitude * Math.PI / 180,\n            sundialNormal.value\n        ).normalize().multiplyScalar(0.2 * (solsticeLineOfNumerals.value == \"winter\" ? 1 : -1))\n    }));\n    const hourLineDigitPositions = computed(() => {\n\n        const day = (() => {\n            switch (solsticeLineOfNumerals.value) {\n                case \"winter\":\n                    return 354\n                case \"summer\":\n                    return 171\n            }\n        })()\n\n        return hourLinePlotHours.map((hour, i) => {\n            let pos :Vector3|undefined;\n            if (freezeProps.value.hourLineStyle == \"standard\") {\n                // projectOnPlate handles the longitude. don't need to adjust for that here\n                pos = projectionOnPlate((((hourLinePlotHours[i] - freezeProps.value.timeZone/60) % 24) + 24)%24, day)?.add(hourLineDirections.value[i]);\n            } else {\n                pos = projectionOnPlate(hourLineTimeAngles.value[i] * 12/Math.PI, day)?.add(hourLineDirections.value[i]);\n            }\n\n            if (!pos) return null\n\n            // check if pos is on the plate\n            // reuse the clipping planes\n            for (let plane of clippingPlanes.value) {\n                const p = plane.clone()\n                p.constant -= hourLineDigitMaxDistanceToInsideBorder;\n                if (p.distanceToPoint(pos) < 0) {\n                    return null\n                }\n            }\n\n            return pos\n\n        })\n\n    })\n\n    // relative coords\n    const hourLineDigits = computed(() => {\n\n        return hourLinePlotHours.map((hour, i) => ({\n            hour:hour,\n            label:hourLineDigitPositions.value[i] ? hour.toString() : \"\",\n            // transform to relative coords\n            pos: hourLineDigitPositions.value[i]\n                ?.sub(freezeProps.value.origin)\n                .applyMatrix4(new Matrix4().makeRotationFromEuler(freezeProps.value.rotation).invert())\n                ?? new Vector3(0,0,0)\n        }))\n    })\n\n    const fontSize = computed(() => {\n        // changing the text size causes a big lag spike\n        // only do it when this sundial is actually shown\n        if (!freezeProps.value.show) return 0.12\n\n        const nodusHeight = new Vector3(0,0,0).distanceTo(freezeProps.value.gnomonPosition)\n        if (nodusHeight < 1) return 0.055\n        else return 0.12\n    })\n\nconst plateGeometryArgs = computed<[number, number, number]>(() => [freezeProps.value.radius * 2, 0.1, freezeProps.value.radius * 2])\nconst rotationCopy = computed(() => freezeProps.value.rotation.clone())\nconst lineToNodusPoints = computed<[number, number, number][]>(() => [[0,0,0], freezeProps.value.gnomonPosition.toArray()])\nconst gnomonPositionCopy = computed(() => freezeProps.value.gnomonPosition.clone())\n\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_TresObject3D = _resolveComponent(\"TresObject3D\")!\n  const _component_TresBoxGeometry = _resolveComponent(\"TresBoxGeometry\")!\n  const _component_TresMeshPhongMaterial = _resolveComponent(\"TresMeshPhongMaterial\")!\n  const _component_TresMesh = _resolveComponent(\"TresMesh\")!\n  const _component_TresSphereGeometry = _resolveComponent(\"TresSphereGeometry\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createVNode(_component_TresObject3D, {\n      visible: props.show\n    }, {\n      default: _withCtx(() => [\n        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(hourLinePlot.value, (hourLine) => {\n          return (_openBlock(), _createBlock(Line2Clipped, {\n            key: hourLine.hour,\n            \"line-width\": 1,\n            points: hourLine.line,\n            color: \"#ffffff\",\n            \"clipping-planes\": clippingPlanes.value\n          }, null, 8, [\"points\", \"clipping-planes\"]))\n        }), 128)),\n        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(solsticePlot.value, (solsticeLine) => {\n          return (_openBlock(), _createBlock(Line2Clipped, {\n            key: solsticeLine.date,\n            \"line-width\": 1,\n            points: solsticeLine.line,\n            color: \"#ffffff\",\n            \"clipping-planes\": clippingPlanes.value\n          }, null, 8, [\"points\", \"clipping-planes\"]))\n        }), 128))\n      ]),\n      _: 1\n    }, 8, [\"visible\"]),\n    _createVNode(_component_TresObject3D, {\n      visible: props.show,\n      position: freezeProps.value.origin,\n      rotation: rotationCopy.value\n    }, {\n      default: _withCtx(() => [\n        _createVNode(_component_TresMesh, {\n          position: [0, -0.05, 0],\n          \"cast-shadow\": \"\",\n          \"receive-shadow\": \"\"\n        }, {\n          default: _withCtx(() => [\n            _createVNode(_component_TresBoxGeometry, { args: plateGeometryArgs.value }, null, 8, [\"args\"]),\n            _createVNode(_component_TresMeshPhongMaterial, { color: \"#f9ecec\" })\n          ]),\n          _: 1\n        }),\n        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(hourLineDigits.value, (digit) => {\n          return (_openBlock(), _createBlock(SundialLetter, {\n            key: digit.hour,\n            \"receive-shadow\": \"\",\n            position: digit.pos,\n            text: digit.label,\n            size: fontSize.value\n          }, null, 8, [\"position\", \"text\", \"size\"]))\n        }), 128)),\n        _createVNode(_component_TresMesh, {\n          position: gnomonPositionCopy.value,\n          \"cast-shadow\": \"\",\n          \"receive-shadow\": \"\"\n        }, {\n          default: _withCtx(() => [\n            _createVNode(_component_TresSphereGeometry, { args: [0.08, 20, 16] }),\n            _createVNode(_component_TresMeshPhongMaterial, { color: \"#b7b7b7\" })\n          ]),\n          _: 1\n        }, 8, [\"position\"]),\n        _createVNode(_unref(Line2), {\n          \"line-width\": 2,\n          points: lineToNodusPoints.value,\n          color: \"#ffffff\"\n        }, null, 8, [\"points\"])\n      ]),\n      _: 1\n    }, 8, [\"visible\", \"position\", \"rotation\"])\n  ], 64))\n}\n}\n\n})","import script from \"./PointSundial.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./PointSundial.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, createVNode as _createVNode, Suspense as _Suspense, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, resolveComponent as _resolveComponent } from \"vue\"\n\nimport { GLTFModel } from '@tresjs/cientos';\nimport {PropType, computed} from 'vue';\nimport {Euler} from 'three';\n\n\nexport default /*@__PURE__*/_defineComponent({\n  __name: 'CompassObject',\n  props: {\n    rotation: {\n        required: true,\n        type: Object as PropType<Euler>\n    }\n},\n  setup(__props) {\n\nconst props = __props\n\nconst rotationCopy = computed(() => props.rotation.clone())\nconst fixedRotationOffset = [0, Math.PI, 0] as [number, number, number]\n\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_TresObject3D = _resolveComponent(\"TresObject3D\")!\n\n  return (_openBlock(), _createBlock(_component_TresObject3D, { rotation: rotationCopy.value }, {\n    default: _withCtx(() => [\n      _createVNode(_component_TresObject3D, { rotation: fixedRotationOffset }, {\n        default: _withCtx(() => [\n          (_openBlock(), _createBlock(_Suspense, null, {\n            default: _withCtx(() => [\n              _createVNode(_unref(GLTFModel), { path: \"./objects3d/compass.glb\" })\n            ]),\n            _: 1\n          }))\n        ]),\n        _: 1\n      })\n    ]),\n    _: 1\n  }, 8, [\"rotation\"]))\n}\n}\n\n})","<script setup lang=\"ts\">\nimport { GLTFModel } from '@tresjs/cientos';\nimport {defineProps, PropType, computed} from 'vue';\nimport {Euler} from 'three';\n\nconst props = defineProps({\n    rotation: {\n        required: true,\n        type: Object as PropType<Euler>\n    }\n})\n\nconst rotationCopy = computed(() => props.rotation.clone())\nconst fixedRotationOffset = [0, Math.PI, 0] as [number, number, number]\n\n</script>\n\n<template>\n    <TresObject3D :rotation=\"rotationCopy\">\n        <TresObject3D :rotation=\"fixedRotationOffset\">\n            <Suspense>\n                <GLTFModel path=\"./objects3d/compass.glb\" />\n            </Suspense>\n        </TresObject3D>\n    </TresObject3D>\n</template>","import script from \"./CompassObject.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./CompassObject.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { useCssVars as _useCssVars, defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, resolveComponent as _resolveComponent, createVNode as _createVNode, isRef as _isRef, withCtx as _withCtx, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle, vModelCheckbox as _vModelCheckbox, vModelRadio as _vModelRadio, createTextVNode as _createTextVNode, withKeys as _withKeys, vShow as _vShow, Fragment as _Fragment } from \"vue\"\nimport _imports_0 from './assets/github-mark-white.svg'\nimport _imports_1 from './assets/world-map-coordinates-correct.png'\nimport _imports_2 from './assets/sundialicon.svg'\nimport _imports_3 from './assets/pointshadowtraceicon.svg'\n\n\nconst _hoisted_1 = { style: {\"width\":\"100%\",\"height\":\"100%\",\"position\":\"fixed\",\"left\":\"0\",\"top\":\"0\"} }\nconst _hoisted_2 = { id: \"overlay\" }\nconst _hoisted_3 = { id: \"sidebarContent\" }\nconst _hoisted_4 = { \"data-v-walkthrough\": \"map\" }\nconst _hoisted_5 = { class: \"horizontal_settings\" }\nconst _hoisted_6 = { class: \"setting\" }\nconst _hoisted_7 = {\n  key: 0,\n  class: \"error\"\n}\nconst _hoisted_8 = { class: \"setting\" }\nconst _hoisted_9 = {\n  key: 0,\n  class: \"error\"\n}\nconst _hoisted_10 = { class: \"setting\" }\nconst _hoisted_11 = {\n  key: 0,\n  class: \"error\"\n}\nconst _hoisted_12 = { style: {\"display\":\"grid\",\"grid-template-columns\":\"min-content auto\",\"grid-template-rows\":\"min-content auto\"} }\nconst _hoisted_13 = { style: {\"position\":\"relative\",\"aspect-ratio\":\"2 / 1\"} }\nconst _hoisted_14 = {\n  class: \"setting\",\n  \"data-v-walkthrough\": \"time-zone\"\n}\nconst _hoisted_15 = {\n  class: \"setting\",\n  \"data-v-walkthrough\": \"sundial-type\"\n}\nconst _hoisted_16 = {\n  class: \"checkboxSetting\",\n  style: {\"display\":\"flex\",\"flex-direction\":\"row\",\"align-items\":\"center\"}\n}\nconst _hoisted_17 = {\n  class: \"checkboxSetting\",\n  style: {\"display\":\"flex\",\"flex-direction\":\"row\",\"align-items\":\"center\"}\n}\nconst _hoisted_18 = { \"data-v-walkthrough\": \"slant-and-rotation\" }\nconst _hoisted_19 = { class: \"setting\" }\nconst _hoisted_20 = {\n  key: 0,\n  class: \"error\"\n}\nconst _hoisted_21 = { class: \"setting\" }\nconst _hoisted_22 = {\n  key: 0,\n  class: \"error\"\n}\nconst _hoisted_23 = { class: \"setting\" }\nconst _hoisted_24 = { class: \"fieldTitle\" }\nconst _hoisted_25 = {\n  key: 0,\n  class: \"error\"\n}\nconst _hoisted_26 = {\n  class: \"setting\",\n  \"data-v-walkthrough\": \"hour-lines\"\n}\nconst _hoisted_27 = { class: \"checkboxSetting\" }\nconst _hoisted_28 = { class: \"checkboxSetting\" }\nconst _hoisted_29 = { class: \"checkboxSetting\" }\nconst _hoisted_30 = { class: \"checkboxSetting\" }\nconst _hoisted_31 = { id: \"topRightControls\" }\nconst _hoisted_32 = {\n  id: \"compassContainer\",\n  title: \"North\"\n}\nconst _hoisted_33 = {\n  id: \"status\",\n  \"data-v-walkthrough\": \"status\"\n}\nconst _hoisted_34 = { style: {\"display\":\"flex\",\"flex-direction\":\"row\",\"align-items\":\"center\"} }\nconst _hoisted_35 = { style: {\"display\":\"flex\",\"margin-left\":\"10px\",\"justify-content\":\"end\",\"flex-direction\":\"column\",\"align-items\":\"stretch\",\"padding-block\":\"9px\"} }\nconst _hoisted_36 = { class: \"subtitle\" }\nconst _hoisted_37 = { class: \"subtitle\" }\nconst _hoisted_38 = { class: \"subtitle\" }\nconst _hoisted_39 = { style: {\"display\":\"flex\",\"flex-direction\":\"row\"} }\nconst _hoisted_40 = { class: \"popper_content\" }\nconst _hoisted_41 = { style: {\"text-align\":\"left\"} }\nconst _hoisted_42 = {\n  class: \"subtitle\",\n  style: {\"margin-top\":\"13px\"}\n}\n\nimport { TresCanvas } from '@tresjs/core';\n    import { onClickOutside } from '@vueuse/core'\n    import interpolate from \"color-interpolate\";\n    import { computed, getCurrentInstance, nextTick, onMounted, reactive, ref, watch } from 'vue'\n    import SunObject from './components/SunObject.vue';\n    import { decimal, helpers, maxValue, minValue, required } from '@vuelidate/validators';\n    import useVuelidate from '@vuelidate/core';\n    import { BasicShadowMap, Vector3, Euler } from 'three';\n    import { dateToString, horizontalToActualCoords, calculateSunHorizontalCoords, timeToString, timeZoneToString, longitudeToTimeZone, stringToTime } from '@/calculations';\n    import DialAndGnomonSundial from './components/DialAndGnomonSundial.vue';\n    import CameraHelper from './components/CameraHelper.vue';\n    import RendererHelper from './components/RendererHelper.vue';\n    import ThreeTimesExplanation from './components/ThreeTimesExplanation.vue';\n    import { tourSteps as walkthroughSteps } from './walkthrough';\n    import Popper from 'vue3-popper';\n    import PointSundial from './components/PointSundial.vue';\n    import CompassObject from \"./components/CompassObject.vue\"\n    \n    /*\n     * Config\n     */\n    const sundialRadius = 5;\n    const projectionRadius = 4;\n    const numeralDistanceFromSundialOrigin = 4;\n    const zoomSpeed = 3;\n\n    \n    /*\n     * Independent variables \n     */\n    /** 0 to 24*60 */\n    \nexport default /*@__PURE__*/_defineComponent({\n  __name: 'App',\n  setup(__props) {\n\n_useCssVars(_ctx => ({\n  \"8cdf6374\": (statusTextColor.value)\n}))\n\n\n    const sundialOrigin = new Vector3(0, -0.5, 0);\n    let localTime = ref<number>(12 * 60);\n    /** 0 to 364 (integer) */\n    let day = ref<number>(162);\n    let longitude = ref<number>(0);\n    let latitude = ref<number>(0);\n    let autoSelectTimeZone = ref(true);\n    /** +/- minutes UTC */\n    let timeZone = ref<number>(0);\n    // let numerals = ref<\"roman\"|\"arabic\">(\"arabic\");\n    let sunRaysPassThroughEarth = ref(false);\n    let hourLineStyle = ref<\"solar\"|\"standard\">(\"standard\");\n    let sundialType = ref<\"dialAndGnomon\" | \"pointSundial\">(\"dialAndGnomon\")\n    let slant = ref<number>(0);\n    let rotation = ref<number>(0);\n    /**Camera position multiplier per second. < 1 zoom in, > 1 zoom out */\n    let currentZoomPerSecond = ref<number>(1);\n    // slant + rotation.\n    \n    let gnomonHeight = ref<number>(1)\n    let timeAdvanceSpeed = ref<number>(0)\n    let alwaysDaySkyColor = ref<boolean>(false);\n\n    /**\n     * readonly variables\n     */\n    let cameraPosition = ref<Vector3>()\n\n    /*\n     * Allow the time to be input manually.\n     */\n    let isEditingTime = ref<boolean>(false);\n    /** What's in the time manual entry box */\n    let timeEntryValue = ref<string>(\"\");\n    const timeEntryBox = ref<HTMLInputElement | null>(null);   \n    function showTimeEntryBox() {\n        if (isEditingTime.value == false) {\n            isEditingTime.value = true;\n            timeEntryValue.value = timeToString(localTime.value);\n\n            nextTick(() => timeEntryBox.value?.focus());\n            \n        }\n    }\n    function updateTimeFromEntryBox() {\n        if (!timeEntryBox.value) return;\n\n        const newTime = stringToTime(timeEntryBox.value.value);\n        if (isNaN(newTime)) return;\n\n        localTime.value = newTime;\n    }\n    function hideTimeEntryBox() {\n        if (isEditingTime.value == true) {\n            isEditingTime.value = false\n            \n            updateTimeFromEntryBox()\n        }\n    }\n    onClickOutside(timeEntryBox, hideTimeEntryBox)\n\n    // make the 3 times explanation popup disappear when escape key pressed\n    onMounted(() => {\n        document.addEventListener(\"keydown\", (event) => {\n            if (event.key == \"Escape\") {\n                setShowThreeTimesExplanation(false)\n            }\n        })\n    })\n\n\n    /*\n     * Sidebar form validation \n     */\n    const formDefaults = {\n        latitude:\"45.00\",\n        longitude:\"0.00\",\n        timeZone:\"+0:00\",\n        slant:\"0\",\n        rotation:\"0\",\n        gnomonHeight:\"1\"\n    }\n\n    /** used to parse time zone user input*/\n    const timeZoneRegex = /^\\s*([+-±]?)\\s*((?:0?[0-9])|1[0-9])(?::((?:0[0-9])|[1-5][0-9]))?\\s*$/;\n\n    let formState = reactive(formDefaults);\n    const formRules = computed<Record<keyof typeof formDefaults, object>>(() => ({\n        latitude: {\n            required,\n            decimal,\n            minValue:minValue(-90),\n            maxValue:maxValue(90)\n        },\n        longitude: {\n            required,\n            decimal,\n            minValue:minValue(-180),\n            maxValue:maxValue(180)\n        },\n        timeZone: {\n            isATimeZone: helpers.withMessage(\"Your time zone should look like +/-HH(:MM)\", helpers.regex(timeZoneRegex))\n        },\n        slant: {\n            required,\n            decimal,\n            minValue:minValue(-180),\n            maxValue:maxValue(180)\n        },\n        rotation: {\n            required,\n            decimal,\n            minValue:minValue(-180),\n            maxValue:maxValue(180)\n        },\n        gnomonHeight: {\n            required,\n            decimal,\n            minValue:minValue(0.5),\n            maxValue:maxValue(3)\n        }\n    }))\n    const v$ = useVuelidate(formRules, formState)\n\n    // parse and updadte whenever valid entries are changed in the form.\n    watch(() => formState.longitude, newVal => {\n        if (!v$.value.longitude.$invalid) {\n            longitude.value = Number.parseFloat(newVal);\n            // set the time zone as well.\n            if (autoSelectTimeZone.value) {\n                formState.timeZone = timeZoneToString(longitudeToTimeZone(longitude.value));\n            }\n        }\n    }, { immediate: true })\n    watch(() => formState.latitude, newVal => {\n        if (!v$.value.latitude.$invalid) latitude.value = Number.parseFloat(newVal);\n    }, {immediate:true})\n    watch(() => formState.timeZone, newVal => {\n        const result = newVal.match(timeZoneRegex);\n        if (result) {\n            const newValInt = (result[1] == \"-\" ? -1 : 1) * (Number.parseInt(result[2]) * 60 + Number.parseInt(result[3] ?? 0));\n            // change the local time so that the global time remains consistent\n            localTime.value = (((localTime.value + newValInt - timeZone.value) % 1440) + 1440) % 1440\n            timeZone.value = newValInt;\n        }\n    }, {immediate:true})\n    watch(() => formState.slant, newVal => {\n        if (!v$.value.slant.$invalid) slant.value = Number.parseFloat(newVal) * Math.PI/180;\n    }, {immediate: true})\n    watch(() => formState.rotation, newVal => {\n        if (!v$.value.rotation.$invalid) rotation.value = -Number.parseFloat(newVal) * Math.PI / 180;\n    }, { immediate: true })\n    watch(() => formState.gnomonHeight, newVal => {\n        if (!v$.value.gnomonHeight.$invalid) gnomonHeight.value = Number.parseFloat(newVal);\n    }, { immediate: true })\n\n    /*\n    * Help popups\n    */\n    const instance = getCurrentInstance();\n    let showThreeTimesExplanation = ref(false);\n    function toggleWalkthrough() {\n        const wt = instance?.appContext.config.globalProperties.$tours['walkthrough'];\n        if (!wt) return;\n        if (wt.isRunning.value) {\n            wt.stop()\n        } else {\n            hideAllPoppers()\n            wt.start()\n        }\n    }\n    function hideAllPoppers() {\n        instance?.appContext.config.globalProperties.$tours['walkthrough'].finish()\n        showThreeTimesExplanation.value = false;\n    }\n    function setShowThreeTimesExplanation(show: boolean) {\n        if (show) {\n            hideAllPoppers()\n        }\n        showThreeTimesExplanation.value = show\n    }\n\n    /**\n     * Set the latitude and longitude when the user clicks on the map.\n     */ \n    let mapImage = ref<HTMLImageElement>();\n    let mapImageIsBeingClicked = ref(false);\n    function setLatLngFromMap(e:MouseEvent) {\n        if (mapImage.value) {\n            const longitude = e.offsetX / mapImage.value.width * 360 - 180;\n            const latitude = 90 - e.offsetY / mapImage.value.height * 180;\n            formState.longitude = longitude.toFixed(1);\n            formState.latitude = latitude.toFixed(1);\n        }\n    }\n    function mapImageMouseMove(e:MouseEvent) {\n        if (mapImageIsBeingClicked.value) setLatLngFromMap(e)\n    }\n    function mapImageStartClicking() {\n        mapImageIsBeingClicked.value = true;\n    }\n    function mapImageClick(e:MouseEvent) {\n        setLatLngFromMap(e)\n    }\n\n    // global mouse released fn\n    onMounted(() => {\n        window.addEventListener(\"mouseup\", () => {\n            mapImageIsBeingClicked.value = false;\n        })\n    })\n\n    // get the dimensions of the sidebar for layout\n    let sidebarDims = ref({ clientWidth: 0, clientHeight: 0 });\n    const sidebar = ref<HTMLDivElement>();\n    const sidebarResizeObserver = new ResizeObserver(() => {\n        const clientWidth = sidebar.value?.clientWidth ?? 0;\n        const clientHeight = sidebar.value?.clientHeight ?? 0;\n        sidebarDims.value = { clientWidth, clientHeight }\n    })\n    onMounted(() => {\n        sidebarResizeObserver.observe(sidebar.value as HTMLDivElement);\n    })\n\n\n    // set the time zone as the user clicks the checkbox\n    watch(() => autoSelectTimeZone.value, value => {\n        if (value) {\n            formState.timeZone = timeZoneToString(longitudeToTimeZone(longitude.value));\n        }\n    })\n\n    function timeAdvanceButtonClicked() {\n        if (timeAdvanceSpeed.value == 0) {\n            timeAdvanceSpeed.value = 1\n        } else {\n            timeAdvanceSpeed.value *= 4\n            if (timeAdvanceSpeed.value > 16) {\n                timeAdvanceSpeed.value = 0\n            }\n        }\n        // timeAdvanceSpeed.value = (timeAdvanceSpeed.value + 1) % 4\n    }\n    function advanceTime(mins:number) {\n        localTime.value += mins\n        if (localTime.value >= 1440) {\n            localTime.value %= 1440\n            day.value = (day.value + 1) % 365\n        }\n    }\n\n    /**\n     * computed values\n     */\n    const sundialRotation = computed(() => new Euler(Math.abs(slant.value), rotation.value + (slant.value < 0 ? Math.PI : 0), 0, \"YXZ\"));\n    /** relative to sundial origin and rotation */\n    const gnomonRelativePosition = computed(() => new Vector3(0, gnomonHeight.value, 0));\n    const nodusRelativePosition = computed(() => new Vector3(0, gnomonHeight.value, 0));\n    /** convert local time to UTC +0 */\n    const time = computed(() => (((localTime.value - timeZone.value) % 1440) + 1440) % 1440)\n    const sunHorizontalCoords = computed(() => calculateSunHorizontalCoords(day.value, time.value, latitude.value, longitude.value));\n    const sunCoords = computed(() => horizontalToActualCoords(sunHorizontalCoords.value.azimuth, sunHorizontalCoords.value.altitude))\n    // let gnomonRotation = computed(() => (90-latitude.value)*Math.PI/180);\n    const isDaytime = computed(() => sunHorizontalCoords.value.altitude >= 0);\n    const statusTextColor = computed(() => isDaytime.value || alwaysDaySkyColor.value ? \"black\" : \"white\")\n    const timeText = computed(() => timeToString(localTime.value))\n    const dateText = computed(() => dateToString(day.value));\n    const meanSolarTime = computed(() => time.value + ((longitude.value/360)*24*60));\n    const meanSolarTimeText = computed(() => timeToString(meanSolarTime.value));\n    const apparentSolarTime = computed(() => {\n        // use the already-computed sun position. This isn't actualy dependent on the latitude irl. Just seemed the easiest way to do it here.\n        // to calculate this, rotate sun position (90°-latitude) anticlockwise about x axis (west to east axis). Then work out projected angle in the x/z (horizontal) plane.\n        const latRad = latitude.value * Math.PI/180;\n        const timeHours = Math.atan2(sunCoords.value.y * Math.cos(latRad) + sunCoords.value.z * Math.sin(latRad), sunCoords.value.x) * 12 / Math.PI + 6;\n        const timeMins = (((timeHours % 24) + 24) % 24) * 60;\n        return timeMins;\n    })\n    const apparentSolarTimeText = computed(() => timeToString(apparentSolarTime.value))\n    const timeZoneText = computed(() => timeZoneToString(timeZone.value))\n    const sunlightIntensity = computed(() => {\n        // a very unscientific way of calculating the apparent sunlight intensity.\n        // have a little bit of sunlight when the sun is below the horizon.\n        if (sunHorizontalCoords.value.altitude > 0.1) return 1;\n        if (sunHorizontalCoords.value.altitude > -0.1) return (sunHorizontalCoords.value.altitude + 0.1)/0.2;\n        return 0;\n    })\n    const skyColor = computed(() => {\n        if (alwaysDaySkyColor.value) {\n            return \"#87CEEB\"\n        }\n        // make the sky look nice innit\n        return interpolate([\"#02407a\", \"#87CEEB\"])(sunlightIntensity.value);\n    })\n    const compassRotation = computed(() => {\n\n        if (!cameraPosition.value) {\n            return new Euler()\n        }\n\n        const cameraDistance = cameraPosition.value.distanceTo(new Vector3(0,0,0))\n        const altitude = Math.asin(cameraPosition.value.y/cameraDistance);\n        const azimouth = Math.atan2(cameraPosition.value.z, cameraPosition.value.x)\n        return new Euler(altitude - Math.PI / 2, azimouth - Math.PI/2, 0, 'XYZ')\n    })\n\n    const timeAdvanceButtonText = computed(() => {\n        if (timeAdvanceSpeed.value == 0) {\n            return \"▶\"\n        } else {\n            return timeAdvanceSpeed.value + \"x\"\n        }\n    })\n\n    // previously all this stuff was inlined in the template\n    // move all inline processing stuff in the <Tres...> tag props here because this is necessary to make tresjs render frames on demand\n    // I have done this with most of the 3d components as well\n    const showDialAndGnomonSundial = computed(() => sundialType.value === \"dialAndGnomon\")\n    const showPointSundial = computed(() => sundialType.value === \"pointSundial\")\n    const sunCoordsArray = computed<[number, number, number]>(() => [sunCoords.value.x, sunCoords.value.y, sunCoords.value.z])\n    const directionalLightIntensity = computed(() => sunRaysPassThroughEarth.value ? 1 : sunlightIntensity.value)\n    const cameraXOffset = computed(() => -(sidebarDims.value.clientWidth)/2)\n    const gridHelperArgs = [50, 50, '#AAAAAA', '#AAAAAA'] as [number, number, string, string]\n    const gridHelperPosition = [0, -8, 0] as [number,number, number]\n    const compassCameraPosition = [0, 10, 0] as [number, number, number]\n    const compassCameraLookAt = [0, 0, 0] as [number, number, number]\n\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_v_tour = _resolveComponent(\"v-tour\")!\n  const _component_TresPerspectiveCamera = _resolveComponent(\"TresPerspectiveCamera\")!\n  const _component_TresDirectionalLight = _resolveComponent(\"TresDirectionalLight\")!\n  const _component_TresAmbientLight = _resolveComponent(\"TresAmbientLight\")!\n  const _component_TresGridHelper = _resolveComponent(\"TresGridHelper\")!\n  const _component_TresOrthographicCamera = _resolveComponent(\"TresOrthographicCamera\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createVNode(_component_v_tour, {\n      name: \"walkthrough\",\n      steps: _unref(walkthroughSteps),\n      options: {\n        labels: {\n            buttonSkip: 'Close',\n            buttonPrevious: 'Previous',\n            buttonNext: 'Next',\n            buttonStop: 'Finish'\n        }\n    }\n    }, null, 8, [\"steps\"]),\n    _createElementVNode(\"div\", _hoisted_1, [\n      _createVNode(_unref(TresCanvas), {\n        \"clear-color\": skyColor.value,\n        shadows: \"\",\n        shadowMapType: _unref(BasicShadowMap),\n        \"render-mode\": \"on-demand\"\n      }, {\n        default: _withCtx(() => [\n          _createVNode(_component_TresPerspectiveCamera),\n          _createVNode(DialAndGnomonSundial, {\n            show: showDialAndGnomonSundial.value,\n            latitude: _unref(latitude),\n            longitude: _unref(longitude),\n            origin: _unref(sundialOrigin),\n            rotation: sundialRotation.value,\n            \"gnomon-position\": gnomonRelativePosition.value,\n            radius: sundialRadius,\n            hourLineStyle: _unref(hourLineStyle),\n            \"time-zone\": _unref(timeZone),\n            numeralDistanceFromSundialOrigin: numeralDistanceFromSundialOrigin\n          }, null, 8, [\"show\", \"latitude\", \"longitude\", \"origin\", \"rotation\", \"gnomon-position\", \"hourLineStyle\", \"time-zone\"]),\n          _createVNode(PointSundial, {\n            show: showPointSundial.value,\n            latitude: _unref(latitude),\n            longitude: _unref(longitude),\n            origin: _unref(sundialOrigin),\n            rotation: sundialRotation.value,\n            \"gnomon-position\": nodusRelativePosition.value,\n            radius: projectionRadius,\n            hourLineStyle: _unref(hourLineStyle),\n            \"time-zone\": _unref(timeZone)\n          }, null, 8, [\"show\", \"latitude\", \"longitude\", \"origin\", \"rotation\", \"gnomon-position\", \"hourLineStyle\", \"time-zone\"]),\n          _createVNode(SunObject, { position: sunCoords.value }, null, 8, [\"position\"]),\n          _createVNode(_component_TresDirectionalLight, {\n            position: sunCoordsArray.value,\n            intensity: directionalLightIntensity.value,\n            \"shadow-mapSize-width\": 2048,\n            \"shadow-mapSize-height\": 2048,\n            \"cast-shadow\": \"\"\n          }, null, 8, [\"position\", \"intensity\"]),\n          _createVNode(_component_TresAmbientLight, { color: \"#AAAAAA\" }),\n          _createVNode(_component_TresGridHelper, {\n            args: gridHelperArgs,\n            position: gridHelperPosition\n          }),\n          _createVNode(CameraHelper, {\n            \"x-offset\": cameraXOffset.value,\n            \"zoom-per-second\": _unref(currentZoomPerSecond),\n            onCameraPosChange: _cache[0] || (_cache[0] = pos => _isRef(cameraPosition) //@ts-ignore\n ? cameraPosition.value = pos : cameraPosition = pos),\n            onOnAdvanceTime: advanceTime,\n            \"time-advance-speed\": _unref(timeAdvanceSpeed)\n          }, null, 8, [\"x-offset\", \"zoom-per-second\", \"time-advance-speed\"]),\n          _createVNode(RendererHelper)\n        ]),\n        _: 1\n      }, 8, [\"clear-color\", \"shadowMapType\"])\n    ]),\n    _createElementVNode(\"div\", _hoisted_2, [\n      _createElementVNode(\"div\", {\n        id: \"sidebar\",\n        ref_key: \"sidebar\",\n        ref: sidebar\n      }, [\n        _createElementVNode(\"div\", _hoisted_3, [\n          _createElementVNode(\"a\", {\n            class: \"sidebar_link\",\n            onClick: _cache[1] || (_cache[1] = e => {e.preventDefault();toggleWalkthrough()}),\n            href: \"javascript:void(0)\"\n          }, \"walkthrough\"),\n          _cache[54] || (_cache[54] = _createTextVNode(\" · \")),\n          _cache[55] || (_cache[55] = _createElementVNode(\"a\", {\n            class: \"sidebar_link\",\n            href: \"https://github.com/tpeach90/sundials/\",\n            style: {\"text-decoration\":\"none\"},\n            target: \"_blank\",\n            title: \"Source code on github.com\"\n          }, [\n            _createElementVNode(\"span\", { style: {\"text-decoration\":\"underline\"} }, \"code\"),\n            _createElementVNode(\"img\", {\n              src: _imports_0,\n              style: {\"height\":\"1em\",\"margin-left\":\"0.2em\"},\n              alt: \"GitHub logo\"\n            })\n          ], -1)),\n          _cache[56] || (_cache[56] = _createElementVNode(\"h2\", null, \"Coordinates\", -1)),\n          _createElementVNode(\"div\", _hoisted_4, [\n            _createElementVNode(\"div\", _hoisted_5, [\n              _createElementVNode(\"div\", _hoisted_6, [\n                _cache[39] || (_cache[39] = _createElementVNode(\"label\", { class: \"fieldTitle\" }, \"Latitude/°\", -1)),\n                _withDirectives(_createElementVNode(\"input\", {\n                  class: \"small_input\",\n                  \"onUpdate:modelValue\": _cache[2] || (_cache[2] = ($event: any) => ((_unref(v$).latitude.$model) = $event))\n                }, null, 512), [\n                  [_vModelText, _unref(v$).latitude.$model]\n                ]),\n                (_unref(v$).latitude.$dirty && _unref(v$).latitude.$invalid)\n                  ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, _toDisplayString(_unref(v$).latitude.$errors[0].$message), 1))\n                  : _createCommentVNode(\"\", true)\n              ]),\n              _createElementVNode(\"div\", _hoisted_8, [\n                _cache[40] || (_cache[40] = _createElementVNode(\"label\", { class: \"fieldTitle\" }, \"Longitude/°\", -1)),\n                _withDirectives(_createElementVNode(\"input\", {\n                  class: \"small_input\",\n                  \"onUpdate:modelValue\": _cache[3] || (_cache[3] = ($event: any) => ((_unref(v$).longitude.$model) = $event))\n                }, null, 512), [\n                  [_vModelText, _unref(v$).longitude.$model]\n                ]),\n                (_unref(v$).longitude.$dirty &&_unref(v$).longitude.$invalid)\n                  ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, _toDisplayString(_unref(v$).longitude.$errors[0].$message), 1))\n                  : _createCommentVNode(\"\", true)\n              ]),\n              _createElementVNode(\"div\", _hoisted_10, [\n                _cache[41] || (_cache[41] = _createElementVNode(\"label\", { class: \"fieldTitle\" }, \"Time Zone/±UTC\", -1)),\n                _withDirectives(_createElementVNode(\"input\", {\n                  class: \"small_input\",\n                  \"onUpdate:modelValue\": _cache[4] || (_cache[4] = ($event: any) => ((_unref(v$).timeZone.$model) = $event))\n                }, null, 512), [\n                  [_vModelText, _unref(v$).timeZone.$model]\n                ]),\n                (_unref(v$).timeZone.$dirty && _unref(v$).timeZone.$invalid)\n                  ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, _toDisplayString(_unref(v$).timeZone.$errors[0].$message), 1))\n                  : _createCommentVNode(\"\", true)\n              ])\n            ]),\n            _createElementVNode(\"div\", _hoisted_12, [\n              _withDirectives(_createElementVNode(\"input\", {\n                style: {\"grid-row\":\"1\",\"grid-column\":\"1\",\"margin-right\":\"10px\",\"height\":\"100%\",\"margin-top\":\"0px\",\"margin-bottom\":\"0px\"},\n                type: \"range\",\n                min: \"-90\",\n                max: \"90\",\n                step: \"-0.1\",\n                class: \"slider\",\n                orient: \"vertical\",\n                \"onUpdate:modelValue\": _cache[5] || (_cache[5] = ($event: any) => ((_unref(v$).latitude.$model) = $event))\n              }, null, 512), [\n                [_vModelText, _unref(v$).latitude.$model]\n              ]),\n              _createElementVNode(\"div\", _hoisted_13, [\n                _createElementVNode(\"img\", {\n                  src: _imports_1,\n                  id: \"mapImage\",\n                  alt: \"An outline world map, on which the user can click to set the latitude and longitude.\",\n                  style: {\"grid-row\":\"1\",\"grid-column\":\"2\",\"object-fit\":\"contain\",\"display\":\"block\",\"margin\":\"0px\"},\n                  draggable: \"false\",\n                  onMousemove: mapImageMouseMove,\n                  onMousedown: mapImageStartClicking,\n                  onClick: mapImageClick,\n                  ref_key: \"mapImage\",\n                  ref: mapImage\n                }, null, 544),\n                _createElementVNode(\"div\", {\n                  id: \"markerPoint\",\n                  style: _normalizeStyle(`top:${(90 - _unref(latitude)) * 100 / 180}%; left:${(_unref(longitude)+180) * 100 / 360}%`)\n                }, null, 4)\n              ]),\n              _withDirectives(_createElementVNode(\"input\", {\n                style: {\"grid-row\":\"2\",\"grid-column\":\"2\",\"margin-top\":\"10px\",\"margin-left\":\"0px\",\"margin-right\":\"0px\"},\n                type: \"range\",\n                min: \"-180\",\n                max: \"180\",\n                step: \"1\",\n                class: \"slider\",\n                \"onUpdate:modelValue\": _cache[6] || (_cache[6] = ($event: any) => ((_unref(v$).longitude.$model) = $event))\n              }, null, 512), [\n                [_vModelText, _unref(v$).longitude.$model]\n              ])\n            ])\n          ]),\n          _createElementVNode(\"div\", _hoisted_14, [\n            _withDirectives(_createElementVNode(\"input\", {\n              type: \"checkbox\",\n              id: \"autoSelectTimeZone\",\n              \"onUpdate:modelValue\": _cache[7] || (_cache[7] = ($event: any) => (_isRef(autoSelectTimeZone) ? (autoSelectTimeZone).value = $event : autoSelectTimeZone = $event)),\n              style: {\"margin-right\":\"10px\",\"display\":\"inline\"}\n            }, null, 512), [\n              [_vModelCheckbox, _unref(autoSelectTimeZone)]\n            ]),\n            _cache[42] || (_cache[42] = _createElementVNode(\"label\", {\n              for: \"autoSelectTimeZone\",\n              class: \"fieldOption\"\n            }, \"Automatically set time zone\", -1))\n          ]),\n          _cache[57] || (_cache[57] = _createElementVNode(\"br\", null, null, -1)),\n          _cache[58] || (_cache[58] = _createElementVNode(\"h2\", null, \"Sundial Settings\", -1)),\n          _createElementVNode(\"div\", _hoisted_15, [\n            _createElementVNode(\"div\", _hoisted_16, [\n              _cache[44] || (_cache[44] = _createElementVNode(\"label\", {\n                for: \"dialAndGnomon\",\n                style: {\"margin-right\":\"10px\"}\n              }, [\n                _createElementVNode(\"img\", {\n                  src: _imports_2,\n                  style: {\"max-width\":\"50px\"},\n                  alt: \"Traditional sundial icon\"\n                })\n              ], -1)),\n              _createElementVNode(\"div\", null, [\n                _withDirectives(_createElementVNode(\"input\", {\n                  type: \"radio\",\n                  id: \"dialAndGnomon\",\n                  value: \"dialAndGnomon\",\n                  \"onUpdate:modelValue\": _cache[8] || (_cache[8] = ($event: any) => (_isRef(sundialType) ? (sundialType).value = $event : sundialType = $event))\n                }, null, 512), [\n                  [_vModelRadio, _unref(sundialType)]\n                ]),\n                _cache[43] || (_cache[43] = _createElementVNode(\"label\", {\n                  for: \"dialAndGnomon\",\n                  class: \"fieldOption\"\n                }, \" Traditional sundial \", -1))\n              ])\n            ]),\n            _createElementVNode(\"div\", _hoisted_17, [\n              _cache[46] || (_cache[46] = _createElementVNode(\"label\", {\n                for: \"pointSundial\",\n                style: {\"margin-right\":\"10px\"}\n              }, [\n                _createElementVNode(\"img\", {\n                  src: _imports_3,\n                  style: {\"max-width\":\"50px\"},\n                  alt: \"Point shadow trace icon\"\n                })\n              ], -1)),\n              _createElementVNode(\"div\", null, [\n                _withDirectives(_createElementVNode(\"input\", {\n                  type: \"radio\",\n                  id: \"pointSundial\",\n                  value: \"pointSundial\",\n                  \"onUpdate:modelValue\": _cache[9] || (_cache[9] = ($event: any) => (_isRef(sundialType) ? (sundialType).value = $event : sundialType = $event))\n                }, null, 512), [\n                  [_vModelRadio, _unref(sundialType)]\n                ]),\n                _cache[45] || (_cache[45] = _createElementVNode(\"label\", {\n                  for: \"pointSundial\",\n                  class: \"fieldOption\"\n                }, \" Point shadow trace \", -1))\n              ])\n            ])\n          ]),\n          _cache[59] || (_cache[59] = _createElementVNode(\"br\", null, null, -1)),\n          _createElementVNode(\"div\", _hoisted_18, [\n            _createElementVNode(\"div\", _hoisted_19, [\n              _cache[47] || (_cache[47] = _createElementVNode(\"label\", { class: \"fieldTitle\" }, \"Slant/°\", -1)),\n              _withDirectives(_createElementVNode(\"input\", {\n                class: \"small_input\",\n                \"onUpdate:modelValue\": _cache[10] || (_cache[10] = ($event: any) => ((_unref(v$).slant.$model) = $event))\n              }, null, 512), [\n                [_vModelText, _unref(v$).slant.$model]\n              ]),\n              (_unref(v$).slant.$dirty && _unref(v$).slant.$invalid)\n                ? (_openBlock(), _createElementBlock(\"div\", _hoisted_20, _toDisplayString(_unref(v$).slant.$errors[0].$message), 1))\n                : _createCommentVNode(\"\", true),\n              _withDirectives(_createElementVNode(\"input\", {\n                type: \"range\",\n                min: -180,\n                max: 180,\n                step: \"1\",\n                class: \"slider\",\n                \"onUpdate:modelValue\": _cache[11] || (_cache[11] = ($event: any) => ((_unref(v$).slant.$model) = $event))\n              }, null, 512), [\n                [_vModelText, _unref(v$).slant.$model]\n              ])\n            ]),\n            _createElementVNode(\"div\", _hoisted_21, [\n              _cache[48] || (_cache[48] = _createElementVNode(\"label\", { class: \"fieldTitle\" }, \"Rotation/°\", -1)),\n              _withDirectives(_createElementVNode(\"input\", {\n                class: \"small_input\",\n                \"onUpdate:modelValue\": _cache[12] || (_cache[12] = ($event: any) => ((_unref(v$).rotation.$model) = $event))\n              }, null, 512), [\n                [_vModelText, _unref(v$).rotation.$model]\n              ]),\n              (_unref(v$).rotation.$dirty && _unref(v$).rotation.$invalid)\n                ? (_openBlock(), _createElementBlock(\"div\", _hoisted_22, _toDisplayString(_unref(v$).rotation.$errors[0].$message), 1))\n                : _createCommentVNode(\"\", true),\n              _withDirectives(_createElementVNode(\"input\", {\n                type: \"range\",\n                min: -180,\n                max: 180,\n                step: \"1\",\n                class: \"slider\",\n                \"onUpdate:modelValue\": _cache[13] || (_cache[13] = ($event: any) => ((_unref(v$).rotation.$model) = $event))\n              }, null, 512), [\n                [_vModelText, _unref(v$).rotation.$model]\n              ])\n            ]),\n            _createElementVNode(\"div\", _hoisted_23, [\n              _createElementVNode(\"label\", _hoisted_24, _toDisplayString(_unref(sundialType) == \"dialAndGnomon\" ? \"Gnomon\" : \"Nodus\") + \" height\", 1),\n              _withDirectives(_createElementVNode(\"input\", {\n                class: \"small_input\",\n                \"onUpdate:modelValue\": _cache[14] || (_cache[14] = ($event: any) => ((_unref(v$).gnomonHeight.$model) = $event))\n              }, null, 512), [\n                [_vModelText, _unref(v$).gnomonHeight.$model]\n              ]),\n              (_unref(v$).gnomonHeight.$dirty && _unref(v$).gnomonHeight.$invalid)\n                ? (_openBlock(), _createElementBlock(\"div\", _hoisted_25, _toDisplayString(_unref(v$).gnomonHeight.$errors[0].$message), 1))\n                : _createCommentVNode(\"\", true),\n              _withDirectives(_createElementVNode(\"input\", {\n                type: \"range\",\n                min: 0.5,\n                max: 3,\n                step: \"0.05\",\n                class: \"slider\",\n                \"onUpdate:modelValue\": _cache[15] || (_cache[15] = ($event: any) => ((_unref(v$).gnomonHeight.$model) = $event))\n              }, null, 512), [\n                [_vModelText, _unref(v$).gnomonHeight.$model]\n              ])\n            ])\n          ]),\n          _createElementVNode(\"div\", _hoisted_26, [\n            _cache[51] || (_cache[51] = _createElementVNode(\"label\", { class: \"fieldTitle\" }, \"Hour lines\", -1)),\n            _createElementVNode(\"div\", _hoisted_27, [\n              _withDirectives(_createElementVNode(\"input\", {\n                type: \"radio\",\n                id: \"standardLines\",\n                value: \"standard\",\n                \"onUpdate:modelValue\": _cache[16] || (_cache[16] = ($event: any) => (_isRef(hourLineStyle) ? (hourLineStyle).value = $event : hourLineStyle = $event))\n              }, null, 512), [\n                [_vModelRadio, _unref(hourLineStyle)]\n              ]),\n              _cache[49] || (_cache[49] = _createElementVNode(\"label\", {\n                for: \"standardLines\",\n                class: \"fieldOption\"\n              }, \"Adjusted for time zone and longitude\", -1))\n            ]),\n            _createElementVNode(\"div\", _hoisted_28, [\n              _withDirectives(_createElementVNode(\"input\", {\n                type: \"radio\",\n                id: \"solarLines\",\n                value: \"solar\",\n                \"onUpdate:modelValue\": _cache[17] || (_cache[17] = ($event: any) => (_isRef(hourLineStyle) ? (hourLineStyle).value = $event : hourLineStyle = $event))\n              }, null, 512), [\n                [_vModelRadio, _unref(hourLineStyle)]\n              ]),\n              _cache[50] || (_cache[50] = _createElementVNode(\"label\", {\n                for: \"solarLines\",\n                class: \"fieldOption\"\n              }, \"Solar time\", -1))\n            ])\n          ]),\n          _cache[60] || (_cache[60] = _createElementVNode(\"br\", null, null, -1)),\n          _cache[61] || (_cache[61] = _createElementVNode(\"h2\", null, \"Misc\", -1)),\n          _createElementVNode(\"div\", _hoisted_29, [\n            _withDirectives(_createElementVNode(\"input\", {\n              type: \"checkbox\",\n              id: \"sunRaysPassThroughEarth\",\n              \"onUpdate:modelValue\": _cache[18] || (_cache[18] = ($event: any) => (_isRef(sunRaysPassThroughEarth) ? (sunRaysPassThroughEarth).value = $event : sunRaysPassThroughEarth = $event))\n            }, null, 512), [\n              [_vModelCheckbox, _unref(sunRaysPassThroughEarth)]\n            ]),\n            _cache[52] || (_cache[52] = _createElementVNode(\"label\", {\n              for: \"sunRaysPassThroughEarth\",\n              class: \"fieldOption\"\n            }, \"Light can reach the sundial at night\", -1))\n          ]),\n          _createElementVNode(\"div\", _hoisted_30, [\n            _withDirectives(_createElementVNode(\"input\", {\n              type: \"checkbox\",\n              id: \"alwaysDaySkyColor\",\n              \"onUpdate:modelValue\": _cache[19] || (_cache[19] = ($event: any) => (_isRef(alwaysDaySkyColor) ? (alwaysDaySkyColor).value = $event : alwaysDaySkyColor = $event))\n            }, null, 512), [\n              [_vModelCheckbox, _unref(alwaysDaySkyColor)]\n            ]),\n            _cache[53] || (_cache[53] = _createElementVNode(\"label\", {\n              for: \"alwaysDaySkyColor\",\n              class: \"fieldOption\"\n            }, \"Disable night-time dark sky color\", -1))\n          ]),\n          _cache[62] || (_cache[62] = _createElementVNode(\"br\", null, null, -1)),\n          _cache[63] || (_cache[63] = _createElementVNode(\"footer\", null, [\n            _createElementVNode(\"p\", { id: \"copyrightText\" }, [\n              _createTextVNode(\"© Thomas Peach 2025. \"),\n              _createElementVNode(\"a\", {\n                class: \"sidebar_link\",\n                href: \"mailto:thomas.peach546@gmail.com\"\n              }, \"Contact\")\n            ])\n          ], -1))\n        ])\n      ], 512),\n      _createElementVNode(\"div\", _hoisted_31, [\n        _createElementVNode(\"div\", _hoisted_32, [\n          _createVNode(_unref(TresCanvas), { \"render-mode\": \"on-demand\" }, {\n            default: _withCtx(() => [\n              _createVNode(_component_TresAmbientLight, {\n                color: \"#FFFFFF\",\n                intensity: 2\n              }),\n              _createVNode(_component_TresOrthographicCamera, {\n                position: compassCameraPosition,\n                lookAt: compassCameraLookAt,\n                zoom: 15\n              }),\n              _createVNode(CompassObject, { rotation: compassRotation.value }, null, 8, [\"rotation\"])\n            ]),\n            _: 1\n          }),\n          _cache[64] || (_cache[64] = _createElementVNode(\"div\", {\n            style: {\"position\":\"absolute\",\"width\":\"100%\",\"height\":\"100%\",\"top\":\"0\",\"left\":\"0\"},\n            title: \"North\"\n          }, null, -1))\n        ]),\n        _createElementVNode(\"button\", {\n          class: \"zoomControl\",\n          onKeydown: _cache[20] || (_cache[20] = _withKeys(() => { _isRef(currentZoomPerSecond) //@ts-ignore\n ? currentZoomPerSecond.value = 1 / zoomSpeed : currentZoomPerSecond = 1 / zoomSpeed }, [\"enter\"])),\n          onKeyup: _cache[21] || (_cache[21] = _withKeys(() => { _isRef(currentZoomPerSecond) //@ts-ignore\n ? currentZoomPerSecond.value = 1 : currentZoomPerSecond = 1 }, [\"enter\"])),\n          onMousedown: _cache[22] || (_cache[22] = () => { _isRef(currentZoomPerSecond) //@ts-ignore\n ? currentZoomPerSecond.value = 1 / zoomSpeed : currentZoomPerSecond = 1 / zoomSpeed }),\n          onMouseup: _cache[23] || (_cache[23] = () => { _isRef(currentZoomPerSecond) //@ts-ignore\n ? currentZoomPerSecond.value = 1 : currentZoomPerSecond = 1 }),\n          onPointerleave: _cache[24] || (_cache[24] = () => { _isRef(currentZoomPerSecond) //@ts-ignore\n ? currentZoomPerSecond.value = 1 : currentZoomPerSecond = 1 }),\n          onTouchstart: _cache[25] || (_cache[25] = () => { _isRef(currentZoomPerSecond) //@ts-ignore\n ? currentZoomPerSecond.value = 1 / zoomSpeed : currentZoomPerSecond = 1 / zoomSpeed }),\n          onTouchend: _cache[26] || (_cache[26] = () => { _isRef(currentZoomPerSecond) //@ts-ignore\n ? currentZoomPerSecond.value = 1 : currentZoomPerSecond = 1 })\n        }, \" + \", 32),\n        _createElementVNode(\"button\", {\n          class: \"zoomControl\",\n          onKeydown: _cache[27] || (_cache[27] = _withKeys(() => { _isRef(currentZoomPerSecond) //@ts-ignore\n ? currentZoomPerSecond.value = zoomSpeed : currentZoomPerSecond = zoomSpeed }, [\"enter\"])),\n          onKeyup: _cache[28] || (_cache[28] = _withKeys(() => { _isRef(currentZoomPerSecond) //@ts-ignore\n ? currentZoomPerSecond.value = 1 : currentZoomPerSecond = 1 }, [\"enter\"])),\n          onMousedown: _cache[29] || (_cache[29] = () => { _isRef(currentZoomPerSecond) //@ts-ignore\n ? currentZoomPerSecond.value = zoomSpeed : currentZoomPerSecond = zoomSpeed }),\n          onMouseup: _cache[30] || (_cache[30] = () => { _isRef(currentZoomPerSecond) //@ts-ignore\n ? currentZoomPerSecond.value = 1 : currentZoomPerSecond = 1 }),\n          onPointerleave: _cache[31] || (_cache[31] = () => { _isRef(currentZoomPerSecond) //@ts-ignore\n ? currentZoomPerSecond.value = 1 : currentZoomPerSecond = 1 }),\n          onTouchstart: _cache[32] || (_cache[32] = () => { _isRef(currentZoomPerSecond) //@ts-ignore\n ? currentZoomPerSecond.value = zoomSpeed : currentZoomPerSecond = zoomSpeed }),\n          onTouchend: _cache[33] || (_cache[33] = () => { _isRef(currentZoomPerSecond) //@ts-ignore\n ? currentZoomPerSecond.value = 1 : currentZoomPerSecond = 1 })\n        }, \" - \", 32)\n      ]),\n      _createElementVNode(\"div\", _hoisted_33, [\n        _createElementVNode(\"div\", _hoisted_34, [\n          _withDirectives(_createElementVNode(\"div\", {\n            class: \"time_display\",\n            onClick: showTimeEntryBox,\n            onKeydown: _withKeys(showTimeEntryBox, [\"space\"]),\n            tabindex: \"0\"\n          }, _toDisplayString(timeText.value), 545), [\n            [_vShow, !_unref(isEditingTime)]\n          ]),\n          _withDirectives(_createElementVNode(\"input\", {\n            ref_key: \"timeEntryBox\",\n            ref: timeEntryBox,\n            class: \"timeEntryBox\",\n            onBlur: hideTimeEntryBox,\n            onKeydown: [\n              _withKeys(hideTimeEntryBox, [\"enter\"]),\n              _withKeys(hideTimeEntryBox, [\"esc\"])\n            ],\n            onInput: updateTimeFromEntryBox,\n            \"onUpdate:modelValue\": _cache[34] || (_cache[34] = ($event: any) => (_isRef(timeEntryValue) ? (timeEntryValue).value = $event : timeEntryValue = $event))\n          }, null, 544), [\n            [_vShow, _unref(isEditingTime)],\n            [_vModelText, _unref(timeEntryValue)]\n          ]),\n          _withDirectives(_createElementVNode(\"div\", _hoisted_35, [\n            _cache[65] || (_cache[65] = _createElementVNode(\"div\", { class: \"subtitle\" }, \"local standard time\", -1)),\n            _createElementVNode(\"div\", _hoisted_36, \"(UTC \" + _toDisplayString(timeZoneText.value) + \") \" + _toDisplayString(isDaytime.value ? \"☀️\" : \"🌙\"), 1)\n          ], 512), [\n            [_vShow, !_unref(isEditingTime)]\n          ])\n        ]),\n        _createElementVNode(\"div\", _hoisted_37, _toDisplayString(meanSolarTimeText.value) + \" mean solar time\", 1),\n        _createElementVNode(\"div\", _hoisted_38, _toDisplayString(apparentSolarTimeText.value) + \" apparent solar time\", 1),\n        _createElementVNode(\"div\", _hoisted_39, [\n          _withDirectives(_createElementVNode(\"input\", {\n            type: \"range\",\n            min: \"0\",\n            max: \"1440\",\n            step: \"10\",\n            class: \"slider\",\n            id: \"time\",\n            \"onUpdate:modelValue\": _cache[35] || (_cache[35] = ($event: any) => (_isRef(localTime) ? (localTime).value = $event : localTime = $event))\n          }, null, 512), [\n            [\n              _vModelText,\n              _unref(localTime),\n              void 0,\n              { number: true }\n            ]\n          ]),\n          _createElementVNode(\"button\", {\n            type: \"button\",\n            onClick: timeAdvanceButtonClicked,\n            id: \"time_advance_button\",\n            title: \"Auto-advance time\"\n          }, _toDisplayString(timeAdvanceButtonText.value), 1)\n        ]),\n        _createVNode(_unref(Popper), {\n          arrow: \"\",\n          placement: \"left\",\n          \"disable-click-away\": \"\",\n          show: _unref(showThreeTimesExplanation)\n        }, {\n          content: _withCtx(() => [\n            _createElementVNode(\"div\", _hoisted_40, [\n              _createElementVNode(\"div\", _hoisted_41, [\n                _createVNode(ThreeTimesExplanation)\n              ]),\n              _createElementVNode(\"button\", {\n                class: \"v-step__button\",\n                onClick: _cache[36] || (_cache[36] = () => setShowThreeTimesExplanation(false))\n              }, \"Close\")\n            ])\n          ]),\n          default: _withCtx(() => [\n            _createElementVNode(\"a\", {\n              class: \"overlay_link\",\n              href: \"javascript:void(0)\",\n              onClick: _cache[37] || (_cache[37] = () => setShowThreeTimesExplanation(!_unref(showThreeTimesExplanation)))\n            }, \"Why are there 3 times?\")\n          ]),\n          _: 1\n        }, 8, [\"show\"]),\n        _cache[66] || (_cache[66] = _createElementVNode(\"hr\", null, null, -1)),\n        _createElementVNode(\"div\", _hoisted_42, _toDisplayString(dateText.value), 1),\n        _withDirectives(_createElementVNode(\"input\", {\n          type: \"range\",\n          min: \"0\",\n          max: \"364\",\n          step: \"1\",\n          class: \"slider\",\n          id: \"day\",\n          \"onUpdate:modelValue\": _cache[38] || (_cache[38] = ($event: any) => (_isRef(day) ? (day).value = $event : day = $event))\n        }, null, 512), [\n          [\n            _vModelText,\n            _unref(day),\n            void 0,\n            { number: true }\n          ]\n        ])\n      ])\n    ])\n  ], 64))\n}\n}\n\n})","<!-- Main file, controlling the interface and calculations. -->\n\n<script setup lang=\"ts\">\n\n    import { TresCanvas } from '@tresjs/core';\n    import { onClickOutside } from '@vueuse/core'\n    import interpolate from \"color-interpolate\";\n    import { computed, getCurrentInstance, nextTick, onMounted, reactive, ref, watch } from 'vue'\n    import SunObject from './components/SunObject.vue';\n    import { decimal, helpers, maxValue, minValue, required } from '@vuelidate/validators';\n    import useVuelidate from '@vuelidate/core';\n    import { BasicShadowMap, Vector3, Euler } from 'three';\n    import { dateToString, horizontalToActualCoords, calculateSunHorizontalCoords, timeToString, timeZoneToString, longitudeToTimeZone, stringToTime } from '@/calculations';\n    import DialAndGnomonSundial from './components/DialAndGnomonSundial.vue';\n    import CameraHelper from './components/CameraHelper.vue';\n    import RendererHelper from './components/RendererHelper.vue';\n    import ThreeTimesExplanation from './components/ThreeTimesExplanation.vue';\n    import { tourSteps as walkthroughSteps } from './walkthrough';\n    import Popper from 'vue3-popper';\n    import PointSundial from './components/PointSundial.vue';\n    import CompassObject from \"./components/CompassObject.vue\"\n    \n    /*\n     * Config\n     */\n    const sundialOrigin = new Vector3(0, -0.5, 0);\n    const sundialRadius = 5;\n    const projectionRadius = 4;\n    const numeralDistanceFromSundialOrigin = 4;\n    const zoomSpeed = 3;\n\n    \n    /*\n     * Independent variables \n     */\n    /** 0 to 24*60 */\n    let localTime = ref<number>(12 * 60);\n    /** 0 to 364 (integer) */\n    let day = ref<number>(162);\n    let longitude = ref<number>(0);\n    let latitude = ref<number>(0);\n    let autoSelectTimeZone = ref(true);\n    /** +/- minutes UTC */\n    let timeZone = ref<number>(0);\n    // let numerals = ref<\"roman\"|\"arabic\">(\"arabic\");\n    let sunRaysPassThroughEarth = ref(false);\n    let hourLineStyle = ref<\"solar\"|\"standard\">(\"standard\");\n    let sundialType = ref<\"dialAndGnomon\" | \"pointSundial\">(\"dialAndGnomon\")\n    let slant = ref<number>(0);\n    let rotation = ref<number>(0);\n    /**Camera position multiplier per second. < 1 zoom in, > 1 zoom out */\n    let currentZoomPerSecond = ref<number>(1);\n    // slant + rotation.\n    \n    let gnomonHeight = ref<number>(1)\n    let timeAdvanceSpeed = ref<number>(0)\n    let alwaysDaySkyColor = ref<boolean>(false);\n\n    /**\n     * readonly variables\n     */\n    let cameraPosition = ref<Vector3>()\n\n    /*\n     * Allow the time to be input manually.\n     */\n    let isEditingTime = ref<boolean>(false);\n    /** What's in the time manual entry box */\n    let timeEntryValue = ref<string>(\"\");\n    const timeEntryBox = ref<HTMLInputElement | null>(null);   \n    function showTimeEntryBox() {\n        if (isEditingTime.value == false) {\n            isEditingTime.value = true;\n            timeEntryValue.value = timeToString(localTime.value);\n\n            nextTick(() => timeEntryBox.value?.focus());\n            \n        }\n    }\n    function updateTimeFromEntryBox() {\n        if (!timeEntryBox.value) return;\n\n        const newTime = stringToTime(timeEntryBox.value.value);\n        if (isNaN(newTime)) return;\n\n        localTime.value = newTime;\n    }\n    function hideTimeEntryBox() {\n        if (isEditingTime.value == true) {\n            isEditingTime.value = false\n            \n            updateTimeFromEntryBox()\n        }\n    }\n    onClickOutside(timeEntryBox, hideTimeEntryBox)\n\n    // make the 3 times explanation popup disappear when escape key pressed\n    onMounted(() => {\n        document.addEventListener(\"keydown\", (event) => {\n            if (event.key == \"Escape\") {\n                setShowThreeTimesExplanation(false)\n            }\n        })\n    })\n\n\n    /*\n     * Sidebar form validation \n     */\n    const formDefaults = {\n        latitude:\"45.00\",\n        longitude:\"0.00\",\n        timeZone:\"+0:00\",\n        slant:\"0\",\n        rotation:\"0\",\n        gnomonHeight:\"1\"\n    }\n\n    /** used to parse time zone user input*/\n    const timeZoneRegex = /^\\s*([+-±]?)\\s*((?:0?[0-9])|1[0-9])(?::((?:0[0-9])|[1-5][0-9]))?\\s*$/;\n\n    let formState = reactive(formDefaults);\n    const formRules = computed<Record<keyof typeof formDefaults, object>>(() => ({\n        latitude: {\n            required,\n            decimal,\n            minValue:minValue(-90),\n            maxValue:maxValue(90)\n        },\n        longitude: {\n            required,\n            decimal,\n            minValue:minValue(-180),\n            maxValue:maxValue(180)\n        },\n        timeZone: {\n            isATimeZone: helpers.withMessage(\"Your time zone should look like +/-HH(:MM)\", helpers.regex(timeZoneRegex))\n        },\n        slant: {\n            required,\n            decimal,\n            minValue:minValue(-180),\n            maxValue:maxValue(180)\n        },\n        rotation: {\n            required,\n            decimal,\n            minValue:minValue(-180),\n            maxValue:maxValue(180)\n        },\n        gnomonHeight: {\n            required,\n            decimal,\n            minValue:minValue(0.5),\n            maxValue:maxValue(3)\n        }\n    }))\n    const v$ = useVuelidate(formRules, formState)\n\n    // parse and updadte whenever valid entries are changed in the form.\n    watch(() => formState.longitude, newVal => {\n        if (!v$.value.longitude.$invalid) {\n            longitude.value = Number.parseFloat(newVal);\n            // set the time zone as well.\n            if (autoSelectTimeZone.value) {\n                formState.timeZone = timeZoneToString(longitudeToTimeZone(longitude.value));\n            }\n        }\n    }, { immediate: true })\n    watch(() => formState.latitude, newVal => {\n        if (!v$.value.latitude.$invalid) latitude.value = Number.parseFloat(newVal);\n    }, {immediate:true})\n    watch(() => formState.timeZone, newVal => {\n        const result = newVal.match(timeZoneRegex);\n        if (result) {\n            const newValInt = (result[1] == \"-\" ? -1 : 1) * (Number.parseInt(result[2]) * 60 + Number.parseInt(result[3] ?? 0));\n            // change the local time so that the global time remains consistent\n            localTime.value = (((localTime.value + newValInt - timeZone.value) % 1440) + 1440) % 1440\n            timeZone.value = newValInt;\n        }\n    }, {immediate:true})\n    watch(() => formState.slant, newVal => {\n        if (!v$.value.slant.$invalid) slant.value = Number.parseFloat(newVal) * Math.PI/180;\n    }, {immediate: true})\n    watch(() => formState.rotation, newVal => {\n        if (!v$.value.rotation.$invalid) rotation.value = -Number.parseFloat(newVal) * Math.PI / 180;\n    }, { immediate: true })\n    watch(() => formState.gnomonHeight, newVal => {\n        if (!v$.value.gnomonHeight.$invalid) gnomonHeight.value = Number.parseFloat(newVal);\n    }, { immediate: true })\n\n    /*\n    * Help popups\n    */\n    const instance = getCurrentInstance();\n    let showThreeTimesExplanation = ref(false);\n    function toggleWalkthrough() {\n        const wt = instance?.appContext.config.globalProperties.$tours['walkthrough'];\n        if (!wt) return;\n        if (wt.isRunning.value) {\n            wt.stop()\n        } else {\n            hideAllPoppers()\n            wt.start()\n        }\n    }\n    function hideAllPoppers() {\n        instance?.appContext.config.globalProperties.$tours['walkthrough'].finish()\n        showThreeTimesExplanation.value = false;\n    }\n    function setShowThreeTimesExplanation(show: boolean) {\n        if (show) {\n            hideAllPoppers()\n        }\n        showThreeTimesExplanation.value = show\n    }\n\n    /**\n     * Set the latitude and longitude when the user clicks on the map.\n     */ \n    let mapImage = ref<HTMLImageElement>();\n    let mapImageIsBeingClicked = ref(false);\n    function setLatLngFromMap(e:MouseEvent) {\n        if (mapImage.value) {\n            const longitude = e.offsetX / mapImage.value.width * 360 - 180;\n            const latitude = 90 - e.offsetY / mapImage.value.height * 180;\n            formState.longitude = longitude.toFixed(1);\n            formState.latitude = latitude.toFixed(1);\n        }\n    }\n    function mapImageMouseMove(e:MouseEvent) {\n        if (mapImageIsBeingClicked.value) setLatLngFromMap(e)\n    }\n    function mapImageStartClicking() {\n        mapImageIsBeingClicked.value = true;\n    }\n    function mapImageClick(e:MouseEvent) {\n        setLatLngFromMap(e)\n    }\n\n    // global mouse released fn\n    onMounted(() => {\n        window.addEventListener(\"mouseup\", () => {\n            mapImageIsBeingClicked.value = false;\n        })\n    })\n\n    // get the dimensions of the sidebar for layout\n    let sidebarDims = ref({ clientWidth: 0, clientHeight: 0 });\n    const sidebar = ref<HTMLDivElement>();\n    const sidebarResizeObserver = new ResizeObserver(() => {\n        const clientWidth = sidebar.value?.clientWidth ?? 0;\n        const clientHeight = sidebar.value?.clientHeight ?? 0;\n        sidebarDims.value = { clientWidth, clientHeight }\n    })\n    onMounted(() => {\n        sidebarResizeObserver.observe(sidebar.value as HTMLDivElement);\n    })\n\n\n    // set the time zone as the user clicks the checkbox\n    watch(() => autoSelectTimeZone.value, value => {\n        if (value) {\n            formState.timeZone = timeZoneToString(longitudeToTimeZone(longitude.value));\n        }\n    })\n\n    function timeAdvanceButtonClicked() {\n        if (timeAdvanceSpeed.value == 0) {\n            timeAdvanceSpeed.value = 1\n        } else {\n            timeAdvanceSpeed.value *= 4\n            if (timeAdvanceSpeed.value > 16) {\n                timeAdvanceSpeed.value = 0\n            }\n        }\n        // timeAdvanceSpeed.value = (timeAdvanceSpeed.value + 1) % 4\n    }\n    function advanceTime(mins:number) {\n        localTime.value += mins\n        if (localTime.value >= 1440) {\n            localTime.value %= 1440\n            day.value = (day.value + 1) % 365\n        }\n    }\n\n    /**\n     * computed values\n     */\n    const sundialRotation = computed(() => new Euler(Math.abs(slant.value), rotation.value + (slant.value < 0 ? Math.PI : 0), 0, \"YXZ\"));\n    /** relative to sundial origin and rotation */\n    const gnomonRelativePosition = computed(() => new Vector3(0, gnomonHeight.value, 0));\n    const nodusRelativePosition = computed(() => new Vector3(0, gnomonHeight.value, 0));\n    /** convert local time to UTC +0 */\n    const time = computed(() => (((localTime.value - timeZone.value) % 1440) + 1440) % 1440)\n    const sunHorizontalCoords = computed(() => calculateSunHorizontalCoords(day.value, time.value, latitude.value, longitude.value));\n    const sunCoords = computed(() => horizontalToActualCoords(sunHorizontalCoords.value.azimuth, sunHorizontalCoords.value.altitude))\n    // let gnomonRotation = computed(() => (90-latitude.value)*Math.PI/180);\n    const isDaytime = computed(() => sunHorizontalCoords.value.altitude >= 0);\n    const statusTextColor = computed(() => isDaytime.value || alwaysDaySkyColor.value ? \"black\" : \"white\")\n    const timeText = computed(() => timeToString(localTime.value))\n    const dateText = computed(() => dateToString(day.value));\n    const meanSolarTime = computed(() => time.value + ((longitude.value/360)*24*60));\n    const meanSolarTimeText = computed(() => timeToString(meanSolarTime.value));\n    const apparentSolarTime = computed(() => {\n        // use the already-computed sun position. This isn't actualy dependent on the latitude irl. Just seemed the easiest way to do it here.\n        // to calculate this, rotate sun position (90°-latitude) anticlockwise about x axis (west to east axis). Then work out projected angle in the x/z (horizontal) plane.\n        const latRad = latitude.value * Math.PI/180;\n        const timeHours = Math.atan2(sunCoords.value.y * Math.cos(latRad) + sunCoords.value.z * Math.sin(latRad), sunCoords.value.x) * 12 / Math.PI + 6;\n        const timeMins = (((timeHours % 24) + 24) % 24) * 60;\n        return timeMins;\n    })\n    const apparentSolarTimeText = computed(() => timeToString(apparentSolarTime.value))\n    const timeZoneText = computed(() => timeZoneToString(timeZone.value))\n    const sunlightIntensity = computed(() => {\n        // a very unscientific way of calculating the apparent sunlight intensity.\n        // have a little bit of sunlight when the sun is below the horizon.\n        if (sunHorizontalCoords.value.altitude > 0.1) return 1;\n        if (sunHorizontalCoords.value.altitude > -0.1) return (sunHorizontalCoords.value.altitude + 0.1)/0.2;\n        return 0;\n    })\n    const skyColor = computed(() => {\n        if (alwaysDaySkyColor.value) {\n            return \"#87CEEB\"\n        }\n        // make the sky look nice innit\n        return interpolate([\"#02407a\", \"#87CEEB\"])(sunlightIntensity.value);\n    })\n    const compassRotation = computed(() => {\n\n        if (!cameraPosition.value) {\n            return new Euler()\n        }\n\n        const cameraDistance = cameraPosition.value.distanceTo(new Vector3(0,0,0))\n        const altitude = Math.asin(cameraPosition.value.y/cameraDistance);\n        const azimouth = Math.atan2(cameraPosition.value.z, cameraPosition.value.x)\n        return new Euler(altitude - Math.PI / 2, azimouth - Math.PI/2, 0, 'XYZ')\n    })\n\n    const timeAdvanceButtonText = computed(() => {\n        if (timeAdvanceSpeed.value == 0) {\n            return \"▶\"\n        } else {\n            return timeAdvanceSpeed.value + \"x\"\n        }\n    })\n\n    // previously all this stuff was inlined in the template\n    // move all inline processing stuff in the <Tres...> tag props here because this is necessary to make tresjs render frames on demand\n    // I have done this with most of the 3d components as well\n    const showDialAndGnomonSundial = computed(() => sundialType.value === \"dialAndGnomon\")\n    const showPointSundial = computed(() => sundialType.value === \"pointSundial\")\n    const sunCoordsArray = computed<[number, number, number]>(() => [sunCoords.value.x, sunCoords.value.y, sunCoords.value.z])\n    const directionalLightIntensity = computed(() => sunRaysPassThroughEarth.value ? 1 : sunlightIntensity.value)\n    const cameraXOffset = computed(() => -(sidebarDims.value.clientWidth)/2)\n    const gridHelperArgs = [50, 50, '#AAAAAA', '#AAAAAA'] as [number, number, string, string]\n    const gridHelperPosition = [0, -8, 0] as [number,number, number]\n    const compassCameraPosition = [0, 10, 0] as [number, number, number]\n    const compassCameraLookAt = [0, 0, 0] as [number, number, number]\n\n</script>\n\n<template>\n\n    <v-tour name=\"walkthrough\" :steps=\"walkthroughSteps\" :options=\"{\n        labels: {\n            buttonSkip: 'Close',\n            buttonPrevious: 'Previous',\n            buttonNext: 'Next',\n            buttonStop: 'Finish'\n        }\n    }\" />\n\n    <!-- setting the canvas to window-size messes up the Line2 rendering for some reason. Instead, make it fill an entire screen div. -->\n    <div style=\"width:100%; height:100%; position: fixed; left:0; top:0\">\n        <TresCanvas :clear-color=\"skyColor\" shadows :shadowMapType=\"BasicShadowMap\" render-mode=\"on-demand\">\n\n            <TresPerspectiveCamera />\n            <DialAndGnomonSundial :show=\"showDialAndGnomonSundial\" :latitude=\"latitude\" :longitude=\"longitude\"\n                :origin=\"sundialOrigin\" :rotation=\"sundialRotation\" :gnomon-position=\"gnomonRelativePosition\"\n                :radius=\"sundialRadius\" :hourLineStyle=\"hourLineStyle\" :time-zone=\"timeZone\"\n                :numeralDistanceFromSundialOrigin=\"numeralDistanceFromSundialOrigin\" />\n\n            <PointSundial :show=\"showPointSundial\" :latitude=\"latitude\" :longitude=\"longitude\" :origin=\"sundialOrigin\"\n                :rotation=\"sundialRotation\" :gnomon-position=\"nodusRelativePosition\" :radius=\"projectionRadius\"\n                :hourLineStyle=\"hourLineStyle\" :time-zone=\"timeZone\" />\n\n            <SunObject :position=\"sunCoords\" />\n\n\n            <!-- directional light points at :target=\"[0,0,0]\" by default -->\n            <TresDirectionalLight :position=\"sunCoordsArray\" :intensity=\"directionalLightIntensity\"\n                :shadow-mapSize-width=\"2048\" :shadow-mapSize-height=\"2048\" cast-shadow />\n            <TresAmbientLight color=\"#AAAAAA\" />\n            <TresGridHelper :args=\"gridHelperArgs\" :position=\"gridHelperPosition\" />\n            <CameraHelper :x-offset=\"cameraXOffset\" :zoom-per-second=\"currentZoomPerSecond\"\n                @cameraPosChange=\"pos => cameraPosition = pos\" @on-advance-time=\"advanceTime\"\n                :time-advance-speed=\"timeAdvanceSpeed\" />\n            <RendererHelper />\n        </TresCanvas>\n    </div>\n\n    <div id=\"overlay\">\n\n        <div id=\"sidebar\" ref=\"sidebar\">\n            <div id=\"sidebarContent\">\n\n                <a class=\"sidebar_link\" @click=\"e => {e.preventDefault();toggleWalkthrough()}\"\n                    href=\"javascript:void(0)\">walkthrough</a>\n                ·\n                <a class=\"sidebar_link\" href=\"https://github.com/tpeach90/sundials/\" style=\"text-decoration: none\"\n                    target=\"_blank\" title=\"Source code on github.com\">\n                    <span style=\"text-decoration:underline\">code</span>\n                    <img src=\"./assets/github-mark-white.svg\" style=\"height:1em; margin-left: 0.2em;\"\n                        alt=\"GitHub logo\" />\n                </a>\n\n\n                <!-- Position -->\n                <h2>Coordinates</h2>\n                <div data-v-walkthrough=\"map\">\n                    <div class=\"horizontal_settings\">\n                        <div class=\"setting\">\n                            <label class=\"fieldTitle\">Latitude/°</label>\n                            <input class=\"small_input\" v-model=\"v$.latitude.$model\">\n                            <div class=\"error\" v-if=\"v$.latitude.$dirty && v$.latitude.$invalid\">{{\n                                v$.latitude.$errors[0].$message}}</div>\n                        </div>\n                        <div class=\"setting\">\n                            <label class=\"fieldTitle\">Longitude/°</label>\n                            <input class=\"small_input\" v-model=\"v$.longitude.$model\">\n                            <div class=\"error\" v-if=\"v$.longitude.$dirty &&v$.longitude.$invalid\">{{\n                                v$.longitude.$errors[0].$message}}</div>\n                        </div>\n                        <div class=\"setting\">\n                            <label class=\"fieldTitle\">Time Zone/±UTC</label>\n                            <input class=\"small_input\" v-model=\"v$.timeZone.$model\">\n                            <div class=\"error\" v-if=\"v$.timeZone.$dirty && v$.timeZone.$invalid\">{{\n                                v$.timeZone.$errors[0].$message }}</div>\n                        </div>\n                    </div>\n\n                    <!-- interactive location selector -->\n                    <div\n                        style=\"display: grid; grid-template-columns: min-content auto; grid-template-rows: min-content auto;\">\n                        <input\n                            style=\"grid-row: 1; grid-column: 1; margin-right:10px; height:100%; margin-top: 0px; margin-bottom:0px;\"\n                            type=\"range\" min=\"-90\" max=\"90\" step=\"-0.1\" class=\"slider\" orient=\"vertical\"\n                            v-model=\"v$.latitude.$model\">\n                        <!-- <div id=\"coordBox\" style=\"grid-row: 1; grid-column: 2;\"></div> -->\n                        <div style=\"position:relative; aspect-ratio: 2 / 1;\">\n                            <img src=\"./assets/world-map-coordinates-correct.png\" id=\"mapImage\"\n                                alt=\"An outline world map, on which the user can click to set the latitude and longitude.\"\n                                style=\"grid-row: 1; grid-column: 2; object-fit: contain; display:block; margin:0px\"\n                                draggable=\"false\" @mousemove=\"mapImageMouseMove\" @mousedown=\"mapImageStartClicking\"\n                                @click=\"mapImageClick\" ref=\"mapImage\">\n                            <div id=\"markerPoint\"\n                                :style=\"`top:${(90 - latitude) * 100 / 180}%; left:${(longitude+180) * 100 / 360}%`\">\n                            </div>\n                        </div>\n\n                        <input style=\"grid-row: 2; grid-column: 2; margin-top:10px; margin-left:0px; margin-right:0px\"\n                            type=\"range\" min=\"-180\" max=\"180\" step=\"1\" class=\"slider\" v-model=\"v$.longitude.$model\">\n                    </div>\n                </div>\n\n\n                <div class=\"setting\" data-v-walkthrough=\"time-zone\">\n                    <input type=\"checkbox\" id=\"autoSelectTimeZone\" v-model=\"autoSelectTimeZone\"\n                        style=\"margin-right: 10px; display: inline;\">\n                    <label for=\"autoSelectTimeZone\" class=\"fieldOption\">Automatically set time zone</label>\n                </div>\n\n                <br>\n                <h2>Sundial Settings</h2>\n\n                <div class=\"setting\" data-v-walkthrough=\"sundial-type\">\n                    <div class=\"checkboxSetting\" style=\"display:flex; flex-direction:row; align-items:center\">\n                        <label for=\"dialAndGnomon\" style=\"margin-right:10px\">\n                            <img src=\"./assets/sundialicon.svg\" style=\"max-width:50px\" alt=\"Traditional sundial icon\" />\n                        </label>\n                        <div>\n                            <input type=\"radio\" id=\"dialAndGnomon\" value=\"dialAndGnomon\" v-model=\"sundialType\">\n                            <label for=\"dialAndGnomon\" class=\"fieldOption\">\n                                Traditional sundial\n                            </label>\n                        </div>\n                    </div>\n                    <div class=\"checkboxSetting\" style=\"display:flex; flex-direction:row; align-items:center\">\n                        <label for=\"pointSundial\" style=\"margin-right:10px\">\n                            <img src=\"./assets/pointshadowtraceicon.svg\" style=\"max-width:50px\"\n                                alt=\"Point shadow trace icon\" />\n                        </label>\n                        <div>\n                            <input type=\"radio\" id=\"pointSundial\" value=\"pointSundial\" v-model=\"sundialType\">\n                            <label for=\"pointSundial\" class=\"fieldOption\">\n                                Point shadow trace\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <br>\n                <div data-v-walkthrough=\"slant-and-rotation\">\n\n                    <div class=\"setting\">\n                        <label class=\"fieldTitle\">Slant/°</label>\n                        <input class=\"small_input\" v-model=\"v$.slant.$model\">\n                        <div class=\"error\" v-if=\"v$.slant.$dirty && v$.slant.$invalid\">{{\n                            v$.slant.$errors[0].$message }}</div>\n                        <input type=\"range\" :min=\"-180\" :max=\"180\" step=\"1\" class=\"slider\" v-model=\"v$.slant.$model\">\n                    </div>\n                    <div class=\"setting\">\n                        <label class=\"fieldTitle\">Rotation/°</label>\n                        <input class=\"small_input\" v-model=\"v$.rotation.$model\">\n                        <div class=\"error\" v-if=\"v$.rotation.$dirty && v$.rotation.$invalid\">{{\n                            v$.rotation.$errors[0].$message }}</div>\n                        <input type=\"range\" :min=\"-180\" :max=\"180\" step=\"1\" class=\"slider\" v-model=\"v$.rotation.$model\">\n                    </div>\n                    <div class=\"setting\">\n                        <label class=\"fieldTitle\">{{ sundialType == \"dialAndGnomon\" ? \"Gnomon\" : \"Nodus\" }}\n                            height</label>\n                        <input class=\"small_input\" v-model=\"v$.gnomonHeight.$model\">\n                        <div class=\"error\" v-if=\"v$.gnomonHeight.$dirty && v$.gnomonHeight.$invalid\">{{\n                            v$.gnomonHeight.$errors[0].$message }}</div>\n                        <input type=\"range\" :min=\"0.5\" :max=\"3\" step=\"0.05\" class=\"slider\"\n                            v-model=\"v$.gnomonHeight.$model\">\n                    </div>\n                </div>\n                <div class=\"setting\" data-v-walkthrough=\"hour-lines\">\n                    <label class=\"fieldTitle\">Hour lines</label>\n                    <div class=\"checkboxSetting\">\n                        <input type=\"radio\" id=\"standardLines\" value=\"standard\" v-model=\"hourLineStyle\">\n                        <label for=\"standardLines\" class=\"fieldOption\">Adjusted for time zone and longitude</label>\n                    </div>\n                    <div class=\"checkboxSetting\">\n                        <input type=\"radio\" id=\"solarLines\" value=\"solar\" v-model=\"hourLineStyle\">\n                        <label for=\"solarLines\" class=\"fieldOption\">Solar time</label>\n                    </div>\n                </div>\n\n                <br>\n                <h2>Misc</h2>\n                <div class=\"checkboxSetting\">\n                    <input type=\"checkbox\" id=\"sunRaysPassThroughEarth\" v-model=\"sunRaysPassThroughEarth\">\n                    <label for=\"sunRaysPassThroughEarth\" class=\"fieldOption\">Light can reach the sundial at\n                        night</label>\n                </div>\n                <div class=\"checkboxSetting\">\n                    <input type=\"checkbox\" id=\"alwaysDaySkyColor\" v-model=\"alwaysDaySkyColor\">\n                    <label for=\"alwaysDaySkyColor\" class=\"fieldOption\">Disable night-time dark sky color</label>\n                </div>\n\n                <br>\n\n                <footer>\n                    <p id=\"copyrightText\">© Thomas Peach 2025. <a class=\"sidebar_link\"\n                            href=\"mailto:thomas.peach546@gmail.com\">Contact</a></p>\n                </footer>\n            </div>\n\n        </div>\n\n        <!-- top right controls -->\n        <div id=\"topRightControls\">\n            <div id=\"compassContainer\" title=\"North\">\n                <TresCanvas render-mode=\"on-demand\">\n                    <TresAmbientLight color=\"#FFFFFF\" :intensity=\"2\" />\n                    <TresOrthographicCamera :position=\"compassCameraPosition\" :lookAt=\"compassCameraLookAt\"\n                        :zoom=\"15\" />\n                    <CompassObject :rotation=\"compassRotation\" />\n                </TresCanvas>\n                <div style=\"position:absolute; width:100%; height:100%; top:0; left:0\" title=\"North\"></div>\n            </div>\n            <button class=\"zoomControl\" @keydown.enter=\"() => { currentZoomPerSecond = 1 / zoomSpeed }\"\n                @keyup.enter=\"() => { currentZoomPerSecond = 1 }\"\n                @mousedown=\"() => { currentZoomPerSecond = 1 / zoomSpeed }\"\n                @mouseup=\"() => { currentZoomPerSecond = 1 }\" @pointerleave=\"() => { currentZoomPerSecond = 1 }\"\n                @touchstart=\"() => { currentZoomPerSecond = 1 / zoomSpeed }\"\n                @touchend=\"() => { currentZoomPerSecond = 1 }\">\n                +\n            </button>\n            <button class=\"zoomControl\" @keydown.enter=\"() => { currentZoomPerSecond = zoomSpeed }\"\n                @keyup.enter=\"() => { currentZoomPerSecond = 1 }\"\n                @mousedown=\"() => { currentZoomPerSecond = zoomSpeed }\" @mouseup=\"() => { currentZoomPerSecond = 1 }\"\n                @pointerleave=\"() => { currentZoomPerSecond = 1 }\"\n                @touchstart=\"() => { currentZoomPerSecond = zoomSpeed }\" @touchend=\"() => { currentZoomPerSecond = 1 }\">\n                -\n            </button>\n\n        </div>\n\n\n        <!-- status overlay -->\n        <div id=\"status\" data-v-walkthrough=\"status\">\n\n            <div style=\"display:flex; flex-direction: row; align-items: center\">\n                <div class=\"time_display\" v-show=\"!isEditingTime\" @click=\"showTimeEntryBox\"\n                    @keydown.space=\"showTimeEntryBox\" tabindex=\"0\">\n                    {{ timeText }}\n                </div>\n                <input v-show=\"isEditingTime\" ref=\"timeEntryBox\" class=\"timeEntryBox\" @blur=\"hideTimeEntryBox\"\n                    @keydown.enter=\"hideTimeEntryBox\" @keydown.esc=\"hideTimeEntryBox\" @input=\"updateTimeFromEntryBox\"\n                    v-model=\"timeEntryValue\">\n                <div v-show=\"!isEditingTime\"\n                    style=\"display: flex; margin-left:10px; justify-content:end; flex-direction: column; align-items: stretch; padding-block: 9px\">\n                    <div class=\"subtitle\">local standard time</div>\n                    <div class=\"subtitle\">(UTC {{ timeZoneText }}) {{ isDaytime ? \"☀️\" : \"🌙\" }}</div>\n                </div>\n\n\n            </div>\n\n            <div class=\"subtitle\">{{ meanSolarTimeText }} mean solar time</div>\n            <div class=\"subtitle\">{{ apparentSolarTimeText }} apparent solar time</div>\n            <div style=\"display:flex; flex-direction:row\">\n                <input type=\"range\" min=\"0\" max=\"1440\" step=\"10\" class=\"slider\" id=\"time\" v-model.number=\"localTime\">\n                <button type=\"button\" @click=\"timeAdvanceButtonClicked\" id=\"time_advance_button\"\n                    title=\"Auto-advance time\">{{timeAdvanceButtonText}}</button>\n            </div>\n\n            <!-- 3 times explanation -->\n            <Popper arrow placement=\"left\" disable-click-away :show=\"showThreeTimesExplanation\">\n                <template #content>\n                    <div class=\"popper_content\">\n                        <div style=\"text-align: left\">\n                            <ThreeTimesExplanation />\n                        </div>\n                        <button class=\"v-step__button\" @click=\"() => setShowThreeTimesExplanation(false)\">Close</button>\n                    </div>\n                </template>\n                <a class=\"overlay_link\" href=\"javascript:void(0)\"\n                    @click=\"() => setShowThreeTimesExplanation(!showThreeTimesExplanation)\">Why are there 3\n                    times?</a>\n            </Popper>\n\n            <hr>\n            <div class=\"subtitle\" style=\"margin-top:13px\">{{dateText}}</div>\n            <input type=\"range\" min=\"0\" max=\"364\" step=\"1\" class=\"slider\" id=\"day\" v-model.number=\"day\">\n\n        </div>\n    </div>\n\n\n\n\n\n</template>\n\n<style>\n    #app {\n        font-family: sans-serif;\n        color: white;\n    }\n</style>\n\n<style scoped>\n    #overlay {\n        position:absolute;\n        width: 100%;\n        height:100%;\n        left:0;\n        top:0;\n        overflow: hidden;\n        display:flex;\n        flex-direction: row;\n        justify-content: space-between;\n        align-items: flex-end;\n        pointer-events: none;\n\n    }\n\n    #sidebar {\n        pointer-events:auto;\n        width: 35%;\n        max-width: 500px;\n        min-width:150px;\n        background: rgba(39, 39, 39, 0.95);\n        height: 100%;       \n        overflow-x: hidden;\n        overflow-y: scroll;\n    }\n    #sidebar h2 {\n        font-size: 15pt;\n        background-color: brown\n    }\n\n    #sidebarContent {\n        padding: 20px;\n        width:100%;\n        box-sizing: border-box;\n    }\n\n    .horizontal_settings {\n        flex-direction: row;\n        display: flex;\n        flex-wrap: wrap;\n        gap: 20px;\n        row-gap: 10px;\n        margin-bottom: 10px;\n    }\n\n    .horizontal_settings .setting {\n        flex:1\n    }\n\n    .fieldTitle {\n        display: block;\n        margin-bottom: 3px;\n        font-size: 11pt;\n        white-space: nowrap\n    }\n\n    .fieldOption {\n        display: inline;\n        font-size: 11pt;\n    }\n\n    .setting .error {\n        min-width: 100%;\n        width: 0;\n        font-size: 9pt;\n        margin-top: 2px;\n        color: yellow;\n\n    }\n\n    .checkboxSetting label {\n        display: block;\n        margin-bottom: 3px;\n        font-size: 11pt;\n        display: inline\n    }\n\n    .checkboxSetting input {\n        margin-right: 10px;\n        display: inline;\n    }\n\n    .small_input {\n        width: 100%;\n        min-width: 80px;\n        max-width: 100px;\n    }\n\n\n    .slider {\n        width: 100%;\n        opacity: 0.7; /* Fully shown on mouse-over */\n\n    }\n\n    .slider:hover {\n        opacity: 1; /* Fully shown on mouse-over */\n    }\n\n    #status {\n        pointer-events:auto;\n        flex:1;\n        font-family: monospace;\n        padding:10px;\n        text-align: left;\n        color:v-bind(\"statusTextColor\");\n        max-width:400px;\n        width:100%\n    }\n\n    #status hr {\n        border-color: v-bind(\"statusTextColor\");\n    }\n\n    .time_display {\n        font-size: 35pt;\n        width: min-content;\n    }\n\n    .timeEntryBox {\n        font-size: 40pt;\n        width: 100%;\n        font-family: monospace;\n    }\n\n    .time_display:focus, .time_display:hover {\n        color:brown\n    }\n\n    .subtitle {\n        font-size: 11pt;\n    }\n\n    .overlay_link {\n        font-size: 10pt;\n    }\n\n    .sidebar_link {\n        font-size: 10pt;\n        color: rgb(255, 106, 52)\n    }\n    .sidebar_link:active {\n        color: rgb(255, 160, 52)\n    }\n\n    .zoomControl {\n        display:flex;\n        align-items: center;\n        justify-content: center;\n        aspect-ratio: 1/1;\n        min-height : 25px;\n        background-color:brown;\n        pointer-events: all;\n        margin:5px;\n        border-radius: 5px;\n        font-family: monospace;\n        font-size:15pt;\n        opacity:1;\n        user-select: none;\n        color:white\n    }\n    .zoomControl:hover {\n        opacity:0.5\n    }\n\n\n    input[type=range] {\n        height: 20px;\n    }\n\n    input[type=range][orient=vertical] {\n        writing-mode: vertical-lr;\n        direction: rtl;\n        appearance: slider-vertical;\n        width: 20px;\n        vertical-align: bottom;\n    }\n\n    #coordBox {\n        background-color: white;\n        width: 100%\n    }\n\n    #markerPoint {\n        width: 10px;\n        height: 10px;\n        transform: translate(-5px, -5px);\n        border-radius: 5px;\n        background-color: brown;\n        grid-row: 1;\n        grid-column: 2;\n        position: absolute;\n        pointer-events: none;\n    }\n\n    #mapImage {\n        width:100%;\n        aspect-ratio: 2 / 1;\n        user-select: none\n    }\n\n    #compassContainer {\n        width:50px;\n        height:50px;\n        position:relative\n    }\n\n    #topRightControls {\n        position:absolute;\n        top:0;\n        right:0;\n        padding:10px;\n        display:flex;\n        align-items:center;\n        flex-direction:column\n    }\n\n    #copyrightText {\n        font-size: 10pt\n    }\n\n\n</style>","import script from \"./App.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./App.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./App.vue?vue&type=style&index=0&id=41d56330&lang=css\"\nimport \"./App.vue?vue&type=style&index=1&id=41d56330&scoped=true&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-41d56330\"]])\n\nexport default __exports__","import { createApp } from 'vue'\nimport App from './App.vue'\nimport './assets/global.css'\nimport Vue3Tour from 'vue3-tour'\n// import 'vue3-tour/dist/vue3-tour.css'\nimport \"./assets/popper.css\"; \n\nconst app = createApp(App)\n\napp.use(Vue3Tour)\n\napp.mount('#app')","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/sundials/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunksundials\"] = self[\"webpackChunksundials\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(9285); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_defineComponent","__name","props","position","required","type","Object","setup","__props","positionCopy","computed","x","y","z","_ctx","_cache","_component_TresSphereGeometry","_resolveComponent","_component_TresMeshBasicMaterial","_component_TresMesh","_component_TresObject3D","_openBlock","_createBlock","value","default","_withCtx","_createVNode","args","color","_","__exports__","rad","degrees","Math","PI","calculateSunHorizontalCoords","day","time","latitude","longitude","longRad","latRad","D_utc","D_tai","D_tt","L","g","lambda","sin","epsilon","rightAsc","atan2","cos","declination","asin","D_utc_of_last_midnight","trunc","H","T","GMST","pow","omega","deltaPsi","eqeq","GAST","LMST","h","azimuth","altitude","horizontalToActualCoords","multiplyer","sunPosAtEquinox","timeAngle","Vector3","calculateShadowDirection","plateNorm","sunPos","style","norm1","clone","cross","shadowDir","timeToString","hours","floor","toString","padStart","minutes","stringToTime","str","result","match","NaN","Number","parseInt","dateToString","dateObj","Date","parse","toLocaleDateString","month","timeZoneToString","timeZone","symbol","abs","mins","infiniteLineIntersectWithPlaneWithDir","plane","linePoint","lineDirection","ray","Ray","intersection","intersectPlane","dir","point","ray2","multiplyScalar","infiniteLineIntersectWithSphereParameters","sphereOrigin","sphereRadius","c","distanceToSquared","b","sub","multiply","dot","a","length","discriminant","sqrt","longitudeToTimeZone","round","vertIntersectPlanes","p1","p2","p3","n1","normal","n2","n3","x1","coplanarPoint","x2","x3","f1","crossVectors","f2","f3","det","Matrix3","set","determinant","vectorSum","add","planeIntersection","nonNullSequence","arr","filter","seq","firstNullLoc","indexOf","j","el","push","padWithRepeatedLastElement","numToPad","lastValue","k","text","String","castShadow","Boolean","receiveShadow","size","visible","textHeight","rotation","_component_TresMeshPhongMaterial","_Suspense","_unref","Text3D","font","height","center","_createTextVNode","_toDisplayString","show","radius","gnomonPosition","origin","hourLineStyle","numeralDistanceFromSundialOrigin","freezeProps","ref","watch","newValue","immediate","relativeGnomonRotation","gnomonCorrectedRotation","mat","Matrix4","makeRotationFromEuler","invert","Euler","setFromRotationMatrix","sundialNormal","applyEuler","gnomonAbsolutePosition","stylePlateIntersection","Plane","translate","rayDir","stylePlateIntersectionPoint","stylePlateIntersectionPointOrder","hourLineHours","Array","keys","hourLineTimeAngles","map","i","offsetHour","hourLineDirections","hourLinesCalculationMethod","distanceTo","hourLinePoints","gnomon1","gnomonDir","gnomon2","pointOutsidePlate","projectOnPlane","normalize","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","hourLineSundialSphereIntersectionParameters","hour","lambdas","plateToHourLineHeight","hourLines","lineDir","labelPoint","labelSphereIntersectLambdas","applyMatrix4","toArray","label","points","rotationCopy","plateGeometryArgs","_component_TresCylinderGeometry","_createElementBlock","_Fragment","_renderList","Line2","key","hourLine","SundialLetter","xOffset","zoomPerSecond","timeAdvanceSpeed","emits","emit","__emit","extend","OrbitControls","camera","sizes","renderer","invalidate","useTresContext","width","zoomMultiple","isPerspectiveCamera","setViewOffset","onBeforeRender","onAfterRender","pause","resume","useLoop","delta","zoomThisFrame","leftoverMinFractionFromLastFrame","fractionalMinsToAdd","wholeMins","_component_TresOrbitControls","domElement","target","_createCommentVNode","setPixelRatio","window","devicePixelRatio","localClippingEnabled","_createStaticVNode","_imports_0","script","render","tourSteps","content","params","placement","enableScrolling","highlight","vertexColors","lineWidth","worldUnits","alphaToCoverage","dashed","dashSize","gapSize","dashScale","dashOffset","clippingPlanes","expose","__expose","getInterpolatedVertexColors","numPoints","from","fill","normalizeColor","numSegments","mappedColors","closed","iColors","divisions","alpha","colorIndex","lerp","lineMaterial","LineMaterial","lineGeometry","LineGeometry","line","hasVertexColors","isArray","updateLineMaterial","material","linewidth","needsUpdate","updateLineGeometry","geometry","pValues","p","Vector2","flat","setPositions","colors","setColors","computeLineDistances","resolution","onUnmounted","dispose","lineRef","shallowRef","instance","_component_primitive","object","hourLineDigitMaxDistanceToInsideBorder","platePlane","plateToPlotVector","projectionOnPlate","hourLinePlotHours","hourLinePlotDays","hourLinePlotData","hourLinePlot","entries","solsticePlotDays","solsticePlotHours","solsticePlotData","solsticePlot","date","relativeClippingPlanesArgs","planes","solsticeLineOfNumerals","intersect","intersectsPlane","hourLineDigitPositions","pos","constant","distanceToPoint","hourLineDigits","fontSize","nodusHeight","lineToNodusPoints","gnomonPositionCopy","_component_TresBoxGeometry","Line2Clipped","solsticeLine","digit","fixedRotationOffset","GLTFModel","path","_hoisted_1","_hoisted_2","id","_hoisted_3","_hoisted_4","_hoisted_5","class","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","title","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_41","_hoisted_42","sundialRadius","projectionRadius","zoomSpeed","_useCssVars","statusTextColor","sundialOrigin","localTime","autoSelectTimeZone","sunRaysPassThroughEarth","sundialType","slant","currentZoomPerSecond","gnomonHeight","alwaysDaySkyColor","cameraPosition","isEditingTime","timeEntryValue","timeEntryBox","showTimeEntryBox","nextTick","focus","updateTimeFromEntryBox","newTime","isNaN","hideTimeEntryBox","onClickOutside","onMounted","document","addEventListener","event","setShowThreeTimesExplanation","formDefaults","timeZoneRegex","formState","reactive","formRules","decimal","minValue","maxValue","isATimeZone","helpers","withMessage","regex","v$","useVuelidate","newVal","$invalid","parseFloat","newValInt","getCurrentInstance","showThreeTimesExplanation","toggleWalkthrough","wt","appContext","config","globalProperties","$tours","isRunning","stop","hideAllPoppers","start","finish","mapImage","mapImageIsBeingClicked","setLatLngFromMap","e","offsetX","offsetY","toFixed","mapImageMouseMove","mapImageStartClicking","mapImageClick","sidebarDims","clientWidth","clientHeight","sidebar","sidebarResizeObserver","ResizeObserver","timeAdvanceButtonClicked","advanceTime","observe","sundialRotation","gnomonRelativePosition","nodusRelativePosition","sunHorizontalCoords","sunCoords","isDaytime","timeText","dateText","meanSolarTime","meanSolarTimeText","apparentSolarTime","timeHours","timeMins","apparentSolarTimeText","timeZoneText","sunlightIntensity","skyColor","interpolate","compassRotation","cameraDistance","azimouth","timeAdvanceButtonText","showDialAndGnomonSundial","showPointSundial","sunCoordsArray","directionalLightIntensity","cameraXOffset","gridHelperArgs","gridHelperPosition","compassCameraPosition","compassCameraLookAt","_component_v_tour","_component_TresPerspectiveCamera","_component_TresDirectionalLight","_component_TresAmbientLight","_component_TresGridHelper","_component_TresOrthographicCamera","name","steps","walkthroughSteps","options","labels","buttonSkip","buttonPrevious","buttonNext","buttonStop","_createElementVNode","TresCanvas","shadows","shadowMapType","BasicShadowMap","DialAndGnomonSundial","PointSundial","SunObject","intensity","CameraHelper","onCameraPosChange","_isRef","onOnAdvanceTime","RendererHelper","ref_key","onClick","preventDefault","href","src","alt","_withDirectives","$event","$model","_vModelText","$dirty","$errors","$message","min","max","step","orient","_imports_1","draggable","onMousemove","onMousedown","_normalizeStyle","_vModelCheckbox","for","_imports_2","_vModelRadio","_imports_3","lookAt","zoom","CompassObject","onKeydown","_withKeys","onKeyup","onMouseup","onPointerleave","onTouchstart","onTouchend","tabindex","_vShow","onBlur","onInput","number","Popper","arrow","ThreeTimesExplanation","app","createApp","App","use","Vue3Tour","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","every","splice","r","n","getter","__esModule","d","definition","o","defineProperty","enumerable","get","globalThis","this","Function","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","bind","__webpack_exports__"],"sourceRoot":""}