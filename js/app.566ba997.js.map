{"version":3,"file":"js/app.566ba997.js","mappings":"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","sources":["webpack://sundials/./src/components/SunObject.vue?3581","webpack://sundials/./src/components/SunObject.vue","webpack://sundials/./src/components/SunObject.vue?d054","webpack://sundials/./src/calculations.ts","webpack://sundials/./src/components/SundialLetter.vue?f12d","webpack://sundials/./src/components/SundialLetter.vue","webpack://sundials/./src/components/SundialLetter.vue?fc0a","webpack://sundials/./src/components/SundialObject.vue","webpack://sundials/./src/components/SundialObject.vue?f5df","webpack://sundials/./src/components/SundialObject.vue?85df","webpack://sundials/./src/components/CameraOffsetHelper.vue","webpack://sundials/./src/components/CameraOffsetHelper.vue?878d","webpack://sundials/./src/components/CameraOffsetHelper.vue?cb3b","webpack://sundials/./src/components/RendererHelper.vue","webpack://sundials/./src/components/RendererHelper.vue?52e9","webpack://sundials/./src/components/RendererHelper.vue?f3a6","webpack://sundials/./src/App.vue?2a5e","webpack://sundials/./src/App.vue","webpack://sundials/./src/App.vue?7ccd","webpack://sundials/./src/main.ts","webpack://sundials/webpack/bootstrap","webpack://sundials/webpack/runtime/chunk loaded","webpack://sundials/webpack/runtime/compat get default export","webpack://sundials/webpack/runtime/define property getters","webpack://sundials/webpack/runtime/global","webpack://sundials/webpack/runtime/hasOwnProperty shorthand","webpack://sundials/webpack/runtime/make namespace object","webpack://sundials/webpack/runtime/publicPath","webpack://sundials/webpack/runtime/jsonp chunk loading","webpack://sundials/webpack/startup"],"sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_TresSphereGeometry = _resolveComponent(\"TresSphereGeometry\")!\n  const _component_TresMeshBasicMaterial = _resolveComponent(\"TresMeshBasicMaterial\")!\n  const _component_TresMesh = _resolveComponent(\"TresMesh\")!\n  const _component_TresObject3D = _resolveComponent(\"TresObject3D\")!\n\n  return (_openBlock(), _createBlock(_component_TresObject3D, { position: _ctx.position }, {\n    default: _withCtx(() => [\n      _createVNode(_component_TresMesh, null, {\n        default: _withCtx(() => [\n          _createVNode(_component_TresSphereGeometry, { args: [0.5, 20, 16,] }),\n          _createVNode(_component_TresMeshBasicMaterial, { color: \"#ffffff\" })\n        ]),\n        _: 1\n      })\n    ]),\n    _: 1\n  }, 8, [\"position\"]))\n}","<!-- 3D sphere representing the sun -->\n\n<template>\n    <TresObject3D :position=\"position\">\n        <!-- plate -->\n        <TresMesh>\n            <TresSphereGeometry :args=\"[0.5, 20, 16,]\" />\n            <TresMeshBasicMaterial color=\"#ffffff\" />\n        </TresMesh>\n\n    </TresObject3D>\n\n</template>\n\n\n<script lang=\"ts\">\nimport { PropType, defineComponent } from 'vue'\nexport default defineComponent({\n    name:\"SunObject\",\n    props: {\n        position: {\n            required: true,\n            type: Array as PropType<number[]>,\n        },\n    }\n})\n</script>","import { render } from \"./SunObject.vue?vue&type=template&id=1d3dbaca&ts=true\"\nimport script from \"./SunObject.vue?vue&type=script&lang=ts\"\nexport * from \"./SunObject.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { Plane, Ray, Vector3 } from \"three\";\n\n/**\n * Compute the sun's position in horizontal coordinates, using the current date, time, latitude, and longitude.\n */\nexport function calculateSunHorizontalCoords(day: number, time: number, latitude: number, longitude: number) {\n    // using guide from here: https://en.wikipedia.org/wiki/Position_of_the_Sun\n\n    const longRad = longitude * Math.PI / 180;\n    const latRad = latitude * Math.PI / 180;\n\n    // pretend the year is 2023 (non-leap year)\n    // calculate ecliptic coordinates\n    const n = 8400.5 + day + time / 1440;\n    const L = (4.89495042 + 0.017202792 * n) % (2 * Math.PI);\n    const g = (6.240040768 + 0.01720197 * n) % (2 * Math.PI);\n    const lambda = L + 0.033423055 * Math.sin(g) + 0.000349066 * Math.sin(2 * g);\n    const epsilon = 0.409087723 - 4e-7 * Math.PI / 180 * n;\n\n\n    // convert to equitorial coords\n    const rightAsc = Math.atan2(Math.cos(epsilon) * Math.sin(lambda), Math.cos(lambda));\n    const declination = Math.asin(Math.sin(epsilon) * Math.sin(lambda));\n\n\n    // compute hour angle\n    // https://aa.usno.navy.mil/faq/GAST\n    // /** Greenwich mean sidereal time (converted to hour angle) */\n    // const GMST = ((18.697375 + 24.065709824279 * n) % 24) * Math.PI/12;\n\n    // earth rotation angle\n    // const ERA = 2 * Math.PI * ((0.7790572732640 + 1.00273781191135448 * n) % 1);\n    const ERA = 2 * Math.PI * ((0.7790572732640 + 1.002737811911355 * n) % 1);\n\n    /** local mean sidereal time */\n    const LMST = ERA + longRad;\n    /** hour angle */\n    const h = LMST - rightAsc;\n\n    // convert to horizontal coords\n    // https://en.wikipedia.org/wiki/Astronomical_coordinate_systems\n    const azimuth = -Math.atan2(Math.cos(declination) * Math.sin(h), -Math.sin(latRad) * Math.cos(declination) * Math.cos(h) + Math.cos(latRad) * Math.sin(declination));\n    const altitude = Math.asin(Math.sin(latRad) * Math.sin(declination) + Math.cos(latRad) * Math.cos(declination) * Math.cos(h));\n\n    return { azimuth, altitude }\n\n}\n\n\n/**\n * Compute coordinates of the sun at distance `multiplyer` from the origin\n * @param azimuth \n * @param altitude \n * @param multiplyer \n * @returns \n */\nexport function horizontalToActualCoords(azimuth: number, altitude: number, multiplyer=15) {\n    return {\n        x: multiplyer * Math.sin(azimuth) * Math.cos(altitude),\n        y: multiplyer * Math.sin(altitude),\n        z: multiplyer * -Math.cos(azimuth) * Math.cos(altitude)\n    }\n}\n/**\n * Compute vector of the shadow path on the plate at a specific time\n * \n * Be careful when the style is parallel to the plane at the moment the sun sets\n * \n * @param timeAngle Midnight to midnight, 0 to 2π\n * @param latitude Latitude, in radians\n * @param plateNorm Normal vector to the plane of the plate\n * @returns\n */\nexport function calculateShadowDirection(timeAngle: number, latitude: number, plateNorm:Vector3) {\n\n\n    /** Position of the sun at an equinox (when the plane of the sun orbit is at 90° to the gnomon style)\n     * \n     * Ignoring eliptical orbit/apparent time effects\n    */\n    const sunPos = new Vector3(Math.sin(timeAngle), -Math.cos(timeAngle)*Math.cos(latitude), -Math.cos(timeAngle)*Math.sin(latitude));\n\n    /** unit vector of the gnomon style */\n    const style = new Vector3(0, Math.sin(latitude), -Math.cos(latitude));\n\n\n    // the direction of the shadow cast at this time can be found by the intersection of the planes:\n    // 1, containing the sunPos and the style\n    // 2, the plate\n    // to do this, find the cross product of the normal vectors to both planes\n\n    const norm1 = sunPos.clone().cross(style);\n    const shadowDir = norm1.clone().cross(plateNorm);\n\n    return shadowDir;\n\n}\n\n/**\n * Convert time to string.\n * @param time Minutes from midnight.\n * @returns \n */\nexport function timeToString(time: number) {\n    // const timeObj = new Date();\n    // timeObj.setHours(Math.floor(time / 60));\n    // timeObj.setMinutes(time % 60)\n    // return timeObj.toLocaleTimeString(undefined, { hour: \"numeric\", minute: \"numeric\" })\n\n    const hours = Math.floor(time / 60).toString().padStart(2, \"0\");\n    const minutes = Math.floor(time % 60).toString().padStart(2, \"0\")\n\n    return `${hours}:${minutes}`\n}\n\n/**\n * Parses string times in format `xx:xx`\n * @param str \n * @returns The time, or NaN if could not be parsed.\n */\nexport function stringToTime(str: string) {\n    const result = str.match(/^\\s*([0-9]+)(?::([0-9]*))?\\s*$/);\n    if (!result) return NaN;\n\n    const hours = Number.parseInt(result[1]);\n    if (hours < 0 || hours > 23) return NaN;\n\n    let minutes = 0;\n    if (result[2] && result[2] != \"\") {\n        minutes = Number.parseInt(result[2]);\n        if (minutes < 0 || minutes > 59) return NaN;\n    }\n\n    return hours*60 + minutes;\n\n}\n\n/**\n * Convert day to string\n * @param day Days since 1st January in a non-leap year (0 to 364)\n * @returns \n */\nexport function dateToString(day: number) {\n    // add date to an arbitrary non-leap year\n    const dateObj = new Date(Date.parse(\"2001\") + day * 24 * 60 * 60 * 1000);\n    return dateObj.toLocaleDateString(undefined, { month: \"long\", day: 'numeric' })\n}\n\n/**\n * Convert time zone to string\n * @param timeZone Minutes difference from UTC\n * @returns \n */\nexport function timeZoneToString(timeZone:number) {\n\n    const symbol = timeZone > 0 ? \"+\"\n        : timeZone < 0 ? \"-\"\n            : \"±\";\n    const hours = Math.abs(Math.trunc(timeZone / 60));\n    const mins = Math.abs(timeZone % 60);\n    let result = symbol + hours.toString();\n    if (mins != 0) result += \":\" + mins.toString();\n    return result;\n\n}\n\n/**\n * Intersect an infinite line with a plane\n * @param plane The plane \n * @param linePoint A point on the line \n * @param lineDirection A vector in the direction of the line\n * @returns The point of intersection, if it exists\n */\nexport function infiniteLineIntersectWithPlaneWithDir(plane: Plane, linePoint: Vector3, lineDirection: Vector3) {\n\n    // rays are only infinite in 1 direction. Need 2 rays, try both\n    const ray = new Ray(linePoint, lineDirection);\n    let intersection = ray.intersectPlane(plane, new Vector3())\n    if (intersection) return {dir: 1, point: intersection}\n    \n    const ray2 = new Ray(linePoint, lineDirection.clone().multiplyScalar(-1));\n    intersection = ray2.intersectPlane(plane, new Vector3())\n    if (intersection) return {dir: -1, point:intersection};\n\n    return null;\n}\n\n/**\n * Intersect an infinite line with a plane\n * @param plane The plane \n * @param linePoint A point on the line \n * @param lineDirection A vector in the direction of the line\n * @returns The point of intersection, if it exists, and the direction from the line point traveled.\n */\nexport function infiniteLineIntersectWithPlane(plane: Plane, linePoint: Vector3, lineDirection: Vector3) {\n\n    const ptWithDir = infiniteLineIntersectWithPlaneWithDir(plane, linePoint, lineDirection);\n    if (ptWithDir) return ptWithDir.point;\n    return null;\n}\n\n/**\n * intersections with the sphere and r = linePoint + λ * lineDirection\n * find values of λ, if they exist\n * @param sphereOrigin \n * @param sphereRadius \n * @param linePoint \n * @param lineDirection \n */\nexport function infiniteLineIntersectWithSphereParameters(sphereOrigin: Vector3, sphereRadius: number, linePoint: Vector3, lineDirection: Vector3) {\n\n    // intersections with the sphere and r = linePoint + λ * lineDirection\n    // find values of λ\n    const c = sphereOrigin.distanceToSquared(linePoint) - Math.pow(sphereRadius, 2);\n    const b = sphereOrigin.clone().sub(linePoint).multiply(lineDirection).dot(new Vector3(1, 1, 1)) * -2;\n    const a = Math.pow(lineDirection.length(), 2);\n\n    const discriminant = Math.pow(b, 2) - 4 * a * c;\n    if (discriminant < 0) return [];\n\n    return [\n        (-b - Math.sqrt(discriminant)) / (2 * a),\n        (-b + Math.sqrt(discriminant)) / (2 * a)\n    ]\n \n}\n\n\nexport function infiniteLineIntersectWithSphere(sphereOrigin: Vector3, sphereRadius: number, linePoint: Vector3, lineDirection: Vector3) {\n\n    const roots = infiniteLineIntersectWithSphereParameters(sphereOrigin, sphereRadius, linePoint, lineDirection) ;\n    if (roots.length == 0) return null;\n\n    else return [\n        lineDirection.clone().multiplyScalar(roots[0]).add(linePoint),\n        lineDirection.clone().multiplyScalar(roots[1]).add(linePoint),\n    ]\n\n}\n\nexport function longitudeToTimeZone(longitude:number) {\n    return Math.round(longitude / 360 * 24) * 60;\n}","import { toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, Suspense as _Suspense, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_TresMeshPhongMaterial = _resolveComponent(\"TresMeshPhongMaterial\")!\n  const _component_Text3D = _resolveComponent(\"Text3D\")!\n  const _component_TresObject3D = _resolveComponent(\"TresObject3D\")!\n\n  return (_openBlock(), _createBlock(_component_TresObject3D, {\n    position: _ctx.position,\n    rotation: [-Math.PI/2, 0, 0]\n  }, {\n    default: _withCtx(() => [\n      (_openBlock(), _createBlock(_Suspense, null, {\n        default: _withCtx(() => [\n          _createVNode(_component_Text3D, {\n            font: \"./fonts/PTSerif_Regular.json\",\n            size: 0.2,\n            \"bevel-enabled\": false,\n            height: 0.05,\n            \"cast-shadow\": _ctx.castShadow,\n            \"receive-shadow\": _ctx.receiveShadow,\n            \"need-updates\": \"\",\n            center: \"\"\n          }, {\n            default: _withCtx(() => [\n              _createTextVNode(_toDisplayString(_ctx.text) + \" \", 1),\n              _createVNode(_component_TresMeshPhongMaterial, { color: \"#737373\" })\n            ]),\n            _: 1\n          }, 8, [\"cast-shadow\", \"receive-shadow\"])\n        ]),\n        _: 1\n      }))\n    ]),\n    _: 1\n  }, 8, [\"position\", \"rotation\"]))\n}","<!-- Letter displayed on the sundial plate. -->\n\n<template>\n    <TresObject3D\n        :position=\"position\"\n        :rotation=\"[-Math.PI/2, 0, 0]\"\n    >\n        <Suspense>\n            <Text3D\n                font=\"./fonts/PTSerif_Regular.json\"\n                :size=\"0.2\"\n                :bevel-enabled=\"false\"\n                :height=\"0.05\"\n                :cast-shadow=\"castShadow\"\n                :receive-shadow=\"receiveShadow\"\n                need-updates\n                center\n                \n            >\n                {{ text }}\n                <TresMeshPhongMaterial\n                    color=\"#737373\"\n                />\n            </Text3D>\n        </Suspense>\n    </TresObject3D>\n</template>\n\n\n<script lang=\"ts\">\n    import { Text3D } from '@tresjs/cientos';\n    import {  PropType, defineComponent } from 'vue'\n    export default defineComponent({\n        name:\"SundialLetter\",\n        props:{\n            text: {\n                required: true,\n                type: String as PropType<string>\n            },\n            position: {\n                required:true,\n                type: Array as PropType<number[]>, \n            },\n            castShadow: {\n                required: false,\n                default: false,\n                type: Boolean as PropType<boolean>\n            },\n            receiveShadow: {\n                required: false,\n                default: false,\n                type: Boolean as PropType<boolean>\n            }\n        },\n        components:{Text3D}\n    })\n</script>","import { render } from \"./SundialLetter.vue?vue&type=template&id=14b35f52&ts=true\"\nimport script from \"./SundialLetter.vue?vue&type=script&lang=ts\"\nexport * from \"./SundialLetter.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<!-- 3D object of the sundial -->\n\n<script setup lang=\"ts\">\n\n    const props = defineProps(\n    {\n        latitude: {\n            required: false,\n            default: 0,\n            type: Number as PropType<number>\n        },\n        gnomonPosition: {\n            required: true,\n            default:() => [0, 1, 0],\n            type: Array as PropType<number[]>\n        },\n        origin: {\n            required: true,\n            default: () => new Vector3(0, -1, 0),\n            type: Object as PropType<Vector3>\n        },\n        rotation: {\n            required: true,\n            default: () => new Euler(0, 0, 0),\n            type: Object as PropType<Euler>\n        },\n        hourLabels: {\n            required: true,\n            type: Array as PropType<{\n                hour: number,\n                label: string,\n                labelPoint: number[] | null\n            }[]>\n        }\n\n    });\n\n    const relativeGnomonRotation = computed(() => (90-props.latitude)*Math.PI/180);\n\n    const gnomonCorrectedRotation = computed(() => {\n        // apply the gnomon rotation and remove the object3d rotation\n\n        const mat = new Matrix4().makeRotationFromEuler(props.rotation).invert()\n            .multiply(new Matrix4().makeRotationFromEuler(new Euler(-relativeGnomonRotation.value, 0, 0)))\n\n        return new Euler().setFromRotationMatrix(mat);\n\n    })\n</script>\n\n<template>\n    <TresObject3D :position=\"origin\" :rotation=\"new Euler(/* @ts-ignore */...rotation.toArray())\">\n        <!-- plate -->\n        <TresMesh :position=\"[0,-0.05,0]\" cast-shadow receive-shadow>\n            <!-- <TresBoxGeometry :args=\"[5,0.1, 5,]\" /> -->\n            <TresCylinderGeometry :args=\"[5, 5, 0.1]\" />\n            <TresMeshPhongMaterial color=\"#f9ecec\" />\n        </TresMesh>\n\n        <template v-for=\"{hour, label, labelPoint} in hourLabels\" :key=\"hour\">\n            <SundialLetter :text=\"labelPoint ? label : ''\" :position=\"labelPoint ?? [0,0,0]\" receive-shadow/>\n        </template>\n  \n        <!-- Style/gnomon -->\n        <TresMesh :position=\"gnomonPosition\" :rotation=\"gnomonCorrectedRotation\" cast-shadow receive-shadow>\n            <TresCylinderGeometry :args=\"[0.05, 0.05, 2]\" />\n            <TresMeshPhongMaterial color=\"#b7b7b7\" />\n        </TresMesh>\n    </TresObject3D>\n\n</template>\n\n\n<script lang=\"ts\">\n    import { PropType, computed, defineComponent, defineProps, ref } from 'vue'\n    import SundialLetter from './SundialLetter.vue';\n    import { Euler, Matrix3, Matrix4, Vector3 } from 'three';\n    export default defineComponent({\n        name:\"SundialObject\",\n        components: {\n            SundialLetter,\n        },\n    })\n</script>","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock } from \"vue\"\n\n\n    import { PropType, computed, defineComponent, defineProps, ref } from 'vue'\n    import SundialLetter from './SundialLetter.vue';\n    import { Euler, Matrix3, Matrix4, Vector3 } from 'three';\n    const __default__ = defineComponent({\n        name:\"SundialObject\",\n        components: {\n            SundialLetter,\n        },\n    })\n\n\nexport default /*#__PURE__*/_defineComponent({\n  ...__default__,\n  props: {\n        latitude: {\n            required: false,\n            default: 0,\n            type: Number as PropType<number>\n        },\n        gnomonPosition: {\n            required: true,\n            default:() => [0, 1, 0],\n            type: Array as PropType<number[]>\n        },\n        origin: {\n            required: true,\n            default: () => new Vector3(0, -1, 0),\n            type: Object as PropType<Vector3>\n        },\n        rotation: {\n            required: true,\n            default: () => new Euler(0, 0, 0),\n            type: Object as PropType<Euler>\n        },\n        hourLabels: {\n            required: true,\n            type: Array as PropType<{\n                hour: number,\n                label: string,\n                labelPoint: number[] | null\n            }[]>\n        }\n\n    },\n  setup(__props) {\n\n\n    const props = __props;\n\n    const relativeGnomonRotation = computed(() => (90-props.latitude)*Math.PI/180);\n\n    const gnomonCorrectedRotation = computed(() => {\n        // apply the gnomon rotation and remove the object3d rotation\n\n        const mat = new Matrix4().makeRotationFromEuler(props.rotation).invert()\n            .multiply(new Matrix4().makeRotationFromEuler(new Euler(-relativeGnomonRotation.value, 0, 0)))\n\n        return new Euler().setFromRotationMatrix(mat);\n\n    })\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_TresCylinderGeometry = _resolveComponent(\"TresCylinderGeometry\")!\n  const _component_TresMeshPhongMaterial = _resolveComponent(\"TresMeshPhongMaterial\")!\n  const _component_TresMesh = _resolveComponent(\"TresMesh\")!\n  const _component_TresObject3D = _resolveComponent(\"TresObject3D\")!\n\n  return (_openBlock(), _createBlock(_component_TresObject3D, {\n    position: __props.origin,\n    rotation: new (_unref(Euler))(/* @ts-ignore */...__props.rotation.toArray())\n  }, {\n    default: _withCtx(() => [\n      _createVNode(_component_TresMesh, {\n        position: [0,-0.05,0],\n        \"cast-shadow\": \"\",\n        \"receive-shadow\": \"\"\n      }, {\n        default: _withCtx(() => [\n          _createVNode(_component_TresCylinderGeometry, { args: [5, 5, 0.1] }),\n          _createVNode(_component_TresMeshPhongMaterial, { color: \"#f9ecec\" })\n        ]),\n        _: 1\n      }),\n      (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(__props.hourLabels, ({hour, label, labelPoint}) => {\n        return (_openBlock(), _createBlock(SundialLetter, {\n          key: hour,\n          text: labelPoint ? label : '',\n          position: labelPoint ?? [0,0,0],\n          \"receive-shadow\": \"\"\n        }, null, 8, [\"text\", \"position\"]))\n      }), 128)),\n      _createVNode(_component_TresMesh, {\n        position: __props.gnomonPosition,\n        rotation: gnomonCorrectedRotation.value,\n        \"cast-shadow\": \"\",\n        \"receive-shadow\": \"\"\n      }, {\n        default: _withCtx(() => [\n          _createVNode(_component_TresCylinderGeometry, { args: [0.05, 0.05, 2] }),\n          _createVNode(_component_TresMeshPhongMaterial, { color: \"#b7b7b7\" })\n        ]),\n        _: 1\n      }, 8, [\"position\", \"rotation\"])\n    ]),\n    _: 1\n  }, 8, [\"position\", \"rotation\"]))\n}\n}\n\n})","import script from \"./SundialObject.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./SundialObject.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","<!-- Make the focus point of the camera a bit off center on the canvas -->\n\n<script lang=\"ts\" setup>\nimport { useTresContext } from '@tresjs/core';\nimport { PerspectiveCamera } from 'three';\nimport { PropType, watch, defineProps} from 'vue';\n\n\nconst {camera,  sizes} = useTresContext();\n\nconst props = defineProps({\n    xOffset: {\n        required: true,\n        type: Number as PropType<number>\n    }\n});\n\nwatch(() => [sizes.width.value, sizes.height.value, props.xOffset], () => {\n    const zoomMultiple = (sizes.width.value + Math.abs(props.xOffset) * 2) / sizes.width.value;\n    if ((camera.value as PerspectiveCamera | undefined)?.isPerspectiveCamera) {\n        (camera.value as PerspectiveCamera).setViewOffset(\n            sizes.width.value * zoomMultiple,\n            sizes.height.value * zoomMultiple,\n            props.xOffset > 0 ? props.xOffset * 2 : 0,\n            sizes.height.value * (zoomMultiple - 1) / 2,\n            sizes.width.value,\n            sizes.height.value);\n    }\n\n}, {immediate: true})\n\n</script>\n\n<script lang=\"ts\">\n\nimport {defineComponent} from 'vue';\nexport default defineComponent({\n    name: \"CameraOffsetHelper\",\n    components: {}\n}) \n</script>\n","import { defineComponent as _defineComponent } from 'vue'\nimport { useTresContext } from '@tresjs/core';\nimport { PerspectiveCamera } from 'three';\nimport { PropType, watch} from 'vue';\n\n\n\n\nimport {defineComponent} from 'vue';\nconst __default__ = defineComponent({\n    name: \"CameraOffsetHelper\",\n    components: {}\n}) \n\n\nexport default /*#__PURE__*/_defineComponent({\n  ...__default__,\n  props: {\n    xOffset: {\n        required: true,\n        type: Number as PropType<number>\n    }\n},\n  setup(__props) {\n\nconst {camera,  sizes} = useTresContext();\n\nconst props = __props;\n\nwatch(() => [sizes.width.value, sizes.height.value, props.xOffset], () => {\n    const zoomMultiple = (sizes.width.value + Math.abs(props.xOffset) * 2) / sizes.width.value;\n    if ((camera.value as PerspectiveCamera | undefined)?.isPerspectiveCamera) {\n        (camera.value as PerspectiveCamera).setViewOffset(\n            sizes.width.value * zoomMultiple,\n            sizes.height.value * zoomMultiple,\n            props.xOffset > 0 ? props.xOffset * 2 : 0,\n            sizes.height.value * (zoomMultiple - 1) / 2,\n            sizes.width.value,\n            sizes.height.value);\n    }\n\n}, {immediate: true})\n\n\nreturn () => {}\n}\n\n})","import script from \"./CameraOffsetHelper.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./CameraOffsetHelper.vue?vue&type=script&lang=ts&setup=true\"\n\nconst __exports__ = script;\n\nexport default __exports__","<!-- Fix problem with blurry image on mobile devices. -->\n\n<script setup lang=\"ts\" >\nimport { useTresContext } from '@tresjs/core';\nconst { renderer } = useTresContext();\nrenderer.value.setPixelRatio(window.devicePixelRatio);\n</script>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue';\nexport default defineComponent({                                    \n    name: \"RendererHelper\",\n    components: {}\n}) \n</script>","import { defineComponent as _defineComponent } from 'vue'\nimport { useTresContext } from '@tresjs/core';\n\nimport { defineComponent } from 'vue';\nconst __default__ = defineComponent({                                    \n    name: \"RendererHelper\",\n    components: {}\n}) \n\n\nexport default /*#__PURE__*/_defineComponent({\n  ...__default__,\n  setup(__props) {\n\nconst { renderer } = useTresContext();\nrenderer.value.setPixelRatio(window.devicePixelRatio);\n\nreturn () => {}\n}\n\n})","import script from \"./RendererHelper.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./RendererHelper.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { useCssVars as _useCssVars, defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, withCtx as _withCtx, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle, isRef as _isRef, vModelCheckbox as _vModelCheckbox, vModelRadio as _vModelRadio, vShow as _vShow, withKeys as _withKeys, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\nimport _imports_0 from './assets/world-map-coordinates-correct.png'\n\n\nconst _withScopeId = (n: any) => (_pushScopeId(\"data-v-0e88b5d6\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { style: {\"width\":\"100%\",\"height\":\"100%\",\"position\":\"fixed\",\"left\":\"0\",\"top\":\"0\"} }\nconst _hoisted_2 = { id: \"overlay\" }\nconst _hoisted_3 = { id: \"sidebarContent\" }\nconst _hoisted_4 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Coordinates\", -1))\nconst _hoisted_5 = { class: \"horizontal_settings\" }\nconst _hoisted_6 = { class: \"setting\" }\nconst _hoisted_7 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", { class: \"fieldTitle\" }, \"Latitude/°\", -1))\nconst _hoisted_8 = {\n  key: 0,\n  class: \"error\"\n}\nconst _hoisted_9 = { class: \"setting\" }\nconst _hoisted_10 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", { class: \"fieldTitle\" }, \"Longitude/°\", -1))\nconst _hoisted_11 = {\n  key: 0,\n  class: \"error\"\n}\nconst _hoisted_12 = { class: \"setting\" }\nconst _hoisted_13 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", { class: \"fieldTitle\" }, \"Time Zone/±UTC\", -1))\nconst _hoisted_14 = {\n  key: 0,\n  class: \"error\"\n}\nconst _hoisted_15 = { style: {\"display\":\"grid\",\"grid-template-columns\":\"min-content auto\",\"grid-template-rows\":\"min-content auto\"} }\nconst _hoisted_16 = { style: {\"position\":\"relative\",\"aspect-ratio\":\"2 / 1\"} }\nconst _hoisted_17 = { class: \"setting\" }\nconst _hoisted_18 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"autoSelectTimeZone\",\n  class: \"fieldOption\"\n}, \"Automatically set time zone\", -1))\nconst _hoisted_19 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1))\nconst _hoisted_20 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Sundial Settings\", -1))\nconst _hoisted_21 = { class: \"setting\" }\nconst _hoisted_22 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", { class: \"fieldTitle\" }, \"Slant/°\", -1))\nconst _hoisted_23 = {\n  key: 0,\n  class: \"error\"\n}\nconst _hoisted_24 = { class: \"setting\" }\nconst _hoisted_25 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", { class: \"fieldTitle\" }, \"Rotation/°\", -1))\nconst _hoisted_26 = {\n  key: 0,\n  class: \"error\"\n}\nconst _hoisted_27 = { class: \"setting\" }\nconst _hoisted_28 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", { class: \"fieldTitle\" }, \"Hour lines\", -1))\nconst _hoisted_29 = { class: \"checkboxSetting\" }\nconst _hoisted_30 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"solarLines\",\n  class: \"fieldOption\"\n}, \"Solar time\", -1))\nconst _hoisted_31 = { class: \"checkboxSetting\" }\nconst _hoisted_32 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"standardLines\",\n  class: \"fieldOption\"\n}, \"Adjusted for time zone\", -1))\nconst _hoisted_33 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1))\nconst _hoisted_34 = { class: \"setting\" }\nconst _hoisted_35 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", { class: \"fieldTitle\" }, \"Numerals\", -1))\nconst _hoisted_36 = { class: \"checkboxSetting\" }\nconst _hoisted_37 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"arabic\",\n  class: \"fieldOption\"\n}, \"Western Arabic (0-23)\", -1))\nconst _hoisted_38 = { class: \"checkboxSetting\" }\nconst _hoisted_39 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"roman\",\n  class: \"fieldOption\"\n}, \"Roman (I-XXIV)\", -1))\nconst _hoisted_40 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1))\nconst _hoisted_41 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Misc\", -1))\nconst _hoisted_42 = { class: \"checkboxSetting\" }\nconst _hoisted_43 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"sunRaysPassThroughEarth\",\n  class: \"fieldOption\"\n}, \"Sundial remains illuminated at night\", -1))\nconst _hoisted_44 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1))\nconst _hoisted_45 = { class: \"status\" }\nconst _hoisted_46 = { style: {\"display\":\"flex\",\"flex-direction\":\"row\"} }\nconst _hoisted_47 = { style: {\"display\":\"flex\",\"margin-left\":\"10px\",\"justify-content\":\"space-between\",\"flex-direction\":\"column\",\"align-items\":\"stretch\",\"padding-block\":\"9px\"} }\nconst _hoisted_48 = { class: \"subtitle\" }\nconst _hoisted_49 = { class: \"subtitle\" }\nconst _hoisted_50 = { class: \"subtitle\" }\nconst _hoisted_51 = { class: \"subtitle\" }\nconst _hoisted_52 = { class: \"subtitle\" }\n\nimport { TresCanvas } from '@tresjs/core';\n\n\n    \n    /*\n     * Config\n     */\n    \n    import { Line2, OrbitControls } from '@tresjs/cientos'\n    import { onClickOutside } from '@vueuse/core'\n    import interpolate from \"color-interpolate\";\n    import { computed, defineComponent, nextTick, onMounted, reactive, ref, watch } from 'vue'\n    import SunObject from './components/SunObject.vue';\n    import { decimal, helpers, maxValue, minValue, required } from '@vuelidate/validators';\n    import useVuelidate from '@vuelidate/core';\n    import { BasicShadowMap, Vector3, Plane, Euler, Matrix4,} from 'three';\n    import { dateToString, calculateShadowDirection, horizontalToActualCoords, calculateSunHorizontalCoords, timeToString, timeZoneToString, infiniteLineIntersectWithSphereParameters, infiniteLineIntersectWithPlaneWithDir, longitudeToTimeZone, stringToTime } from '@/calculations';\n    import SundialObject from './components/SundialObject.vue';\n    import CameraOffsetHelper from './components/CameraOffsetHelper.vue';\n    import RendererHelper from './components/RendererHelper.vue';\n    const __default__ = defineComponent({\n        name:\"App\",\n        components: {SundialObject, SunObject}\n    })\n\n\nexport default /*#__PURE__*/_defineComponent({\n  ...__default__,\n  setup(__props) {\n\n_useCssVars(_ctx => ({\n  \"0cea6554\": (_unref(statusTextColor))\n}))\n\n\n    const sundialOrigin = new Vector3(0, -0.5, 0);\n    /** relative to sundial origin and rotation */\n    const gnomonRelativePosition = ref<number[]>([0,1,0]);\n    /** euler angle */\n    let sundialRotation = ref<Euler>(new Euler(0,0,0, \"YXZ\"));\n    let sundialNormal = computed(() => new Vector3(0, 1, 0).applyEuler(sundialRotation.value));\n\n\n    /*\n     * Independent variables\n     */\n    /** 0 to 24*60 */\n    let localTime = ref<number>(12 * 60);\n    /** 0 to 364 (integer) */\n    let day = ref<number>(156);\n    let longitude = ref<number>(0);\n    let latitude = ref<number>(0);\n    let autoSelectTimeZone = ref(true);\n    /** +/- minutes UTC */\n    let timeZone = ref<number>(0);\n    let numerals = ref<\"roman\"|\"arabic\">(\"arabic\");\n    let sunRaysPassThroughEarth = ref(false);\n    let hourLineStyle = ref<\"solar\"|\"standard\">(\"solar\");\n\n\n    /*\n     * Allow the time to be input manually.\n     */\n    let isEditingTime = ref<boolean>(false);\n    /** What's in the time manual entry box */\n    let timeEntryValue = ref<string>(\"\");\n    const timeEntryBox = ref<HTMLInputElement | null>(null);   \n    function showTimeEntryBox() {\n        if (isEditingTime.value == false) {\n            isEditingTime.value = true;\n            timeEntryValue.value = timeToString(localTime.value);\n\n            nextTick(() => timeEntryBox.value?.focus());\n            \n        }\n    }\n    function hideTimeEntryBox() {\n        if (isEditingTime.value == true) {\n            isEditingTime.value = false\n            \n            if (!timeEntryBox.value) return;\n\n            const newTime = stringToTime(timeEntryBox.value.value);\n            if (isNaN(newTime)) return;\n\n            localTime.value = newTime;\n        }\n    }\n    onClickOutside(timeEntryBox, hideTimeEntryBox)\n\n\n    /*\n     * Sidebar form validation \n     */\n    const formDefaults = {\n        latitude:\"45.00\",\n        longitude:\"0.00\",\n        timeZone:\"+0:00\",\n        slant:\"0\",\n        rotation:\"0\",\n    }\n\n    /** used to parse time zone user input*/\n    const timeZoneRegex = /^\\s*([+-±]?)\\s*((?:0?[0-9])|1[0-9])(?::((?:0[0-9])|[1-5][0-9]))?\\s*$/;\n\n    let formState = reactive(formDefaults);\n    const formRules = computed<Record<keyof typeof formDefaults, any>>(() => ({\n        latitude: {\n            required,\n            decimal,\n            minValue:minValue(-90),\n            maxValue:maxValue(90)\n        },\n        longitude: {\n            required,\n            decimal,\n            minValue:minValue(-180),\n            maxValue:maxValue(180)\n        },\n        timeZone: {\n            isATimeZone: helpers.withMessage(\"Your time zone should look like +/-HH(:MM)\", helpers.regex(timeZoneRegex))\n        },\n        slant: {\n            required,\n            decimal,\n            minValue:minValue(0),\n            maxValue:maxValue(180)\n        },\n        rotation: {\n            required,\n            decimal,\n            minValue:minValue(-180),\n            maxValue:maxValue(180)\n        }\n    }))\n    const v$ = useVuelidate(formRules, formState)\n\n    // parse and updadte whenever valid entries are changed in the form.\n    watch(() => formState.longitude, newVal => {\n        if (!v$.value.longitude.$invalid) {\n            longitude.value = Number.parseFloat(newVal);\n            // set the time zone as well.\n            if (autoSelectTimeZone.value) {\n                formState.timeZone = timeZoneToString(longitudeToTimeZone(longitude.value));\n            }\n        }\n    }, { immediate: true })\n    watch(() => formState.latitude, newVal => {\n        if (!v$.value.latitude.$invalid) latitude.value = Number.parseFloat(newVal);\n    }, {immediate:true})\n    watch(() => formState.timeZone, newVal => {\n        const result = newVal.match(timeZoneRegex);\n        if (result) {\n            const newValInt = (result[1] == \"-\" ? -1 : 1) * (Number.parseInt(result[2]) * 60 + Number.parseInt(result[3] ?? 0));\n            // change the local time so that the global time remains consistent\n            localTime.value = (((localTime.value + newValInt - timeZone.value) % 1440) + 1440) % 1440\n            timeZone.value = newValInt;\n        }\n    }, {immediate:true})\n    watch(() => formState.slant, newVal => {\n        if (!v$.value.slant.$invalid) sundialRotation.value.x = Number.parseFloat(newVal) * Math.PI/180;\n    }, {immediate: true})\n    watch(() => formState.rotation, newVal => {\n        if (!v$.value.rotation.$invalid) sundialRotation.value.y = -Number.parseFloat(newVal) * Math.PI / 180;\n    }, { immediate: true })\n\n    /**\n     * Set the latitude and longitude when the user clicks on the map.\n     */ \n    let mapImage = ref<HTMLImageElement>();\n    let mapImageIsBeingClicked = ref(false);\n    function setLatLngFromMap(e:MouseEvent) {\n        if (mapImage.value) {\n            const longitude = e.offsetX / mapImage.value.width * 360 - 180;\n            const latitude = 90 - e.offsetY / mapImage.value.height * 180;\n            formState.longitude = longitude.toFixed(1);\n            formState.latitude = latitude.toFixed(1);\n        }\n    }\n    function mapImageMouseMove(e:MouseEvent) {\n        if (mapImageIsBeingClicked.value) setLatLngFromMap(e)\n    }\n    function mapImageStartClicking() {\n        mapImageIsBeingClicked.value = true;\n    }\n    function mapImageClick(e:MouseEvent) {\n        setLatLngFromMap(e)\n    }\n    onMounted(() => {\n        window.addEventListener(\"mouseup\", () => {\n            mapImageIsBeingClicked.value = false;\n        })\n    })\n\n    // get the dimensions of the sidebar for layout\n    let sidebarDims = ref({ clientWidth: 0, clientHeight: 0 });\n    const sidebar = ref<HTMLDivElement>();\n    const sidebarResizeObserver = new ResizeObserver(() => {\n        const clientWidth = sidebar.value?.clientWidth ?? 0;\n        const clientHeight = sidebar.value?.clientHeight ?? 0;\n        sidebarDims.value = { clientWidth, clientHeight }\n    })\n    onMounted(() => {\n        sidebarResizeObserver.observe(sidebar.value as HTMLDivElement);\n    })\n\n\n    // set the time zone as the user clicks the checkbox\n    watch(() => autoSelectTimeZone.value, value => {\n        if (value) {\n            formState.timeZone = timeZoneToString(longitudeToTimeZone(longitude.value));\n        }\n    })\n\n    /**\n     * computed values\n     */\n    /** convert local time to UTC +0 */\n    let time = computed(() => (((localTime.value - timeZone.value) % 1440) + 1440) % 1440)\n    let sunHorizontalCoords = computed(() => calculateSunHorizontalCoords(day.value, time.value, latitude.value, longitude.value));\n    let sunCoords = computed(() => horizontalToActualCoords(sunHorizontalCoords.value.azimuth, sunHorizontalCoords.value.altitude))\n    // let gnomonRotation = computed(() => (90-latitude.value)*Math.PI/180);\n    let isDaytime = computed(() => sunHorizontalCoords.value.altitude >= 0);\n    let statusTextColor = computed(() => isDaytime.value ? \"black\" : \"white\")\n    let timeText = computed(() => timeToString(localTime.value))\n    let dateText = computed(() => dateToString(day.value));\n    let meanSolarTime = computed(() => time.value + ((longitude.value/360)*24*60));\n    let meanSolarTimeText = computed(() => timeToString(meanSolarTime.value));\n    let apparentSolarTime = computed(() => {\n        // use the already-computed sun position. This isn't actualy dependent on the latitude irl. Just seemed the easiest way to do it here.\n        // to calculate this, rotate sun position (90°-latitude) anticlockwise about x axis (west to east axis). Then work out projected angle in the x/z (horizontal) plain.\n        const latRad = latitude.value * Math.PI/180;\n        const timeHours = Math.atan2(sunCoords.value.y * Math.cos(latRad) + sunCoords.value.z * Math.sin(latRad), sunCoords.value.x) * 12 / Math.PI + 6;\n        const timeMins = (((timeHours % 24) + 24) % 24) * 60;\n        return timeMins;\n    })\n    let apparentSolarTimeText = computed(() => timeToString(apparentSolarTime.value))\n    let timeZoneText = computed(() => timeZoneToString(timeZone.value))\n    let sunlightIntensity = computed(() => {\n        // a very unscientific way of calculating the apparent sunlight intensity.\n        // have a little bit of sunlight when the sun is below the horizon.\n        if (sunHorizontalCoords.value.altitude > 0.1) return 1;\n        if (sunHorizontalCoords.value.altitude > -0.1) return (sunHorizontalCoords.value.altitude + 0.1)/0.2;\n        return 0;\n    })\n    let skyColor = computed(() => {\n        // make the sky look nice innit\n        return interpolate([\"#02407a\", \"#87CEEB\"])(sunlightIntensity.value);\n    })\n    let gnomonAbsolutePosition = computed(() => {\n        return new Vector3(...gnomonRelativePosition.value)\n            .applyEuler(sundialRotation.value)\n            .add(new Vector3(...sundialOrigin))\n    })\n    /** if there is an interection return it, and whether the intersection is in the positive direction of the gnomon vector.*/\n    let stylePlateIntersection = computed(() => {\n        // intersect the plane of the plate with the line of the sundial gnomon.\n        const plane = new Plane(sundialNormal.value, 0).translate(new Vector3(...sundialOrigin));\n        const rayDir = new Vector3(0, -(Math.sin(latitude.value * Math.PI / 180)), (Math.cos(latitude.value * Math.PI / 180)));\n        return infiniteLineIntersectWithPlaneWithDir(plane, gnomonAbsolutePosition.value, rayDir);\n    })\n    let stylePlateIntersectionPoint = computed(() => stylePlateIntersection.value?.point ?? null);\n\n    /** If the gnomon is parallel to the plate, this currently messes up the calculations. So just change the coordinates a tiny bit. VERY BAD AND LAZY CODE, @todo make not bad*/\n    watch(stylePlateIntersectionPoint, value => {\n        if (!value) {\n            latitude.value += 0.00001 * (Math.random()+0.5) * (latitude.value > 0 ? -1: 1)\n            longitude.value += 0.00001 * (Math.random()+0.5) * (longitude.value > 0 ? -1: 1)\n        }\n    }, {immediate: true})\n\n    /** If the intersection with the plate lies on the line between the center of the gnomon and celestial north, then this value is -1. If south, then 1.*/\n    let stylePlateIntersectionPointOrder = computed(() => stylePlateIntersection.value?.dir ?? null)\n    \n    const hourLineHours = [...Array(24).keys()];\n    // angle of each line on the sundial that represents one hour.\n    let hourLineDirections = computed(() => hourLineHours.map(i => {\n        let offsetHour;\n        if (hourLineStyle.value == 'standard') {\n            // need to adjust for time zones\n            offsetHour = i - timeZone.value/60 + longitude.value*24/360\n        }\n        else {\n            offsetHour = i;\n        }\n        return calculateShadowDirection(\n            ((((offsetHour * 60) % 1440) + 1440) % 1440) * Math.PI * 2 / 1440,\n            latitude.value * Math.PI / 180,\n            new Vector3(...sundialNormal.value)\n        ).multiplyScalar((stylePlateIntersectionPointOrder.value ?? 1))\n        // the scalar multiple is to fix a bug with the numerals being offset by 12 hours in some cases.\n    }));\n\n\n\n    // lambdas of the formula plateStyleIntersectionPoint + lambda * shadowDir such that it intersects the edge of the sundial plate.\n    let hourLineSundialSphereIntersectionParameters = computed(() => {\n        if (stylePlateIntersectionPoint.value) {\n            // to get the portion of the line we want, intersect each hour line with a sphere centered on the sundial plate origin.\n            return hourLineDirections.value.map((shadowDir, i) => {\n                const lambdas = infiniteLineIntersectWithSphereParameters(new Vector3(...sundialOrigin), 5, stylePlateIntersectionPoint.value as Vector3, shadowDir)\n                if (lambdas.length == 0) return [];\n                // lambda = 0 is the plate/style intersection point. Negative values are on the wrong side.\n                if (lambdas[0] < 0 && lambdas[1] < 0) return [];\n                // only display positive values\n                if (lambdas[0] < 0) lambdas[0] = 0;\n                // we know that lambdas[1] > 0.\n                return lambdas\n            })\n        }\n        else {\n            // special case when style is parallel to the plate, and the style/plate intersection point does not exist\n            /** @todo */\n            return hourLineDirections.value.map((angle, i) => [])\n        }\n    })\n\n    // vector to raise the sundial lines a bit off the plate\n    let plateToHourLineHeight = computed(() => sundialNormal.value.clone().normalize().multiplyScalar(0.007));\n\n    let hourLines = computed(() => hourLineHours.map((hour, i) => {\n        const shadowDir = hourLineDirections.value[i];\n        const lambdas = hourLineSundialSphereIntersectionParameters.value[i];\n        return {\n            hour: hour,\n            label: (() => {\n                switch (numerals.value) {\n                    case 'arabic': return hour.toString()\n                    case 'roman': return [\"XXIV\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"XIII\", \"XIV\", \"XV\", \"XVI\", \"XVII\", \"XVIII\", \"XIX\", \"XX\", \"XXI\", \"XXII\", \"XXIII\"].at(hour) ?? \"\";\n                }\n            })(),\n            points: lambdas.length == 0 ? null : [\n                shadowDir.clone().multiplyScalar(lambdas[0]).add(stylePlateIntersectionPoint.value as Vector3).add(plateToHourLineHeight.value),\n                shadowDir.clone().multiplyScalar(lambdas[1]).add(stylePlateIntersectionPoint.value as Vector3).add(plateToHourLineHeight.value),\n            ],\n            labelPoint: (() => {\n                // where the label should be displayed.\n                if (stylePlateIntersectionPoint.value) {\n                    // the sundial radius is 5. Intersect the hour line with a sphere of radius 4, centered on the sundial origin\n                    const labelSphereIntersectLambdas = infiniteLineIntersectWithSphereParameters(new Vector3(...sundialOrigin), 4, stylePlateIntersectionPoint.value as Vector3, shadowDir);\n                    if (labelSphereIntersectLambdas.length == 0) return null;\n                    if (labelSphereIntersectLambdas[1] < 0) return null;\n                    const point = shadowDir.clone().multiplyScalar(labelSphereIntersectLambdas[1]).add(stylePlateIntersectionPoint.value as Vector3);\n                    // prevent numbers from getting too bunched up\n                    if (stylePlateIntersectionPoint.value?.distanceTo(point) < 3) return null;\n                    // move to relative coordinate of sundial\n                    point.sub(sundialOrigin).applyMatrix4(new Matrix4().makeRotationFromEuler(sundialRotation.value).invert())\n                    return point.toArray();\n                } else {\n                    /** @todo */\n                    return null;\n                }\n            })()\n        }\n    }));\n   \n\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_TresPerspectiveCamera = _resolveComponent(\"TresPerspectiveCamera\")!\n  const _component_TresDirectionalLight = _resolveComponent(\"TresDirectionalLight\")!\n  const _component_TresAmbientLight = _resolveComponent(\"TresAmbientLight\")!\n  const _component_TresGridHelper = _resolveComponent(\"TresGridHelper\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createElementVNode(\"div\", _hoisted_1, [\n      _createVNode(_unref(TresCanvas), {\n        \"clear-color\": _unref(skyColor),\n        shadows: \"\",\n        shadowMapType: _unref(BasicShadowMap)\n      }, {\n        default: _withCtx(() => [\n          _createVNode(_component_TresPerspectiveCamera),\n          _createVNode(SundialObject, {\n            latitude: _unref(latitude),\n            origin: _unref(sundialOrigin),\n            rotation: _unref(sundialRotation),\n            \"gnomon-position\": gnomonRelativePosition.value,\n            \"hour-labels\": _unref(hourLines)\n          }, null, 8, [\"latitude\", \"origin\", \"rotation\", \"gnomon-position\", \"hour-labels\"]),\n          _createVNode(SunObject, {\n            position: [_unref(sunCoords).x, _unref(sunCoords).y, _unref(sunCoords).z]\n          }, null, 8, [\"position\"]),\n          (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(hourLines), (hourLine) => {\n            return (_openBlock(), _createBlock(_unref(Line2), {\n              key: hourLine.hour,\n              \"line-width\": 1,\n              points: hourLine.points ?? [[0,0,0], [0,0,0]],\n              color: \"#FFFFFF\"\n            }, null, 8, [\"points\"]))\n          }), 128)),\n          _createVNode(_component_TresDirectionalLight, {\n            position: [_unref(sunCoords).x, _unref(sunCoords).y, _unref(sunCoords).z],\n            intensity: _unref(sunRaysPassThroughEarth) ? 1 : _unref(sunlightIntensity),\n            \"shadow-mapSize-width\": 2048,\n            \"shadow-mapSize-height\": 2048,\n            \"cast-shadow\": \"\"\n          }, null, 8, [\"position\", \"intensity\"]),\n          _createVNode(_component_TresAmbientLight, { color: \"#AAAAAA\" }),\n          _createVNode(_unref(OrbitControls), {\n            \"enable-damping\": false,\n            \"rotate-speed\": 0.5,\n            \"enable-pan\": false,\n            target: [0,0,0]\n          }),\n          _createVNode(_component_TresGridHelper, {\n            args: [50, 50, '#AAAAAA', '#AAAAAA'],\n            position: [0, -8, 0]\n          }),\n          _createVNode(CameraOffsetHelper, {\n            \"x-offset\": -(_unref(sidebarDims).clientWidth)/2\n          }, null, 8, [\"x-offset\"]),\n          _createVNode(RendererHelper)\n        ]),\n        _: 1\n      }, 8, [\"clear-color\", \"shadowMapType\"])\n    ]),\n    _createElementVNode(\"div\", _hoisted_2, [\n      _createElementVNode(\"div\", {\n        id: \"sidebar\",\n        ref_key: \"sidebar\",\n        ref: sidebar\n      }, [\n        _createElementVNode(\"div\", _hoisted_3, [\n          _hoisted_4,\n          _createElementVNode(\"div\", _hoisted_5, [\n            _createElementVNode(\"div\", _hoisted_6, [\n              _hoisted_7,\n              _withDirectives(_createElementVNode(\"input\", {\n                class: \"small_input\",\n                \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((_unref(v$).latitude.$model) = $event))\n              }, null, 512), [\n                [_vModelText, _unref(v$).latitude.$model]\n              ]),\n              (_unref(v$).latitude.$dirty && _unref(v$).latitude.$invalid)\n                ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, _toDisplayString(_unref(v$).latitude.$errors[0].$message), 1))\n                : _createCommentVNode(\"\", true)\n            ]),\n            _createElementVNode(\"div\", _hoisted_9, [\n              _hoisted_10,\n              _withDirectives(_createElementVNode(\"input\", {\n                class: \"small_input\",\n                \"onUpdate:modelValue\": _cache[1] || (_cache[1] = ($event: any) => ((_unref(v$).longitude.$model) = $event))\n              }, null, 512), [\n                [_vModelText, _unref(v$).longitude.$model]\n              ]),\n              (_unref(v$).longitude.$dirty &&_unref(v$).longitude.$invalid)\n                ? (_openBlock(), _createElementBlock(\"div\", _hoisted_11, _toDisplayString(_unref(v$).longitude.$errors[0].$message), 1))\n                : _createCommentVNode(\"\", true)\n            ]),\n            _createElementVNode(\"div\", _hoisted_12, [\n              _hoisted_13,\n              _withDirectives(_createElementVNode(\"input\", {\n                class: \"small_input\",\n                \"onUpdate:modelValue\": _cache[2] || (_cache[2] = ($event: any) => ((_unref(v$).timeZone.$model) = $event))\n              }, null, 512), [\n                [_vModelText, _unref(v$).timeZone.$model]\n              ]),\n              (_unref(v$).timeZone.$dirty && _unref(v$).timeZone.$invalid)\n                ? (_openBlock(), _createElementBlock(\"div\", _hoisted_14, _toDisplayString(_unref(v$).timeZone.$errors[0].$message), 1))\n                : _createCommentVNode(\"\", true)\n            ])\n          ]),\n          _createElementVNode(\"div\", _hoisted_15, [\n            _withDirectives(_createElementVNode(\"input\", {\n              style: {\"grid-row\":\"1\",\"grid-column\":\"1\",\"margin-right\":\"10px\",\"height\":\"100%\",\"margin-top\":\"0px\",\"margin-bottom\":\"0px\"},\n              type: \"range\",\n              min: \"-90\",\n              max: \"90\",\n              step: \"-0.1\",\n              class: \"slider\",\n              orient: \"vertical\",\n              \"onUpdate:modelValue\": _cache[3] || (_cache[3] = ($event: any) => ((_unref(v$).latitude.$model) = $event))\n            }, null, 512), [\n              [_vModelText, _unref(v$).latitude.$model]\n            ]),\n            _createElementVNode(\"div\", _hoisted_16, [\n              _createElementVNode(\"img\", {\n                src: _imports_0,\n                id: \"mapImage\",\n                alt: \"An outline world map, on which the user can click to set the latitude and longitude.\",\n                style: {\"grid-row\":\"1\",\"grid-column\":\"2\",\"object-fit\":\"contain\",\"display\":\"block\",\"margin\":\"0px\"},\n                draggable: \"false\",\n                onMousemove: mapImageMouseMove,\n                onMousedown: mapImageStartClicking,\n                onClick: mapImageClick,\n                ref_key: \"mapImage\",\n                ref: mapImage\n              }, null, 544),\n              _createElementVNode(\"div\", {\n                id: \"markerPoint\",\n                style: _normalizeStyle(`top:${(90 - _unref(latitude)) * 100 / 180}%; left:${(_unref(longitude)+180) * 100 / 360}%`)\n              }, null, 4)\n            ]),\n            _withDirectives(_createElementVNode(\"input\", {\n              style: {\"grid-row\":\"2\",\"grid-column\":\"2\",\"margin-top\":\"10px\",\"margin-left\":\"0px\",\"margin-right\":\"0px\"},\n              type: \"range\",\n              min: \"-180\",\n              max: \"180\",\n              step: \"0.1\",\n              class: \"slider\",\n              \"onUpdate:modelValue\": _cache[4] || (_cache[4] = ($event: any) => ((_unref(v$).longitude.$model) = $event))\n            }, null, 512), [\n              [_vModelText, _unref(v$).longitude.$model]\n            ])\n          ]),\n          _createElementVNode(\"div\", _hoisted_17, [\n            _withDirectives(_createElementVNode(\"input\", {\n              type: \"checkbox\",\n              id: \"autoSelectTimeZone\",\n              \"onUpdate:modelValue\": _cache[5] || (_cache[5] = ($event: any) => (_isRef(autoSelectTimeZone) ? (autoSelectTimeZone).value = $event : autoSelectTimeZone = $event)),\n              style: {\"margin-right\":\"10px\",\"display\":\"inline\"}\n            }, null, 512), [\n              [_vModelCheckbox, _unref(autoSelectTimeZone)]\n            ]),\n            _hoisted_18\n          ]),\n          _hoisted_19,\n          _hoisted_20,\n          _createElementVNode(\"div\", _hoisted_21, [\n            _hoisted_22,\n            _withDirectives(_createElementVNode(\"input\", {\n              class: \"small_input\",\n              \"onUpdate:modelValue\": _cache[6] || (_cache[6] = ($event: any) => ((_unref(v$).slant.$model) = $event))\n            }, null, 512), [\n              [_vModelText, _unref(v$).slant.$model]\n            ]),\n            (_unref(v$).slant.$dirty && _unref(v$).slant.$invalid)\n              ? (_openBlock(), _createElementBlock(\"div\", _hoisted_23, _toDisplayString(_unref(v$).slant.$errors[0].$message), 1))\n              : _createCommentVNode(\"\", true),\n            _withDirectives(_createElementVNode(\"input\", {\n              type: \"range\",\n              min: 0,\n              max: 180,\n              step: \"1\",\n              class: \"slider\",\n              \"onUpdate:modelValue\": _cache[7] || (_cache[7] = ($event: any) => ((_unref(v$).slant.$model) = $event))\n            }, null, 512), [\n              [_vModelText, _unref(v$).slant.$model]\n            ])\n          ]),\n          _createElementVNode(\"div\", _hoisted_24, [\n            _hoisted_25,\n            _withDirectives(_createElementVNode(\"input\", {\n              class: \"small_input\",\n              \"onUpdate:modelValue\": _cache[8] || (_cache[8] = ($event: any) => ((_unref(v$).rotation.$model) = $event))\n            }, null, 512), [\n              [_vModelText, _unref(v$).rotation.$model]\n            ]),\n            (_unref(v$).rotation.$dirty && _unref(v$).rotation.$invalid)\n              ? (_openBlock(), _createElementBlock(\"div\", _hoisted_26, _toDisplayString(_unref(v$).rotation.$errors[0].$message), 1))\n              : _createCommentVNode(\"\", true),\n            _withDirectives(_createElementVNode(\"input\", {\n              type: \"range\",\n              min: -180,\n              max: 180,\n              step: \"1\",\n              class: \"slider\",\n              \"onUpdate:modelValue\": _cache[9] || (_cache[9] = ($event: any) => ((_unref(v$).rotation.$model) = $event))\n            }, null, 512), [\n              [_vModelText, _unref(v$).rotation.$model]\n            ])\n          ]),\n          _createElementVNode(\"div\", _hoisted_27, [\n            _hoisted_28,\n            _createElementVNode(\"div\", _hoisted_29, [\n              _withDirectives(_createElementVNode(\"input\", {\n                type: \"radio\",\n                id: \"solarLines\",\n                value: \"solar\",\n                \"onUpdate:modelValue\": _cache[10] || (_cache[10] = ($event: any) => (_isRef(hourLineStyle) ? (hourLineStyle).value = $event : hourLineStyle = $event))\n              }, null, 512), [\n                [_vModelRadio, _unref(hourLineStyle)]\n              ]),\n              _hoisted_30\n            ]),\n            _createElementVNode(\"div\", _hoisted_31, [\n              _withDirectives(_createElementVNode(\"input\", {\n                type: \"radio\",\n                id: \"standardLines\",\n                value: \"standard\",\n                \"onUpdate:modelValue\": _cache[11] || (_cache[11] = ($event: any) => (_isRef(hourLineStyle) ? (hourLineStyle).value = $event : hourLineStyle = $event))\n              }, null, 512), [\n                [_vModelRadio, _unref(hourLineStyle)]\n              ]),\n              _hoisted_32\n            ])\n          ]),\n          _hoisted_33,\n          _createElementVNode(\"div\", _hoisted_34, [\n            _hoisted_35,\n            _createElementVNode(\"div\", _hoisted_36, [\n              _withDirectives(_createElementVNode(\"input\", {\n                type: \"radio\",\n                id: \"arabic\",\n                value: \"arabic\",\n                \"onUpdate:modelValue\": _cache[12] || (_cache[12] = ($event: any) => (_isRef(numerals) ? (numerals).value = $event : numerals = $event))\n              }, null, 512), [\n                [_vModelRadio, _unref(numerals)]\n              ]),\n              _hoisted_37\n            ]),\n            _createElementVNode(\"div\", _hoisted_38, [\n              _withDirectives(_createElementVNode(\"input\", {\n                type: \"radio\",\n                id: \"roman\",\n                value: \"roman\",\n                \"onUpdate:modelValue\": _cache[13] || (_cache[13] = ($event: any) => (_isRef(numerals) ? (numerals).value = $event : numerals = $event))\n              }, null, 512), [\n                [_vModelRadio, _unref(numerals)]\n              ]),\n              _hoisted_39\n            ])\n          ]),\n          _hoisted_40,\n          _hoisted_41,\n          _createElementVNode(\"div\", _hoisted_42, [\n            _withDirectives(_createElementVNode(\"input\", {\n              type: \"checkbox\",\n              id: \"sunRaysPassThroughEarth\",\n              \"onUpdate:modelValue\": _cache[14] || (_cache[14] = ($event: any) => (_isRef(sunRaysPassThroughEarth) ? (sunRaysPassThroughEarth).value = $event : sunRaysPassThroughEarth = $event))\n            }, null, 512), [\n              [_vModelCheckbox, _unref(sunRaysPassThroughEarth)]\n            ]),\n            _hoisted_43\n          ]),\n          _hoisted_44\n        ])\n      ], 512),\n      _createElementVNode(\"div\", _hoisted_45, [\n        _createElementVNode(\"div\", _hoisted_46, [\n          _withDirectives(_createElementVNode(\"div\", {\n            class: \"time_display\",\n            onClick: showTimeEntryBox,\n            onKeydown: _withKeys(showTimeEntryBox, [\"space\"]),\n            tabindex: \"0\"\n          }, _toDisplayString(_unref(timeText)), 545), [\n            [_vShow, !_unref(isEditingTime)]\n          ]),\n          _withDirectives(_createElementVNode(\"input\", {\n            ref_key: \"timeEntryBox\",\n            ref: timeEntryBox,\n            class: \"timeEntryBox\",\n            onBlur: hideTimeEntryBox,\n            onKeydown: _withKeys(hideTimeEntryBox, [\"enter\"]),\n            \"onUpdate:modelValue\": _cache[15] || (_cache[15] = ($event: any) => (_isRef(timeEntryValue) ? (timeEntryValue).value = $event : timeEntryValue = $event))\n          }, null, 544), [\n            [_vShow, _unref(isEditingTime)],\n            [_vModelText, _unref(timeEntryValue)]\n          ]),\n          _withDirectives(_createElementVNode(\"div\", _hoisted_47, [\n            _createElementVNode(\"div\", _hoisted_48, _toDisplayString(_unref(isDaytime) ? \"☀️\" : \"🌙\"), 1),\n            _createElementVNode(\"div\", _hoisted_49, \"UTC \" + _toDisplayString(_unref(timeZoneText)), 1)\n          ], 512), [\n            [_vShow, !_unref(isEditingTime)]\n          ])\n        ]),\n        _createElementVNode(\"div\", _hoisted_50, _toDisplayString(_unref(meanSolarTimeText)) + \" mean solar time\", 1),\n        _createElementVNode(\"div\", _hoisted_51, _toDisplayString(_unref(apparentSolarTimeText)) + \" apparent solar time\", 1),\n        _withDirectives(_createElementVNode(\"input\", {\n          type: \"range\",\n          min: \"0\",\n          max: \"1440\",\n          step: \"10\",\n          class: \"slider\",\n          id: \"time\",\n          \"onUpdate:modelValue\": _cache[16] || (_cache[16] = ($event: any) => (_isRef(localTime) ? (localTime).value = $event : localTime = $event))\n        }, null, 512), [\n          [\n            _vModelText,\n            _unref(localTime),\n            void 0,\n            { number: true }\n          ]\n        ]),\n        _createElementVNode(\"div\", _hoisted_52, _toDisplayString(_unref(dateText)), 1),\n        _withDirectives(_createElementVNode(\"input\", {\n          type: \"range\",\n          min: \"0\",\n          max: \"364\",\n          step: \"1\",\n          class: \"slider\",\n          id: \"day\",\n          \"onUpdate:modelValue\": _cache[17] || (_cache[17] = ($event: any) => (_isRef(day) ? (day).value = $event : day = $event))\n        }, null, 512), [\n          [\n            _vModelText,\n            _unref(day),\n            void 0,\n            { number: true }\n          ]\n        ])\n      ])\n    ])\n  ], 64))\n}\n}\n\n})","<!-- Main file, controlling the interface and calculations. -->\n\n<script setup lang=\"ts\">\n\n    import { TresCanvas } from '@tresjs/core';\n\n\n    \n    /*\n     * Config\n     */\n    const sundialOrigin = new Vector3(0, -0.5, 0);\n    /** relative to sundial origin and rotation */\n    const gnomonRelativePosition = ref<number[]>([0,1,0]);\n    /** euler angle */\n    let sundialRotation = ref<Euler>(new Euler(0,0,0, \"YXZ\"));\n    let sundialNormal = computed(() => new Vector3(0, 1, 0).applyEuler(sundialRotation.value));\n\n\n    /*\n     * Independent variables\n     */\n    /** 0 to 24*60 */\n    let localTime = ref<number>(12 * 60);\n    /** 0 to 364 (integer) */\n    let day = ref<number>(156);\n    let longitude = ref<number>(0);\n    let latitude = ref<number>(0);\n    let autoSelectTimeZone = ref(true);\n    /** +/- minutes UTC */\n    let timeZone = ref<number>(0);\n    let numerals = ref<\"roman\"|\"arabic\">(\"arabic\");\n    let sunRaysPassThroughEarth = ref(false);\n    let hourLineStyle = ref<\"solar\"|\"standard\">(\"solar\");\n\n\n    /*\n     * Allow the time to be input manually.\n     */\n    let isEditingTime = ref<boolean>(false);\n    /** What's in the time manual entry box */\n    let timeEntryValue = ref<string>(\"\");\n    const timeEntryBox = ref<HTMLInputElement | null>(null);   \n    function showTimeEntryBox() {\n        if (isEditingTime.value == false) {\n            isEditingTime.value = true;\n            timeEntryValue.value = timeToString(localTime.value);\n\n            nextTick(() => timeEntryBox.value?.focus());\n            \n        }\n    }\n    function hideTimeEntryBox() {\n        if (isEditingTime.value == true) {\n            isEditingTime.value = false\n            \n            if (!timeEntryBox.value) return;\n\n            const newTime = stringToTime(timeEntryBox.value.value);\n            if (isNaN(newTime)) return;\n\n            localTime.value = newTime;\n        }\n    }\n    onClickOutside(timeEntryBox, hideTimeEntryBox)\n\n\n    /*\n     * Sidebar form validation \n     */\n    const formDefaults = {\n        latitude:\"45.00\",\n        longitude:\"0.00\",\n        timeZone:\"+0:00\",\n        slant:\"0\",\n        rotation:\"0\",\n    }\n\n    /** used to parse time zone user input*/\n    const timeZoneRegex = /^\\s*([+-±]?)\\s*((?:0?[0-9])|1[0-9])(?::((?:0[0-9])|[1-5][0-9]))?\\s*$/;\n\n    let formState = reactive(formDefaults);\n    const formRules = computed<Record<keyof typeof formDefaults, any>>(() => ({\n        latitude: {\n            required,\n            decimal,\n            minValue:minValue(-90),\n            maxValue:maxValue(90)\n        },\n        longitude: {\n            required,\n            decimal,\n            minValue:minValue(-180),\n            maxValue:maxValue(180)\n        },\n        timeZone: {\n            isATimeZone: helpers.withMessage(\"Your time zone should look like +/-HH(:MM)\", helpers.regex(timeZoneRegex))\n        },\n        slant: {\n            required,\n            decimal,\n            minValue:minValue(0),\n            maxValue:maxValue(180)\n        },\n        rotation: {\n            required,\n            decimal,\n            minValue:minValue(-180),\n            maxValue:maxValue(180)\n        }\n    }))\n    const v$ = useVuelidate(formRules, formState)\n\n    // parse and updadte whenever valid entries are changed in the form.\n    watch(() => formState.longitude, newVal => {\n        if (!v$.value.longitude.$invalid) {\n            longitude.value = Number.parseFloat(newVal);\n            // set the time zone as well.\n            if (autoSelectTimeZone.value) {\n                formState.timeZone = timeZoneToString(longitudeToTimeZone(longitude.value));\n            }\n        }\n    }, { immediate: true })\n    watch(() => formState.latitude, newVal => {\n        if (!v$.value.latitude.$invalid) latitude.value = Number.parseFloat(newVal);\n    }, {immediate:true})\n    watch(() => formState.timeZone, newVal => {\n        const result = newVal.match(timeZoneRegex);\n        if (result) {\n            const newValInt = (result[1] == \"-\" ? -1 : 1) * (Number.parseInt(result[2]) * 60 + Number.parseInt(result[3] ?? 0));\n            // change the local time so that the global time remains consistent\n            localTime.value = (((localTime.value + newValInt - timeZone.value) % 1440) + 1440) % 1440\n            timeZone.value = newValInt;\n        }\n    }, {immediate:true})\n    watch(() => formState.slant, newVal => {\n        if (!v$.value.slant.$invalid) sundialRotation.value.x = Number.parseFloat(newVal) * Math.PI/180;\n    }, {immediate: true})\n    watch(() => formState.rotation, newVal => {\n        if (!v$.value.rotation.$invalid) sundialRotation.value.y = -Number.parseFloat(newVal) * Math.PI / 180;\n    }, { immediate: true })\n\n    /**\n     * Set the latitude and longitude when the user clicks on the map.\n     */ \n    let mapImage = ref<HTMLImageElement>();\n    let mapImageIsBeingClicked = ref(false);\n    function setLatLngFromMap(e:MouseEvent) {\n        if (mapImage.value) {\n            const longitude = e.offsetX / mapImage.value.width * 360 - 180;\n            const latitude = 90 - e.offsetY / mapImage.value.height * 180;\n            formState.longitude = longitude.toFixed(1);\n            formState.latitude = latitude.toFixed(1);\n        }\n    }\n    function mapImageMouseMove(e:MouseEvent) {\n        if (mapImageIsBeingClicked.value) setLatLngFromMap(e)\n    }\n    function mapImageStartClicking() {\n        mapImageIsBeingClicked.value = true;\n    }\n    function mapImageClick(e:MouseEvent) {\n        setLatLngFromMap(e)\n    }\n    onMounted(() => {\n        window.addEventListener(\"mouseup\", () => {\n            mapImageIsBeingClicked.value = false;\n        })\n    })\n\n    // get the dimensions of the sidebar for layout\n    let sidebarDims = ref({ clientWidth: 0, clientHeight: 0 });\n    const sidebar = ref<HTMLDivElement>();\n    const sidebarResizeObserver = new ResizeObserver(() => {\n        const clientWidth = sidebar.value?.clientWidth ?? 0;\n        const clientHeight = sidebar.value?.clientHeight ?? 0;\n        sidebarDims.value = { clientWidth, clientHeight }\n    })\n    onMounted(() => {\n        sidebarResizeObserver.observe(sidebar.value as HTMLDivElement);\n    })\n\n\n    // set the time zone as the user clicks the checkbox\n    watch(() => autoSelectTimeZone.value, value => {\n        if (value) {\n            formState.timeZone = timeZoneToString(longitudeToTimeZone(longitude.value));\n        }\n    })\n\n    /**\n     * computed values\n     */\n    /** convert local time to UTC +0 */\n    let time = computed(() => (((localTime.value - timeZone.value) % 1440) + 1440) % 1440)\n    let sunHorizontalCoords = computed(() => calculateSunHorizontalCoords(day.value, time.value, latitude.value, longitude.value));\n    let sunCoords = computed(() => horizontalToActualCoords(sunHorizontalCoords.value.azimuth, sunHorizontalCoords.value.altitude))\n    // let gnomonRotation = computed(() => (90-latitude.value)*Math.PI/180);\n    let isDaytime = computed(() => sunHorizontalCoords.value.altitude >= 0);\n    let statusTextColor = computed(() => isDaytime.value ? \"black\" : \"white\")\n    let timeText = computed(() => timeToString(localTime.value))\n    let dateText = computed(() => dateToString(day.value));\n    let meanSolarTime = computed(() => time.value + ((longitude.value/360)*24*60));\n    let meanSolarTimeText = computed(() => timeToString(meanSolarTime.value));\n    let apparentSolarTime = computed(() => {\n        // use the already-computed sun position. This isn't actualy dependent on the latitude irl. Just seemed the easiest way to do it here.\n        // to calculate this, rotate sun position (90°-latitude) anticlockwise about x axis (west to east axis). Then work out projected angle in the x/z (horizontal) plain.\n        const latRad = latitude.value * Math.PI/180;\n        const timeHours = Math.atan2(sunCoords.value.y * Math.cos(latRad) + sunCoords.value.z * Math.sin(latRad), sunCoords.value.x) * 12 / Math.PI + 6;\n        const timeMins = (((timeHours % 24) + 24) % 24) * 60;\n        return timeMins;\n    })\n    let apparentSolarTimeText = computed(() => timeToString(apparentSolarTime.value))\n    let timeZoneText = computed(() => timeZoneToString(timeZone.value))\n    let sunlightIntensity = computed(() => {\n        // a very unscientific way of calculating the apparent sunlight intensity.\n        // have a little bit of sunlight when the sun is below the horizon.\n        if (sunHorizontalCoords.value.altitude > 0.1) return 1;\n        if (sunHorizontalCoords.value.altitude > -0.1) return (sunHorizontalCoords.value.altitude + 0.1)/0.2;\n        return 0;\n    })\n    let skyColor = computed(() => {\n        // make the sky look nice innit\n        return interpolate([\"#02407a\", \"#87CEEB\"])(sunlightIntensity.value);\n    })\n    let gnomonAbsolutePosition = computed(() => {\n        return new Vector3(...gnomonRelativePosition.value)\n            .applyEuler(sundialRotation.value)\n            .add(new Vector3(...sundialOrigin))\n    })\n    /** if there is an interection return it, and whether the intersection is in the positive direction of the gnomon vector.*/\n    let stylePlateIntersection = computed(() => {\n        // intersect the plane of the plate with the line of the sundial gnomon.\n        const plane = new Plane(sundialNormal.value, 0).translate(new Vector3(...sundialOrigin));\n        const rayDir = new Vector3(0, -(Math.sin(latitude.value * Math.PI / 180)), (Math.cos(latitude.value * Math.PI / 180)));\n        return infiniteLineIntersectWithPlaneWithDir(plane, gnomonAbsolutePosition.value, rayDir);\n    })\n    let stylePlateIntersectionPoint = computed(() => stylePlateIntersection.value?.point ?? null);\n\n    /** If the gnomon is parallel to the plate, this currently messes up the calculations. So just change the coordinates a tiny bit. VERY BAD AND LAZY CODE, @todo make not bad*/\n    watch(stylePlateIntersectionPoint, value => {\n        if (!value) {\n            latitude.value += 0.00001 * (Math.random()+0.5) * (latitude.value > 0 ? -1: 1)\n            longitude.value += 0.00001 * (Math.random()+0.5) * (longitude.value > 0 ? -1: 1)\n        }\n    }, {immediate: true})\n\n    /** If the intersection with the plate lies on the line between the center of the gnomon and celestial north, then this value is -1. If south, then 1.*/\n    let stylePlateIntersectionPointOrder = computed(() => stylePlateIntersection.value?.dir ?? null)\n    \n    const hourLineHours = [...Array(24).keys()];\n    // angle of each line on the sundial that represents one hour.\n    let hourLineDirections = computed(() => hourLineHours.map(i => {\n        let offsetHour;\n        if (hourLineStyle.value == 'standard') {\n            // need to adjust for time zones\n            offsetHour = i - timeZone.value/60 + longitude.value*24/360\n        }\n        else {\n            offsetHour = i;\n        }\n        return calculateShadowDirection(\n            ((((offsetHour * 60) % 1440) + 1440) % 1440) * Math.PI * 2 / 1440,\n            latitude.value * Math.PI / 180,\n            new Vector3(...sundialNormal.value)\n        ).multiplyScalar((stylePlateIntersectionPointOrder.value ?? 1))\n        // the scalar multiple is to fix a bug with the numerals being offset by 12 hours in some cases.\n    }));\n\n\n\n    // lambdas of the formula plateStyleIntersectionPoint + lambda * shadowDir such that it intersects the edge of the sundial plate.\n    let hourLineSundialSphereIntersectionParameters = computed(() => {\n        if (stylePlateIntersectionPoint.value) {\n            // to get the portion of the line we want, intersect each hour line with a sphere centered on the sundial plate origin.\n            return hourLineDirections.value.map((shadowDir, i) => {\n                const lambdas = infiniteLineIntersectWithSphereParameters(new Vector3(...sundialOrigin), 5, stylePlateIntersectionPoint.value as Vector3, shadowDir)\n                if (lambdas.length == 0) return [];\n                // lambda = 0 is the plate/style intersection point. Negative values are on the wrong side.\n                if (lambdas[0] < 0 && lambdas[1] < 0) return [];\n                // only display positive values\n                if (lambdas[0] < 0) lambdas[0] = 0;\n                // we know that lambdas[1] > 0.\n                return lambdas\n            })\n        }\n        else {\n            // special case when style is parallel to the plate, and the style/plate intersection point does not exist\n            /** @todo */\n            return hourLineDirections.value.map((angle, i) => [])\n        }\n    })\n\n    // vector to raise the sundial lines a bit off the plate\n    let plateToHourLineHeight = computed(() => sundialNormal.value.clone().normalize().multiplyScalar(0.007));\n\n    let hourLines = computed(() => hourLineHours.map((hour, i) => {\n        const shadowDir = hourLineDirections.value[i];\n        const lambdas = hourLineSundialSphereIntersectionParameters.value[i];\n        return {\n            hour: hour,\n            label: (() => {\n                switch (numerals.value) {\n                    case 'arabic': return hour.toString()\n                    case 'roman': return [\"XXIV\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"XIII\", \"XIV\", \"XV\", \"XVI\", \"XVII\", \"XVIII\", \"XIX\", \"XX\", \"XXI\", \"XXII\", \"XXIII\"].at(hour) ?? \"\";\n                }\n            })(),\n            points: lambdas.length == 0 ? null : [\n                shadowDir.clone().multiplyScalar(lambdas[0]).add(stylePlateIntersectionPoint.value as Vector3).add(plateToHourLineHeight.value),\n                shadowDir.clone().multiplyScalar(lambdas[1]).add(stylePlateIntersectionPoint.value as Vector3).add(plateToHourLineHeight.value),\n            ],\n            labelPoint: (() => {\n                // where the label should be displayed.\n                if (stylePlateIntersectionPoint.value) {\n                    // the sundial radius is 5. Intersect the hour line with a sphere of radius 4, centered on the sundial origin\n                    const labelSphereIntersectLambdas = infiniteLineIntersectWithSphereParameters(new Vector3(...sundialOrigin), 4, stylePlateIntersectionPoint.value as Vector3, shadowDir);\n                    if (labelSphereIntersectLambdas.length == 0) return null;\n                    if (labelSphereIntersectLambdas[1] < 0) return null;\n                    const point = shadowDir.clone().multiplyScalar(labelSphereIntersectLambdas[1]).add(stylePlateIntersectionPoint.value as Vector3);\n                    // prevent numbers from getting too bunched up\n                    if (stylePlateIntersectionPoint.value?.distanceTo(point) < 3) return null;\n                    // move to relative coordinate of sundial\n                    point.sub(sundialOrigin).applyMatrix4(new Matrix4().makeRotationFromEuler(sundialRotation.value).invert())\n                    return point.toArray();\n                } else {\n                    /** @todo */\n                    return null;\n                }\n            })()\n        }\n    }));\n   \n\n</script>\n\n<template>\n    <!-- setting the canvas to window-size messes up the Line2 rendering for some reason. Instead, make it fill an entire screen div. -->\n    <div style=\"width:100%; height:100%; position: fixed; left:0; top:0\">\n        <TresCanvas :clear-color=\"skyColor\" shadows :shadowMapType=\"BasicShadowMap\">\n            <TresPerspectiveCamera />\n            <SundialObject :latitude=\"latitude\" :origin=\"sundialOrigin\" :rotation=\"sundialRotation\"\n                :gnomon-position=\"gnomonRelativePosition\" :hour-labels=\"hourLines\" />\n            <SunObject :position=\"[sunCoords.x, sunCoords.y, sunCoords.z]\" />\n            <template v-for=\"hourLine in hourLines\" v-bind:key=\"hourLine.hour\">\n                <Line2 :line-width=\"1\" :points=\"hourLine.points ?? [[0,0,0], [0,0,0]]\" color=\"#FFFFFF\" />\n            </template>\n\n            <!-- directional light points at :target=\"[0,0,0]\" by default -->\n            <TresDirectionalLight :position=\"[sunCoords.x, sunCoords.y, sunCoords.z]\"\n                :intensity=\"sunRaysPassThroughEarth ? 1 : sunlightIntensity\" :shadow-mapSize-width=\"2048\"\n                :shadow-mapSize-height=\"2048\" cast-shadow />\n            <TresAmbientLight color=\"#AAAAAA\" />\n            <OrbitControls :enable-damping=\"false\" :rotate-speed=\"0.5\" :enable-pan=\"false\" :target=\"[0,0,0]\" />\n            <TresGridHelper :args=\"[50, 50, '#AAAAAA', '#AAAAAA']\" :position=\"[0, -8, 0]\" />\n            <CameraOffsetHelper :x-offset=\"-(sidebarDims.clientWidth)/2\" />\n            <RendererHelper/>\n        </TresCanvas>\n    </div>\n\n    <div id=\"overlay\">\n\n        <div id=\"sidebar\" ref=\"sidebar\">\n            <div id=\"sidebarContent\">\n\n                <!-- Position -->\n                <h2>Coordinates</h2>\n                <div class=\"horizontal_settings\">\n                    <div class=\"setting\">\n                        <label class=\"fieldTitle\">Latitude/°</label>\n                        <input class=\"small_input\" v-model=\"v$.latitude.$model\">\n                        <div class=\"error\" v-if=\"v$.latitude.$dirty && v$.latitude.$invalid\">{{\n                            v$.latitude.$errors[0].$message}}</div>\n                    </div>\n                    <div class=\"setting\">\n                        <label class=\"fieldTitle\">Longitude/°</label>\n                        <input class=\"small_input\" v-model=\"v$.longitude.$model\">\n                        <div class=\"error\" v-if=\"v$.longitude.$dirty &&v$.longitude.$invalid\">{{\n                            v$.longitude.$errors[0].$message}}</div>\n                    </div>\n                    <div class=\"setting\">\n                        <label class=\"fieldTitle\">Time Zone/±UTC</label>\n                        <input class=\"small_input\" v-model=\"v$.timeZone.$model\">\n                        <div class=\"error\" v-if=\"v$.timeZone.$dirty && v$.timeZone.$invalid\">{{\n                            v$.timeZone.$errors[0].$message }}</div>\n                    </div>\n                </div>\n\n                <!-- interactive location selector -->\n                <div\n                    style=\"display: grid; grid-template-columns: min-content auto; grid-template-rows: min-content auto;\">\n                    <input\n                        style=\"grid-row: 1; grid-column: 1; margin-right:10px; height:100%; margin-top: 0px; margin-bottom:0px;\"\n                        type=\"range\" min=\"-90\" max=\"90\" step=\"-0.1\" class=\"slider\" orient=\"vertical\"\n                        v-model=\"v$.latitude.$model\">\n                    <!-- <div id=\"coordBox\" style=\"grid-row: 1; grid-column: 2;\"></div> -->\n                    <div style=\"position:relative; aspect-ratio: 2 / 1;\">\n                        <img src=\"./assets/world-map-coordinates-correct.png\" id=\"mapImage\"\n                            alt=\"An outline world map, on which the user can click to set the latitude and longitude.\"\n                            style=\"grid-row: 1; grid-column: 2; object-fit: contain; display:block; margin:0px\"\n                            draggable=\"false\" @mousemove=\"mapImageMouseMove\" @mousedown=\"mapImageStartClicking\"\n                            @click=\"mapImageClick\" ref=\"mapImage\">\n                        <div id=\"markerPoint\"\n                            :style=\"`top:${(90 - latitude) * 100 / 180}%; left:${(longitude+180) * 100 / 360}%`\"></div>\n                    </div>\n\n                    <input style=\"grid-row: 2; grid-column: 2; margin-top:10px; margin-left:0px; margin-right:0px\"\n                        type=\"range\" min=\"-180\" max=\"180\" step=\"0.1\" class=\"slider\" v-model=\"v$.longitude.$model\">\n                </div>\n\n\n                <div class=\"setting\">\n                    <input type=\"checkbox\" id=\"autoSelectTimeZone\" v-model=\"autoSelectTimeZone\"\n                        style=\"margin-right: 10px; display: inline;\">\n                    <label for=\"autoSelectTimeZone\" class=\"fieldOption\">Automatically set time zone</label>\n                </div>\n\n                <br>\n                <h2>Sundial Settings</h2>\n                <div class=\"setting\">\n                    <label class=\"fieldTitle\">Slant/°</label>\n                    <input class=\"small_input\" v-model=\"v$.slant.$model\">\n                    <div class=\"error\" v-if=\"v$.slant.$dirty && v$.slant.$invalid\">{{\n                        v$.slant.$errors[0].$message }}</div>\n                    <input type=\"range\" :min=\"0\" :max=\"180\" step=\"1\" class=\"slider\" v-model=\"v$.slant.$model\">\n                </div>\n                <div class=\"setting\">\n                    <label class=\"fieldTitle\">Rotation/°</label>\n                    <input class=\"small_input\" v-model=\"v$.rotation.$model\">\n                    <div class=\"error\" v-if=\"v$.rotation.$dirty && v$.rotation.$invalid\">{{\n                        v$.rotation.$errors[0].$message }}</div>\n                    <input type=\"range\" :min=\"-180\" :max=\"180\" step=\"1\" class=\"slider\" v-model=\"v$.rotation.$model\">\n                </div>\n                <div class=\"setting\">\n                    <label class=\"fieldTitle\">Hour lines</label>\n                    <div class=\"checkboxSetting\">\n                        <input type=\"radio\" id=\"solarLines\" value=\"solar\" v-model=\"hourLineStyle\">\n                        <label for=\"solarLines\" class=\"fieldOption\">Solar time</label>\n                    </div>\n                    <div class=\"checkboxSetting\">\n                        <input type=\"radio\" id=\"standardLines\" value=\"standard\" v-model=\"hourLineStyle\">\n                        <label for=\"standardLines\" class=\"fieldOption\">Adjusted for time zone</label>\n                    </div>\n                </div>\n\n                <br>\n                <div class=\"setting\">\n                    <label class=\"fieldTitle\">Numerals</label>\n                    <div class=\"checkboxSetting\">\n                        <input type=\"radio\" id=\"arabic\" value=\"arabic\" v-model=\"numerals\">\n                        <label for=\"arabic\" class=\"fieldOption\">Western Arabic (0-23)</label>\n                    </div>\n                    <div class=\"checkboxSetting\">\n                        <input type=\"radio\" id=\"roman\" value=\"roman\" v-model=\"numerals\">\n                        <label for=\"roman\" class=\"fieldOption\">Roman (I-XXIV)</label>\n                    </div>\n                </div>\n\n                <br>\n                <h2>Misc</h2>\n                <div class=\"checkboxSetting\">\n                    <input type=\"checkbox\" id=\"sunRaysPassThroughEarth\" v-model=\"sunRaysPassThroughEarth\">\n                    <label for=\"sunRaysPassThroughEarth\" class=\"fieldOption\">Sundial remains illuminated at\n                        night</label>\n                </div>\n\n                <br>\n            </div>\n\n\n            <!-- breathing space at the bottom. Css padding leads to an overflow for some reason\n            <div style=\"height:100px\"></div> -->\n        </div>\n\n\n\n        <!-- status overlay -->\n        <div class=\"status\">\n\n            <div style=\"display:flex; flex-direction: row;\">\n                <div class=\"time_display\" v-show=\"!isEditingTime\" @click=\"showTimeEntryBox\"\n                    @keydown.space=\"showTimeEntryBox\" tabindex=\"0\">{{ timeText }}</div>\n                <input v-show=\"isEditingTime\" ref=\"timeEntryBox\" class=\"timeEntryBox\" @blur=\"hideTimeEntryBox\"\n                    @keydown.enter=\"hideTimeEntryBox\" v-model=\"timeEntryValue\">\n                <div v-show=\"!isEditingTime\"\n                    style=\"display: flex; margin-left:10px; justify-content:space-between; flex-direction: column; align-items: stretch; padding-block: 9px\">\n                    <div class=\"subtitle\">{{ isDaytime ? \"☀️\" : \"🌙\" }}</div>\n                    <div class=\"subtitle\">UTC {{ timeZoneText }}</div>\n                </div>\n\n\n            </div>\n\n\n\n            <div class=\"subtitle\">{{ meanSolarTimeText }} mean solar time</div>\n            <div class=\"subtitle\">{{ apparentSolarTimeText }} apparent solar time</div>\n\n            <input type=\"range\" min=\"0\" max=\"1440\" step=\"10\" class=\"slider\" id=\"time\" v-model.number=\"localTime\">\n\n            <div class=\"subtitle\">{{dateText}}</div>\n            <input type=\"range\" min=\"0\" max=\"364\" step=\"1\" class=\"slider\" id=\"day\" v-model.number=\"day\">\n\n\n        </div>\n    </div>\n\n\n\n</template>\n\n\n<script lang=\"ts\">\n    import { Line2, OrbitControls } from '@tresjs/cientos'\n    import { onClickOutside } from '@vueuse/core'\n    import interpolate from \"color-interpolate\";\n    import { computed, defineComponent, nextTick, onMounted, reactive, ref, watch } from 'vue'\n    import SunObject from './components/SunObject.vue';\n    import { decimal, helpers, maxValue, minValue, required } from '@vuelidate/validators';\n    import useVuelidate from '@vuelidate/core';\n    import { BasicShadowMap, Vector3, Plane, Euler, Matrix4,} from 'three';\n    import { dateToString, calculateShadowDirection, horizontalToActualCoords, calculateSunHorizontalCoords, timeToString, timeZoneToString, infiniteLineIntersectWithSphereParameters, infiniteLineIntersectWithPlaneWithDir, longitudeToTimeZone, stringToTime } from '@/calculations';\n    import SundialObject from './components/SundialObject.vue';\n    import CameraOffsetHelper from './components/CameraOffsetHelper.vue';\n    import RendererHelper from './components/RendererHelper.vue';\n    export default defineComponent({\n        name:\"App\",\n        components: {SundialObject, SunObject}\n    })\n</script>\n\n<style>\n    #app {\n        font-family: sans-serif;\n        color: white;\n    }\n</style>\n\n<style scoped>\n    #overlay {\n        position:absolute;\n        width: 100%;\n        height:100%;\n        left:0;\n        top:0;\n        overflow: hidden;\n        display:flex;\n        flex-direction: row;\n        justify-content: space-between;\n        align-items: flex-end;\n        pointer-events: none;\n\n    }\n\n    #sidebar {\n        /* flex:1;\n        flex-grow: 0; */\n        pointer-events:auto;\n        width: 35%;\n        max-width: 500px;\n        min-width:150px;\n        background: rgba(39, 39, 39, 0.95);\n        /* position: relative; */\n        /* left: 0;\n        top:0; */\n        height: 100%;\n        /* padding-top: 20px;\n        padding-left:20px;\n        padding-right: 20px;\n        padding-bottom: 100px; */\n        \n        overflow-x: hidden;\n        overflow-y: scroll;\n    }\n    #sidebar h2 {\n        /* color:white; */\n        font-size: 15pt;\n        background-color: brown\n    }\n\n    #sidebarContent {\n        padding: 20px;\n        width:100%;\n        box-sizing: border-box;\n    }\n\n    .horizontal_settings {\n        flex-direction: row;\n        display: flex;\n        flex-wrap: wrap;\n        gap: 20px;\n        row-gap: 10px;\n        margin-bottom: 10px;\n    }\n\n    .horizontal_settings .setting {\n        flex:1\n    }\n\n    /* .setting label {\n\n    } */\n\n    .fieldTitle {\n        display: block;\n        margin-bottom: 3px;\n        font-size: 11pt;\n        white-space: nowrap\n    }\n\n    .fieldOption {\n        display: inline;\n        /* margin-bottom: 3px; */\n        font-size: 11pt;\n        /* white-space: nowrap */\n    }\n\n    .setting .error {\n        min-width: 100%;\n        width: 0;\n        font-size: 9pt;\n        margin-top: 2px;\n        color: yellow;\n\n    }\n\n    .checkboxSetting label {\n        display: block;\n        /* font-weight: bold; */\n        margin-bottom: 3px;\n        font-size: 11pt;\n        display: inline\n    }\n\n    .checkboxSetting input {\n        margin-right: 10px;\n        display: inline;\n    }\n\n    .small_input {\n        /* width: none; */\n        width: 100%;\n        min-width: 80px;\n        max-width: 100px;\n    }\n\n\n    .slider {\n        width: 100%;\n        opacity: 0.7; /* Fully shown on mouse-over */\n\n    }\n\n    .slider:hover {\n        opacity: 1; /* Fully shown on mouse-over */\n    }\n\n\n    .status {\n        /* position: absolute; */\n        /* bottom:0;\n        right:0; */\n        pointer-events:auto;\n        flex:1;\n        font-family: monospace;\n        /* margin-right: 20px;\n        margin-bottom: 20px; */\n        margin:20px;\n        text-align: left;\n        color:v-bind(\"statusTextColor\");\n        max-width:350px;\n        width:100%\n    }\n\n    .time_display {\n        font-size: 40pt;\n        width: min-content;\n    }\n\n    .timeEntryBox {\n        font-size: 40pt;\n        width: 100%;\n        font-family: monospace;\n    }\n\n    .time_display:focus, .time_display:hover {\n        color:brown\n    }\n\n    .subtitle {\n        font-size: 12pt;\n    }\n\n    input[type=range] {\n        height: 20px;\n    }\n\n    input[type=range][orient=vertical] {\n        writing-mode: vertical-lr;\n        direction: rtl;\n        appearance: slider-vertical;\n        width: 20px;\n        vertical-align: bottom;\n    }\n\n\n\n    #coordBox {\n        background-color: white;\n        width: 100%\n    }\n\n    #markerPoint {\n        width: 10px;\n        height: 10px;\n        transform: translate(-5px, -5px);\n        border-radius: 5px;\n        background-color: brown;\n        grid-row: 1;\n        grid-column: 2;\n        position: absolute;\n        pointer-events: none;\n    }\n\n    #mapImage {\n        width:100%;\n        aspect-ratio: 2 / 1;\n        user-select: none\n    }\n</style>","import script from \"./App.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./App.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./App.vue?vue&type=style&index=0&id=0e88b5d6&lang=css\"\nimport \"./App.vue?vue&type=style&index=1&id=0e88b5d6&scoped=true&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-0e88b5d6\"]])\n\nexport default __exports__","import { createApp } from 'vue'\nimport App from './App.vue'\nimport './assets/global.css'\n\ncreateApp(App).mount('#app')\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/sundials/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunksundials\"] = self[\"webpackChunksundials\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(7110); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_TresSphereGeometry","_resolveComponent","_component_TresMeshBasicMaterial","_component_TresMesh","_component_TresObject3D","_openBlock","_createBlock","position","default","_withCtx","_createVNode","args","color","_","defineComponent","name","props","required","type","Array","__exports__","calculateSunHorizontalCoords","day","time","latitude","longitude","longRad","Math","PI","latRad","n","L","g","lambda","sin","epsilon","rightAsc","atan2","cos","declination","asin","ERA","LMST","h","azimuth","altitude","horizontalToActualCoords","multiplyer","x","y","z","calculateShadowDirection","timeAngle","plateNorm","sunPos","Vector3","style","norm1","clone","cross","shadowDir","timeToString","hours","floor","toString","padStart","minutes","stringToTime","str","result","match","NaN","Number","parseInt","dateToString","dateObj","Date","parse","toLocaleDateString","undefined","month","timeZoneToString","timeZone","symbol","abs","trunc","mins","infiniteLineIntersectWithPlaneWithDir","plane","linePoint","lineDirection","ray","Ray","intersection","intersectPlane","dir","point","ray2","multiplyScalar","infiniteLineIntersectWithSphereParameters","sphereOrigin","sphereRadius","c","distanceToSquared","pow","b","sub","multiply","dot","a","length","discriminant","sqrt","longitudeToTimeZone","round","_component_TresMeshPhongMaterial","_component_Text3D","rotation","_Suspense","font","size","height","castShadow","receiveShadow","center","_createTextVNode","_toDisplayString","text","String","Boolean","components","Text3D","__default__","SundialLetter","_defineComponent","gnomonPosition","origin","Object","Euler","hourLabels","setup","__props","relativeGnomonRotation","computed","gnomonCorrectedRotation","mat","Matrix4","makeRotationFromEuler","invert","value","setFromRotationMatrix","_component_TresCylinderGeometry","_unref","toArray","_createElementBlock","_Fragment","_renderList","hour","label","labelPoint","key","xOffset","camera","sizes","useTresContext","watch","width","zoomMultiple","isPerspectiveCamera","setViewOffset","immediate","renderer","setPixelRatio","window","devicePixelRatio","_withScopeId","_pushScopeId","_popScopeId","_hoisted_1","_hoisted_2","id","_hoisted_3","_hoisted_4","_createElementVNode","_hoisted_5","class","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","for","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_41","_hoisted_42","_hoisted_43","_hoisted_44","_hoisted_45","_hoisted_46","_hoisted_47","_hoisted_48","_hoisted_49","_hoisted_50","_hoisted_51","_hoisted_52","SundialObject","SunObject","_useCssVars","statusTextColor","sundialOrigin","gnomonRelativePosition","ref","sundialRotation","sundialNormal","applyEuler","localTime","autoSelectTimeZone","numerals","sunRaysPassThroughEarth","hourLineStyle","isEditingTime","timeEntryValue","timeEntryBox","showTimeEntryBox","nextTick","focus","hideTimeEntryBox","newTime","isNaN","onClickOutside","formDefaults","slant","timeZoneRegex","formState","reactive","formRules","decimal","minValue","maxValue","isATimeZone","helpers","withMessage","regex","v$","useVuelidate","newVal","$invalid","parseFloat","newValInt","mapImage","mapImageIsBeingClicked","setLatLngFromMap","e","offsetX","offsetY","toFixed","mapImageMouseMove","mapImageStartClicking","mapImageClick","onMounted","addEventListener","sidebarDims","clientWidth","clientHeight","sidebar","sidebarResizeObserver","ResizeObserver","observe","sunHorizontalCoords","sunCoords","isDaytime","timeText","dateText","meanSolarTime","meanSolarTimeText","apparentSolarTime","timeHours","timeMins","apparentSolarTimeText","timeZoneText","sunlightIntensity","skyColor","interpolate","gnomonAbsolutePosition","add","stylePlateIntersection","Plane","translate","rayDir","stylePlateIntersectionPoint","random","stylePlateIntersectionPointOrder","hourLineHours","keys","hourLineDirections","map","i","offsetHour","hourLineSundialSphereIntersectionParameters","lambdas","angle","plateToHourLineHeight","normalize","hourLines","at","points","labelSphereIntersectLambdas","distanceTo","applyMatrix4","_component_TresPerspectiveCamera","_component_TresDirectionalLight","_component_TresAmbientLight","_component_TresGridHelper","TresCanvas","shadows","shadowMapType","BasicShadowMap","hourLine","Line2","intensity","OrbitControls","target","CameraOffsetHelper","RendererHelper","ref_key","_withDirectives","$event","$model","_vModelText","$dirty","$errors","$message","_createCommentVNode","min","max","step","orient","src","_imports_0","alt","draggable","onMousemove","onMousedown","onClick","_normalizeStyle","_isRef","_vModelCheckbox","_vModelRadio","onKeydown","_withKeys","tabindex","_vShow","onBlur","number","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","getter","__esModule","d","definition","o","defineProperty","enumerable","get","globalThis","this","Function","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","bind","push","__webpack_exports__"],"sourceRoot":""}